using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using NetTopologySuite.Geometries;
using NUnit.Framework;
using GeoAPI.Geometries;
using ASTRA.EMSG.Business.Services.GIS;
using ASTRA.EMSG.Common.Utils;

namespace ASTRA.EMSG.Tests.GeomUtils
{
    [TestFixture]
    class GeometryUtilsTest
    {
        [Test]
        public void TestcreateOffsetLineNew()
        {
            Coordinate[] nasenWegCoords = new Coordinate[]{
                new Coordinate(1712.421875, 348577.1875),
                new Coordinate(1701.375, 348590.2734375),
                new Coordinate(1698.109375, 348588.9296875),
                new Coordinate(1678.90625, 348612.1640625),
                new Coordinate(1665.65625, 348636.171875),
                new Coordinate(1650.4921875, 348655.375),
                new Coordinate(1640.6953125, 348667.46875),
                new Coordinate(1637.7578125, 348666.3515625),
                new Coordinate(1640.2734375, 348655.1171875),
                new Coordinate(1646.8984375, 348618.75),
                new Coordinate(1643.5625, 348617),
                new Coordinate(1622.890625, 348640),
                new Coordinate(1597.2265625, 348651.1875),
                new Coordinate(1584.40625, 348644),
                new Coordinate(1569.09375, 348642.8671875),
                new Coordinate(1527.21875, 348632.75),
                new Coordinate(1501.3125, 348634.84375),
                new Coordinate(1537.5625, 348657.8671875),
                new Coordinate(1553.65625, 348673),
                new Coordinate(1554.9296875, 348679.3671875),
                new Coordinate(1551.8984375, 348681.015625),
                new Coordinate(1542.0625, 348675.3671875),
                new Coordinate(1528.828125, 348676.9375),
                new Coordinate(1504.7578125, 348683.6875),
                new Coordinate(1480.6015625, 348681.6171875),
                new Coordinate(1463.2578125, 348683.46875),
                new Coordinate(1463.09375, 348686.25),
                new Coordinate(1491.109375, 348710.8125),
                new Coordinate(1494.359375, 348717.9375),
                new Coordinate(1490.7578125, 348723.8203125),
                new Coordinate(1469.8984375, 348714.3671875),
                new Coordinate(1448.75, 348712.4375),
                new Coordinate(1395.9921875, 348695.5625),
                new Coordinate(1377.921875, 348694.5),
                new Coordinate(1361.8671875, 348696.6875),
                new Coordinate(1356.34375, 348696.46875),
                new Coordinate(1364.671875, 348706.6171875),
                new Coordinate(1371.7421875, 348721.6875),
                new Coordinate(1392.4296875, 348746.5625),
                new Coordinate(1408.3203125, 348759.5),
                new Coordinate(1404.8515625, 348766.6328125),
                new Coordinate(1378.8359375, 348763.75),
                new Coordinate(1348.6953125, 348760.203125),
                new Coordinate(1334.9296875, 348753.8125),
                new Coordinate(1316.5234375, 348745.25),
                new Coordinate(1296.1953125, 348737.453125),
                new Coordinate(1295.4609375, 348740.5390625),
                new Coordinate(1329.359375, 348778.6171875),
                new Coordinate(1333.9375, 348791.25),
                new Coordinate(1332.28125, 348803.9375),
                new Coordinate(1324.03125, 348803.78125),
                new Coordinate(1316.4453125, 348800.3203125),
                new Coordinate(1310.3984375, 348789.953125),
                new Coordinate(1286.7421875, 348790.1875),
                new Coordinate(1268.453125, 348786.3046875),
                new Coordinate(1248.1015625, 348779.3984375),
                new Coordinate(1222.953125, 348768.1640625),
                new Coordinate(1207.9296875, 348781.5625),
                new Coordinate(1198.2890625, 348780.2578125),
                new Coordinate(1181.96875, 348779.3984375),
                new Coordinate(1166.0390625, 348785.4453125)
            };
            Coordinate[] tropfenCoords = new Coordinate[]{
              new Coordinate(4983.7422, 347169.5),
              new Coordinate(4994.4844, 347188.2266),
              new Coordinate(5004.2109, 347216.0312),
              new Coordinate(4996.3359, 347232.25),
              new Coordinate(4980.5859, 347238.7344),
              new Coordinate(4972.5859, 347235.9219),
              new Coordinate(4963.4375, 347232.7109),
              new Coordinate(4955.5625, 347221.5938),
              new Coordinate(4956.9531, 347207.6875),
              new Coordinate(4971.3125, 347193.3281),
              new Coordinate(4978.2656, 347186.375),
              new Coordinate(4983.7422, 347169.5)
            };

            Coordinate[] simpleline = new Coordinate[]{
              new Coordinate(4999, 348005),
              new Coordinate(5000, 348005),
            };

            //the buffer produced for the offset creates a small segemnt (<1cm) as part of the boundary line, that got erroneously mistaken for an endcap and was removed
            Coordinate[] smallSegment = new Coordinate[]{
                new Coordinate(527830.913869586, 151998.775088717),
                new Coordinate(527798.992, 152035.861),
                new Coordinate(527798.642586759, 152036.268295789),
            };

            Coordinate[] microsegment = new Coordinate[]{
                new Coordinate(0, 0),
                new Coordinate(0, 0.1)
            };
            Coordinate[] metersegment = new Coordinate[]{
                new Coordinate(0, 0),
                new Coordinate(0, 1)
            };

            GeometryFactory gf = new GeometryFactory();
            ILineString line;
            ILineString shiftLine;

            line = gf.CreateLineString(nasenWegCoords);
            double left = 5;
            double right = left * -1;

            line = gf.CreateLineString(nasenWegCoords);
            Console.WriteLine(line);
            shiftLine = GeometryUtils.createOffsetLineNew(gf, line, left);
            Console.WriteLine(shiftLine);
            Assert.AreEqual("LINESTRING (1708.6012257409402 348573.96218772995, 1699.9010780860981 348584.26823251205, 1699.4108082379491 348584.10203056032, 1698.7886270196793 348583.97604069248, 1698.1554967230482 348583.92990022583, 1697.5216229757609 348583.96435291326, 1696.8972233894388 348584.078843401, 1696.2923628587028 348584.2715261805, 1695.7167913219507 348584.53929533716, 1695.1797865990134 348584.87783461512, 1694.6900048390394 348585.28168699256, 1694.2553409892923 348585.74434264516, 1675.0522159892923 348608.97871764516, 1674.5286940530696 348609.74807327578, 1661.4773775292306 348633.39588912349, 1646.5874271984703 348652.2518901091, 1645.6717866184661 348653.382202404, 1651.8174824295445 348619.64610098826, 1651.8913083413011 348619.01690965152, 1651.8849822987531 348618.38343353942, 1651.79860585563 348617.75584202138, 1651.6335656371705 348617.14420999982, 1651.3925110802352 348616.558356175, 1651.0793119011555 348616.00768542255, 1650.6989959740922 348615.50103781419, 1650.2576686171631 348615.04654670594, 1649.7624145820616 348614.65150817088, 1649.2211843205582 348614.3222638733, 1645.8852468205582 348612.5722638733, 1645.2814379596914 348612.30476280785, 1644.6476410599619 348612.1191733405, 1643.9949131382605 348612.01873320551, 1643.3346414760047 348612.00519464916, 1642.6783449602835 348612.07879386068, 1642.0374731290583 348612.23824685195, 1641.4232064262044 348612.48077185737, 1640.846261151084 348612.80213786365, 1640.3167025054322 348613.19673842285, 1639.8437689990792 348613.65768946044, 1619.8975235987646 348635.85033740394, 1597.5052733224084 348645.61158623063, 1586.8513707394827 348639.63864876796, 1586.1922206957181 348639.32984918082, 1585.4952197916521 348639.12002614833, 1584.7751398731598 348639.01362654212, 1569.8704747428365 348637.91098549933, 1528.3929867375202 348627.88983867713, 1527.609392833094 348627.76528354094, 1526.8159620204051 348627.76625022263, 1500.9097120204051 348629.86000022263, 1500.2605889550875 348629.95565393369, 1499.6295802349853 348630.13548268977, 1499.0275520924133 348630.396389765, 1498.4648717021021 348630.73388223117, 1497.951228654141 348631.14214832784, 1497.495468095211 348631.61415754305, 1497.105438411485 348632.14178168221, 1496.7878560761565 348632.71593483828, 1496.5481899889805 348633.3267298555, 1496.3905672995488 348633.96364858979, 1496.3177023360584 348634.61572303605, 1496.3308498634528 348635.27172420139, 1496.4297834758479 348635.92035547312, 1496.6127994953358 348636.55044715136, 1496.8767463100264 348637.15114879562, 1497.2170786461127 348637.71211607393, 1497.6279358393742 348638.2236888968, 1498.1022427582511 348638.67705776769, 1498.6318316405395 348639.06441548624, 1534.4822458223971 348661.83406432113, 1543.9544358507205 348670.740681838, 1543.3745959913508 348670.54241764959, 1542.7485867576847 348670.41448268737, 1542.1113735923759 348670.36742636852, 1541.4733623116958 348670.40201713191, 1528.2389873116958 348671.97232963191, 1527.4780628350618 348672.12321582157, 1504.2810732321411 348678.62831125065, 1481.0285225090281 348676.63545033807, 1480.0707947286867 348676.64543875604, 1462.7270447286867 348678.49700125604, 1462.0978349815819 348678.60516570887, 1461.4875377146302 348678.79262690665, 1460.9061033232217 348679.05632844853, 1460.3630116172787 348679.39197089762, 1459.8671172607476 348679.79408187966, 1459.42650540358 348680.25610530551, 1459.0483598600069 348680.77050826291, 1458.7388459823521 348681.32890383439, 1458.5030101400284 348681.92218783905, 1458.3446974426327 348682.54068726877, 1458.2664890485921 348683.17431799864, 1458.1024265485912 348685.95556799864, 1458.1063703815053 348686.60502752149, 1458.194463921797 348687.24849683221, 1458.3652208086517 348687.87511897611, 1458.6157599415392 348688.47432125296, 1458.9418540916679 348689.03599360486, 1459.3380012260243 348689.55065919884, 1459.7975173405844 348690.00963432464, 1487.0058450882113 348713.86434219929, 1488.5963935271277 348717.351313777, 1471.9623104962 348709.81302146707, 1471.4427481871751 348709.61165340786, 1470.9040059045985 348709.46934795752, 1470.3527747002265 348709.38787251612, 1449.7507061888357 348707.50803841109, 1397.5154520023418 348690.800182785, 1396.9077533275274 348690.64704079303, 1396.2856711081079 348690.57112069445, 1378.2153586081079 348689.50862069445, 1377.2468468902841 348689.54577583761, 1361.6267697340611 348691.67405885644, 1356.5416146899995 348691.47266657749, 1355.9040200367704 348691.48812377837, 1355.2735800691294 348691.58461892896, 1354.6605524454742 348691.76058199193, 1354.0749115143151 348692.01314993651, 1353.526186025294 348692.338213322, 1353.02330409038 348692.73048316076, 1352.5744479178206 348693.18357697362, 1352.1869206824217 348693.69012263662, 1351.8670276982568 348694.24187833036, 1351.6199738272067 348694.82986663951, 1351.4497787925525 348695.44452062104, 1351.3592117755263 348696.07583946467, 1351.3497463589761 348696.7135512121, 1351.4215365512364 348697.3472798884, 1351.5734142803158 348697.96671432583, 1351.8029083991689 348698.56177593296, 1352.1062848928282 348699.1227826798, 1352.4786076332021 348699.64060663048, 1360.4105462023672 348709.3062616036, 1367.2155976131014 348723.81117229012, 1367.5224834533274 348724.36968152976, 1367.89791610542 348724.88462017989, 1388.58541610542 348749.75962017989, 1389.2728505459481 348750.43991930224, 1402.0912080357227 348760.87610416114, 1401.897297291461 348761.27484404744, 1379.4034635334228 348758.78228409047, 1350.0746632779326 348755.33094264, 1337.0368644850746 348749.27820744558, 1318.6323855672135 348740.71653134457, 1318.3140039574189 348740.58160929638, 1297.9858789574189 348732.78473429638, 1297.3605707372517 348732.59080320474, 1296.715284414511 348732.4802355775, 1296.0610832848088 348732.454927073, 1295.4091834862145 348732.51531159994, 1294.7707617009683 348732.66035387875, 1294.1567635336628 348732.88756719051, 1293.5777158511985 348733.19305601181, 1293.0435463019089 348733.57158280228, 1292.5634131081586 348734.01665780134, 1292.1455480505852 348734.5206502935, 1291.7971153359856 348735.0749194356, 1291.5240887685268 348735.66996240208, 1291.3311493301487 348736.29557730892, 1290.5967743301487 348739.38151480892, 1290.4841231411015 348740.0581063304, 1290.4651289049357 348740.74374880019, 1290.5401490676368 348741.42553934909, 1290.707771850638 348742.09064759588, 1290.9648428185997 348742.72655709792, 1291.3065242416412 348743.32130089361, 1291.7263861349104 348743.86368670454, 1324.9859236737536 348781.22413518676, 1328.8220430275635 348791.80946794292, 1327.9024794348657 348798.8536720681, 1325.1629649186889 348798.80178732349, 1319.9646626243743 348796.43016228086, 1314.717450046566 348787.43397224112, 1314.3495875465433 348786.88907322014, 1313.9134115963784 348786.39715015452, 1313.4164634647373 348785.96670815325, 1312.8673351415498 348785.60518934781, 1312.2755207867149 348785.31884422142, 1311.6512525807225 348785.11262354109, 1311.0053238152625 348784.99009276152, 1310.3489022824947 348784.95337037981, 1287.2425860943542 348785.1822968942, 1269.7802926075447 348781.47500946879, 1249.9285661860336 348774.73837754683, 1224.9924983166877 348763.59887285717, 1224.3949738561698 348763.37646687421, 1223.774004938886 348763.23190717743, 1223.1396885170084 348763.1675443069, 1222.5023385730744 348763.1844248026, 1221.8723184146779 348763.28227418778, 1221.2598721671295 348763.45950143185, 1220.6749582040175 348763.71322482044, 1220.127087224093 348764.03931881231, 1219.6251676073457 348764.4324811204, 1206.3194413461727 348776.29900246096, 1198.9596111367673 348775.30298005824, 1198.55198211688 348775.26472995762, 1182.23166961688 348774.40535495762, 1181.539978636097 348774.416855912, 1180.8564955172226 348774.52371802443, 1180.1943040049573 348774.72389566037, 1164.2646165049573 348780.77077066037)", shiftLine.ToString());
            shiftLine = GeometryUtils.createOffsetLineNew(gf, line, right);
            Console.WriteLine(shiftLine);
            Assert.AreEqual("LINESTRING (1716.2425242590598 348580.41281227005, 1705.1956492590598 348593.49874977005, 1704.7600249282573 348593.95332964993, 1704.2707260952734 348594.34955947817, 1703.7355113060021 348594.68115645362, 1703.1628671707306 348594.94286262308, 1702.5618737965608 348595.13052825385, 1701.9420608090823 348595.241177634, 1701.3132562462731 348595.27305625635, 1700.6854307206395 348595.22565863893, 1700.0685393206263 348595.09973634005, 1699.6219135392378 348594.948070407, 1683.05799842706 348614.98919471278, 1670.0338059469304 348638.58786422422, 1669.5802960197991 348639.270562276, 1654.4162335197991 348658.473687276, 1654.3773595826317 348658.52229056304, 1644.5804845826317 348670.61604056304, 1644.1565690149623 348671.07703260222, 1643.678350753454 348671.48141529609, 1643.1533324318377 348671.82284439664, 1642.5897509169995 348672.09596331732, 1641.9964480830722 348672.2964871712, 1641.3827320937232 348672.4212699951, 1640.7582313689561 348672.46835410589, 1640.1327435274982 348672.437000814, 1639.516081674677 348672.32770201261, 1638.9179204473332 348672.14217246015, 1635.9804204473332 348671.02498496015, 1635.3905204812102 348670.7556433914, 1634.8404409093835 348670.41222045186, 1634.33943466105 348670.00049288437, 1633.895929199402 348669.5273863888, 1633.5173847626415 348669.00085912441, 1633.2101688747621 348668.42976784543, 1632.9794492369565 348667.82371892047, 1632.8291068013323 348667.19290674344, 1632.7616704891282 348666.54794225254, 1632.7782746515445 348665.8996744433, 1632.8786399887415 348665.25900787651, 1635.3723593381139 348654.12245997466, 1640.0630548249994 348628.37341812154, 1626.6093560009208 348643.34231053956, 1626.0969007639017 348643.83663859725, 1625.5194260251628 348644.25316413626, 1624.8886422932471 348644.58344050858, 1599.2245797932471 348655.77094050858, 1598.6052751734962 348655.99365765078, 1597.962083466711 348656.13310500927, 1597.3061483843997 348656.18686656858, 1596.6488344252684 348656.15401087503, 1596.0015299779545 348656.03510717466, 1595.3754500098423 348655.83221555088, 1594.7814417605173 348655.54885123204, 1582.9298325918026 348648.90443902288, 1568.7248601268402 348647.85356095788, 1567.9195132624798 348647.72734882287, 1526.8231259964798 348637.79827764572, 1516.5922628664607 348638.625138719, 1540.2431683594605 348653.64652201376, 1540.9876132615796 348654.22457866219, 1557.0813632615796 348669.35739116219, 1557.5048039097867 348669.8080362152, 1557.8693797026588 348670.30750336888, 1558.1695143375675 348670.84815311438, 1558.4006171598733 348671.42171604192, 1558.5591533784545 348672.01941932429, 1559.8325908784516 348678.38660682429, 1559.9173076489406 348679.01555523486, 1559.9216732534599 348679.6501684839, 1559.8456173615907 348680.28022287495, 1559.6903652429828 348680.89556815528, 1559.4584180281102 348681.48629103776, 1559.1535124147572 348682.04287490505, 1558.7805604693624 348682.55635312345, 1558.3455704930332 348683.01845349662, 1557.8555502270851 348683.42173153139, 1557.3183939574731 348683.75969036965, 1554.2871439574731 348685.40812786965, 1553.7095972092159 348685.67606494785, 1553.1026842794443 348685.86843755504, 1552.4762456671349 348685.98212655762, 1551.8404384610856 348686.01528859982, 1551.2055716526697 348685.96738599159, 1550.5819389856333 348685.83919542673, 1549.9796520531188 348685.63279538986, 1549.408476348081 348685.35153245542, 1541.0079303016817 348680.52739044465, 1529.8035950389974 348681.85683046107, 1506.1078746649382 348688.50178417843, 1505.523645642191 348688.628501882, 1504.9284688530956 348688.68458679225, 1504.3308524909719 348688.66923716193, 1480.6539469257862 348686.64000689844, 1472.1575656077582 348687.54705301212, 1494.4056076594156 348707.05286567536, 1494.9012836643205 348707.55344665871, 1495.3216863352088 348708.11872324324, 1495.6584702414655 348708.73747410037, 1498.9084702414655 348715.86247410037, 1499.1529700736214 348716.5157242546, 1499.3041834907967 348717.19664307096, 1499.3591677835243 348717.89197943523, 1499.3168529224272 348718.58820165868, 1499.1780623816687 348719.27176081325, 1498.9454971136204 348719.92935440206, 1498.6236829866077 348720.54818523483, 1495.0221204866077 348726.43099773483, 1494.6428614810886 348726.96775501966, 1494.1964772556805 348727.45013132441, 1493.6906803616096 348727.86979223281, 1493.1342098721536 348728.21948691458, 1492.53668039041 348728.493173404, 1491.9084159298079 348728.68612299231, 1491.2602715375476 348728.79500192904, 1490.6034457429305 348728.81792902236, 1489.9492870710608 348728.75450814172, 1489.3090979649464 348728.60583506245, 1488.6939395038 348728.37447853293, 1468.6034434933911 348719.26979682036, 1448.2956627997735 348717.41681498388, 1447.7552642906678 348717.33755110879, 1447.2267354976582 348717.199817215, 1395.0693729614798 348700.516875844, 1378.114456351268 348699.51995900052, 1366.602883792227 348701.08844577253, 1368.537017366798 348703.44533086952, 1368.9003457823633 348703.94884815824, 1369.1984648868986 348704.49351520988, 1375.9964456086584 348718.98335478146, 1395.963294076347 348742.99183118669, 1411.4771494540612 348755.62258069776, 1411.9669100877864 348756.07913373067, 1412.3912790364748 348756.59703057905, 1412.7426464117405 348757.1669841893, 1413.0147114073711 348757.77877401293, 1413.2025952869346 348758.42142928444, 1413.3029288704818 348759.08342575136, 1413.3139129515098 348759.75289233023, 1413.2353505607753 348760.41782398155, 1413.0686504983958 348761.06629698747, 1412.8168020708931 348761.68668277049, 1409.3480520708931 348768.81949527049, 1409.008664241084 348769.41103227431, 1408.5919376695442 348769.95088326343, 1408.1056251395157 348770.42900484736, 1407.5587740117558 348770.83650204976, 1406.9615579073991 348771.1657937906, 1406.3250874378582 348771.41075392469, 1405.6612035029536 348771.56682521245, 1404.9822570027532 348771.63110410282, 1404.3008790613651 348771.6023947511, 1378.2852540613651 348768.7195822511, 1378.2515819029957 348768.71573544765, 1348.1109569029957 348765.16886044765, 1347.333305934663 348765.01404363534, 1346.5899072126808 348764.73824005655, 1332.8207394327865 348758.34596865543, 1314.571346106407 348749.85643763433, 1308.3128657992559 348747.45599053724, 1333.0939263650766 348775.29256329546, 1333.4837323796578 348775.7905859708, 1333.8075527486799 348776.33383147954, 1334.0602066660008 348776.91360842995, 1338.6383316660008 348789.54642092995, 1338.8077552080463 348790.11835773831, 1338.9078621513966 348790.70640080579, 1338.9372277097696 348791.30218072596, 1338.8954339336876 348791.89721797657, 1337.2391839336876 348804.58471797657, 1337.1099345086268 348805.23511547316, 1336.8957538698758 348805.86268935038, 1336.6004092177066 348806.45640127873, 1336.2290953375148 348807.00580852281, 1335.7883432292963 348807.50124761747, 1335.2859052345887 348807.9340043377, 1334.7306186813676 348808.296466972, 1334.1322504452339 348808.5822602039, 1333.5013251608866 348808.786357247, 1332.8489401054519 348808.90516826027, 1332.1865700096673 348808.93660348956, 1323.9365700096673 348808.78035348956, 1323.2578715820944 348808.72107649723, 1322.593531553372 348808.57008761138, 1321.9558839360495 348808.3301900634, 1314.3699464360495 348804.8692525634, 1313.8277327623894 348804.58039187919, 1313.3250378588152 348804.22721487447, 1312.8694511347353 348803.81505362008, 1312.4678507863471 348803.35013069859, 1312.126299953434 348802.83946525888, 1307.5430736722358 348794.98165999382, 1286.7917227175053 348795.18725462019, 1286.2447886937844 348795.16269792849, 1285.7038182799522 348795.07849063206, 1267.4147557799522 348791.19567813206, 1266.8463813221738 348791.03949211619, 1246.4948188221738 348784.13324211619, 1246.0621891833123 348783.96362714283, 1223.8670551428866 348774.04855949758, 1211.2576448926436 348785.2940813796, 1210.7736161992043 348785.67492866854, 1210.2464361850082 348785.9933775125, 1209.6841038248263 348786.24459604337, 1209.0951514647913 348786.4247724879, 1208.4885153599507 348786.53117300424, 1207.87340008324 348786.5621831626, 1207.2591388632327 348786.51733244176, 1197.82154469863 348785.24012156209, 1182.7580779950388 348784.44692800666, 1167.8135084950427 348790.11985433963)", shiftLine.ToString());

            line = gf.CreateLineString(tropfenCoords);
            Console.WriteLine(line);
            shiftLine = GeometryUtils.createOffsetLineNew(gf, line, left);
            Console.WriteLine(shiftLine);
            Assert.AreEqual("LINESTRING (4979.4051092001846 347171.98789939389, 4989.9174038712063 347190.31371136784, 4998.8044488482492 347215.71860837797, 4992.6703578939487 347228.35195369471, 4980.44546738348 347233.38503814081, 4974.2442164897911 347231.20491087349, 4969.6676138377288 347229.59856687853, 4966.5966568929143 347228.52069066523, 4960.7238115142018 347220.23002281, 4961.7506942896052 347209.96097352222, 4974.8480339059342 347196.86363390589, 4981.8011339059285 347189.91053390596, 4982.1924509639675 347189.47013190459, 4982.529250299348 347188.98675920116, 4982.8068560196116 347188.4671266129, 4983.0214140361295 347187.91844836448, 4988.4980140361295 347171.04344836448)", shiftLine.ToString());
            shiftLine = GeometryUtils.createOffsetLineNew(gf, line, right);
            Console.WriteLine(shiftLine);
            Assert.AreEqual("LINESTRING (4988.0792907998148 347167.01210060611, 4998.8214907998154 347185.7387006061, 4999.2039621689873 347186.575620614, 5008.9304621689926 347214.380220614, 5009.106113907701 347215.01292656042, 5009.1973388030656 347215.6631944793, 5009.2025635162918 347216.31980932096, 5009.1216979377232 347216.97144657135, 5008.9561367409451 347217.60686756409, 5008.70873532911 347218.21511331154, 5000.83373532911 347234.43391331151, 5000.5362371530155 347234.96240996185, 5000.1769412856775 347235.45100013149, 4999.7611338872948 347235.89249541075, 4999.2949325470709 347236.28040027607, 4998.78519627785 347236.60900765582, 4998.23942460251 347236.87348289578, 4982.48942460251 347243.3578828958, 4981.9153212116616 347243.55442481756, 4981.3216368592512 347243.67997289647, 4980.7171158848332 347243.73267794261, 4980.1106622398856 347243.71176366677, 4979.51120834207 347243.617538114, 4978.9275835102089 347243.45138912654, 4970.9287847457854 347240.63931143592, 4966.3557861622712 347239.03423312149, 4961.7815861622712 347237.42873312149, 4961.2135459480151 347237.18907243689, 4960.6793193475287 347236.88132437749, 4960.1870288901118 347236.51016803, 4959.7441594963166 347236.0812465584, 4959.3574446751618 347235.60108140367, 4951.4824446751618 347224.48398140364, 4951.1117516838258 347223.87214137608, 4950.8321675602219 347223.21366265131, 4950.6494155201008 347222.52202459209, 4950.5672365818864 347221.811385348, 4950.587312986293 347221.09629203158, 4951.9779129862927 347207.18999203161, 4952.09264682466 347206.51447189704, 4952.2986582833664 347205.8609808223, 4952.5920785388571 347205.24179114256, 4952.967397260777 347204.6685310246, 4953.4175660940655 347204.1519660941, 4967.7769660940712 347189.792566094, 4973.8806160378654 347183.68891615025, 4978.98638596387 347167.95655163552)", shiftLine.ToString());

            line = gf.CreateLineString(simpleline);
            Console.WriteLine(line);
            shiftLine = GeometryUtils.createOffsetLineNew(gf, line, left);
            Console.WriteLine(shiftLine);
            Assert.AreEqual("LINESTRING (4999 348010, 5000 348010)", shiftLine.ToString());
            shiftLine = GeometryUtils.createOffsetLineNew(gf, line, right);
            Console.WriteLine(shiftLine);
            Assert.AreEqual("LINESTRING (4999 348000, 5000 348000)", shiftLine.ToString());


            line = gf.CreateLineString(smallSegment);
            Console.WriteLine(line);
            shiftLine = GeometryUtils.createOffsetLineNew(gf, line, left);
            Console.WriteLine(shiftLine);
            Assert.AreEqual("LINESTRING (527827.12435767753 151995.51324882277, 527795.20248809154 152032.59916010578, 527795.19711029367 152032.60541831353, 527794.84769705264 152033.01271410252)", shiftLine.ToString());
            shiftLine = GeometryUtils.createOffsetLineNew(gf, line, right);
            Console.WriteLine(shiftLine);
            Assert.AreEqual("LINESTRING (527834.70338149439 152002.03692861123, 527802.78420341434 152039.11971297994, 527802.43747646525 152039.52387747547)", shiftLine.ToString());

            line = gf.CreateLineString(microsegment);
            Console.WriteLine(line);
            shiftLine = GeometryUtils.createOffsetLineNew(gf, line, left);
            Console.WriteLine(shiftLine);
            Assert.IsNull(shiftLine);
            shiftLine = GeometryUtils.createOffsetLineNew(gf, line, right);
            Console.WriteLine(shiftLine);
            Assert.IsNull(shiftLine);

            line = gf.CreateLineString(metersegment);
            Console.WriteLine(line);
            shiftLine = GeometryUtils.createOffsetLineNew(gf, line, left);
            //{LINESTRING (0 0, 0 1)}
            Console.WriteLine(shiftLine);
            Assert.AreEqual("LINESTRING (-5 0, -5 1)", shiftLine.ToString());
            shiftLine = GeometryUtils.createOffsetLineNew(gf, line, right);
            Console.WriteLine(shiftLine);
            Assert.AreEqual("LINESTRING (5 0, 5 1)", shiftLine.ToString());


        }
    }
}
