<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NHibernate.Spatial</name>
    </assembly>
    <members>
        <member name="T:NHibernate.Spatial.Criterion.SpatialProjections">
            <summary>
            Factory class for NHibernate query projections
            </summary>
            <remarks>
            In the GIS context, this class name could be misleading,
            but it has nothing to do with cartographic planar projections.
            </remarks>
            <summary>
            Factory class for NHibernate query projections
            </summary>
            <remarks>
            In the GIS context, this class name could be misleading,
            but it has nothing to do with cartographic planar projections.
            </remarks>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialProjections.Collect``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Aggregates collection of the specified property.
            </summary>
            <param name="expression">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialProjections.Envelope``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Aggregates envelope of the specified property.
            </summary>
            <param name="expression">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialProjections.Intersection``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Aggregates intersection of the specified property.
            </summary>
            <param name="expression">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialProjections.Union``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Aggregates union of the specified property.
            </summary>
            <param name="expression">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialProjections.Buffer``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Double)">
            <summary>
            Buffers the specified property.
            </summary>
            <param name="expression">Name of the property.</param>
            <param name="distance">Name of another property.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialProjections.ConvexHull``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            ConvexHull for the specified property.
            </summary>
            <param name="expression">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialProjections.Difference``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Difference of the specified properties.
            </summary>
            <param name="expression">Name of the property.</param>
            <param name="anotherExpression">Name of another property.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialProjections.Distance``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Distance of the specified properties.
            </summary>
            <param name="expression">Name of the property.</param>
            <param name="anotherExpression">Name of another property.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialProjections.Intersection``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Intersection of the specified properties.
            </summary>
            <param name="expression">Name of the property.</param>
            <param name="anotherExpression">Name of another property.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialProjections.SymDifference``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Symmetric difference of the specified properties.
            </summary>
            <param name="expression">Name of the property.</param>
            <param name="anotherExpression">Name of another property.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialProjections.Union``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Union of the specified properties.
            </summary>
            <param name="expression">Name of the property.</param>
            <param name="anotherExpression">Name of another property.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialProjections.Contains``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Determines whether the specified geometry property contains another geometry property.
            </summary>
            <param name="expression">Name of the property.</param>
            <param name="anotherExpression">Name of another property.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialProjections.CoveredBy``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Determines whether the specified geometry property is covered by another geometry property.
            </summary>
            <param name="expression">Name of the property.</param>
            <param name="anotherExpression">Name of another property.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialProjections.Covers``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Determines whether the specified geometry property covers another geometry property.
            </summary>
            <param name="expression">Name of the property.</param>
            <param name="anotherExpression">Name of another property.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialProjections.Crosses``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Determines whether the specified geometry property crosses another geometry property.
            </summary>
            <param name="expression">Name of the property.</param>
            <param name="anotherExpression">Name of another property.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialProjections.Disjoint``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Determines whether the specified geometry property is disjoint with another geometry property.
            </summary>
            <param name="expression">Name of the property.</param>
            <param name="anotherExpression">Name of another property.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialProjections.Equals``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Determines whether the specified geometry property equals to another geometry property.
            </summary>
            <param name="expression">Name of the property.</param>
            <param name="anotherExpression">Name of another property.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialProjections.Intersects``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Determines whether the specified geometry property intersects another geometry property.
            </summary>
            <param name="expression">Name of the property.</param>
            <param name="anotherExpression">Name of another property.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialProjections.Overlaps``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Determines whether the specified geometry property overlaps another geometry property.
            </summary>
            <param name="expression">Name of the property.</param>
            <param name="anotherExpression">Name of another property.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialProjections.Touches``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Determines whether the specified geometry property touches another geometry property.
            </summary>
            <param name="expression">Name of the property.</param>
            <param name="anotherExpression">Name of another property.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialProjections.Within``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Determines whether the specified geometry property is within another geometry property.
            </summary>
            <param name="expression">Name of the property.</param>
            <param name="anotherExpression">Name of another property.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialProjections.Relate``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Determines whether the specified geometry property relates to another geometry property.
            </summary>
            <param name="expression">Name of the property.</param>
            <param name="anotherExpression">Name of another property.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialProjections.Relate``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            Determines whether the specified geometry property relates to another geometry property.
            </summary>
            <param name="expression">Name of the property.</param>
            <param name="anotherExpression">Name of another property.</param>
            <param name="pattern">The pattern.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialProjections.IsClosed``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Determines whether the specified geometry property is closed.
            </summary>
            <param name="expression">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialProjections.IsEmpty``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Determines whether the specified geometry property is empty.
            </summary>
            <param name="expression">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialProjections.IsRing``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Determines whether the specified geometry property is ring.
            </summary>
            <param name="expression">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialProjections.IsSimple``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Determines whether the specified geometry property is simple.
            </summary>
            <param name="expression">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialProjections.IsValid``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Determines whether the specified geometry property is valid.
            </summary>
            <param name="expression">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialProjections.Transform``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Int32)">
            <summary>
            Transforms the coordinate reference system of the specified geometry property.
            </summary>
            <param name="expression">Name of the property.</param>
            <param name="srid">The srid.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialProjections.Collect(System.String)">
            <summary>
            Aggregates collection of the specified property name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialProjections.Envelope(System.String)">
            <summary>
            Aggregates envelope of the specified property name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialProjections.Intersection(System.String)">
            <summary>
            Aggregates intersection of the specified property name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialProjections.Union(System.String)">
            <summary>
            Aggregates union of the specified property name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialProjections.Buffer(System.String,System.Double)">
            <summary>
            Buffers the specified property name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="distance">Name of another property.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialProjections.ConvexHull(System.String)">
            <summary>
            ConvexHull for the specified property name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialProjections.Difference(System.String,System.String)">
            <summary>
            Difference of the specified property names.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="anotherPropertyName">Name of another property.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialProjections.Distance(System.String,System.String)">
            <summary>
            Distance of the specified property names.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="anotherPropertyName">Name of another property.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialProjections.Distance(System.String,NetTopologySuite.Geometries.Geometry)">
            <summary>
            Distance of the specified property names.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="geometry">target geometry.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialProjections.Intersection(System.String,System.String)">
            <summary>
            Intersection of the specified property names.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="anotherPropertyName">Name of another property.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialProjections.SymDifference(System.String,System.String)">
            <summary>
            Symmetric difference of the specified property names.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="anotherPropertyName">Name of another property.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialProjections.Union(System.String,System.String)">
            <summary>
            Union of the specified property names.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="anotherPropertyName">Name of another property.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialProjections.Contains(System.String,System.String)">
            <summary>
            Determines whether the specified geometry property contains another geometry property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="anotherPropertyName">Name of another property.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialProjections.CoveredBy(System.String,System.String)">
            <summary>
            Determines whether the specified geometry property is covered by another geometry property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="anotherPropertyName">Name of another property.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialProjections.Covers(System.String,System.String)">
            <summary>
            Determines whether the specified geometry property covers another geometry property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="anotherPropertyName">Name of another property.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialProjections.Crosses(System.String,System.String)">
            <summary>
            Determines whether the specified geometry property crosses another geometry property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="anotherPropertyName">Name of another property.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialProjections.Disjoint(System.String,System.String)">
            <summary>
            Determines whether the specified geometry property is disjoint with another geometry property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="anotherPropertyName">Name of another property.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialProjections.Equals(System.String,System.String)">
            <summary>
            Determines whether the specified geometry property equals to another geometry property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="anotherPropertyName">Name of another property.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialProjections.Intersects(System.String,System.String)">
            <summary>
            Determines whether the specified geometry property intersects another geometry property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="anotherPropertyName">Name of another property.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialProjections.Overlaps(System.String,System.String)">
            <summary>
            Determines whether the specified geometry property overlaps another geometry property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="anotherPropertyName">Name of another property.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialProjections.Touches(System.String,System.String)">
            <summary>
            Determines whether the specified geometry property touches another geometry property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="anotherPropertyName">Name of another property.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialProjections.Within(System.String,System.String)">
            <summary>
            Determines whether the specified geometry property is within another geometry property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="anotherPropertyName">Name of another property.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialProjections.Relate(System.String,System.String)">
            <summary>
            Determines whether the specified geometry property relates to another geometry property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="anotherPropertyName">Name of another property.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialProjections.Relate(System.String,System.String,System.String)">
            <summary>
            Determines whether the specified geometry property relates to another geometry property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="anotherPropertyName">Name of another property.</param>
            <param name="pattern">The pattern.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialProjections.IsClosed(System.String)">
            <summary>
            Determines whether the specified geometry property is closed.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialProjections.IsEmpty(System.String)">
            <summary>
            Determines whether the specified geometry property is empty.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialProjections.IsRing(System.String)">
            <summary>
            Determines whether the specified geometry property is ring.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialProjections.IsSimple(System.String)">
            <summary>
            Determines whether the specified geometry property is simple.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialProjections.IsValid(System.String)">
            <summary>
            Determines whether the specified geometry property is valid.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialProjections.Transform(System.String,System.Int32)">
            <summary>
            Transforms the coordinate reference system of the specified geometry property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="srid">The srid.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.Lambda.LambdaSpatialRestrictionBuilder.#ctor(System.String)">
            <summary>
            Constructed with property name
            </summary>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.Lambda.LambdaSpatialRestrictionBuilder.Filter(GeoAPI.Geometries.IGeometry)">
            <summary>
            Apply a "filter" constraint to the named property
            </summary>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.Lambda.LambdaSpatialRestrictionBuilder.Filter(GeoAPI.Geometries.Envelope,System.Int32)">
            <summary>
            Apply a "filter" constraint to the named property
            </summary>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.Lambda.LambdaSpatialRestrictionBuilder.Contains(System.Object)">
            <summary>
            Apply a "contains" constraint to the named property
            </summary>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.Lambda.LambdaSpatialRestrictionBuilder.CoveredBy(System.Object)">
            <summary>
            Apply a "covered by" constraint to the named property
            </summary>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.Lambda.LambdaSpatialRestrictionBuilder.Covers(System.Object)">
            <summary>
            Apply a "covers" constraint to the named property
            </summary>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.Lambda.LambdaSpatialRestrictionBuilder.Crosses(System.Object)">
            <summary>
            Apply a "crosses" constraint to the named property
            </summary>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.Lambda.LambdaSpatialRestrictionBuilder.Disjoint(System.Object)">
            <summary>
            Apply a "disjoint" constraint to the named property
            </summary>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.Lambda.LambdaSpatialRestrictionBuilder.Eq(System.Object)">
            <summary>
            Apply a "eq" constraint to the named property
            </summary>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.Lambda.LambdaSpatialRestrictionBuilder.EqExact(System.Object,System.Double)">
            <summary>
            Apply a "eq exact" constraint to the named property
            </summary>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.Lambda.LambdaSpatialRestrictionBuilder.Intersects(System.Object)">
            <summary>
            Apply a "intersects" constraint to the named property
            </summary>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.Lambda.LambdaSpatialRestrictionBuilder.Overlaps(System.Object)">
            <summary>
            Apply a "overlaps" constraint to the named property
            </summary>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.Lambda.LambdaSpatialRestrictionBuilder.Relate(System.Object,System.String)">
            <summary>
            Apply a "relate" constraint to the named property
            </summary>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.Lambda.LambdaSpatialRestrictionBuilder.Touches(System.Object)">
            <summary>
            Apply a "touches" constraint to the named property
            </summary>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.Lambda.LambdaSpatialRestrictionBuilder.Within(System.Object)">
            <summary>
            Apply a "within" constraint to the named property
            </summary>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.Lambda.LambdaSpatialRestrictionBuilder.IsWithinDistance(System.Object,System.Double)">
            <summary>
            Apply a "is Within distance" constraint to the named property
            </summary>
        </member>
        <member name="P:NHibernate.Spatial.Criterion.Lambda.LambdaSpatialRestrictionBuilder.IsClosed">
            <summary>
            Apply an "is closed" constraint to the named property
            </summary>
        </member>
        <member name="P:NHibernate.Spatial.Criterion.Lambda.LambdaSpatialRestrictionBuilder.IsEmpty">
            <summary>
            Apply an "is empty" constraint to the named property
            </summary>
        </member>
        <member name="P:NHibernate.Spatial.Criterion.Lambda.LambdaSpatialRestrictionBuilder.IsRing">
            <summary>
            Apply an "is ring" constraint to the named property
            </summary>
        </member>
        <member name="P:NHibernate.Spatial.Criterion.Lambda.LambdaSpatialRestrictionBuilder.IsSimple">
            <summary>
            Apply an "is simple" constraint to the named property
            </summary>
        </member>
        <member name="P:NHibernate.Spatial.Criterion.Lambda.LambdaSpatialRestrictionBuilder.IsValid">
            <summary>
            Apply an "is valid" constraint to the named property
            </summary>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.Lambda.QueryOverSpatialRestrictionBuilderBase`3.#ctor(`0,System.String)">
            <summary>
            Constructed with property name
            </summary>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.Lambda.QueryOverSpatialRestrictionBuilderBase`3.Filter(GeoAPI.Geometries.IGeometry)">
            <summary>
            Apply a "filter" constraint to the named property
            </summary>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.Lambda.QueryOverSpatialRestrictionBuilderBase`3.Filter(GeoAPI.Geometries.Envelope,System.Int32)">
            <summary>
            Apply a "filter" constraint to the named property
            </summary>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.Lambda.QueryOverSpatialRestrictionBuilderBase`3.Contains(System.Object)">
            <summary>
            Apply a "contains" constraint to the named property
            </summary>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.Lambda.QueryOverSpatialRestrictionBuilderBase`3.CoveredBy(System.Object)">
            <summary>
            Apply a "covered by" constraint to the named property
            </summary>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.Lambda.QueryOverSpatialRestrictionBuilderBase`3.Covers(System.Object)">
            <summary>
            Apply a "covers" constraint to the named property
            </summary>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.Lambda.QueryOverSpatialRestrictionBuilderBase`3.Crosses(System.Object)">
            <summary>
            Apply a "crosses" constraint to the named property
            </summary>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.Lambda.QueryOverSpatialRestrictionBuilderBase`3.Disjoint(System.Object)">
            <summary>
            Apply a "disjoint" constraint to the named property
            </summary>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.Lambda.QueryOverSpatialRestrictionBuilderBase`3.Eq(System.Object)">
            <summary>
            Apply a "eq" constraint to the named property
            </summary>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.Lambda.QueryOverSpatialRestrictionBuilderBase`3.EqExact(System.Object,System.Double)">
            <summary>
            Apply a "eq exact" constraint to the named property
            </summary>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.Lambda.QueryOverSpatialRestrictionBuilderBase`3.Intersects(System.Object)">
            <summary>
            Apply a "intersects" constraint to the named property
            </summary>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.Lambda.QueryOverSpatialRestrictionBuilderBase`3.Overlaps(System.Object)">
            <summary>
            Apply a "overlaps" constraint to the named property
            </summary>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.Lambda.QueryOverSpatialRestrictionBuilderBase`3.Relate(System.Object,System.String)">
            <summary>
            Apply a "relate" constraint to the named property
            </summary>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.Lambda.QueryOverSpatialRestrictionBuilderBase`3.Touches(System.Object)">
            <summary>
            Apply a "touches" constraint to the named property
            </summary>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.Lambda.QueryOverSpatialRestrictionBuilderBase`3.Within(System.Object)">
            <summary>
            Apply a "within" constraint to the named property
            </summary>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.Lambda.QueryOverSpatialRestrictionBuilderBase`3.IsWithinDistance(System.Object,System.Double)">
            <summary>
            Apply a "is Within distance" constraint to the named property
            </summary>
        </member>
        <member name="P:NHibernate.Spatial.Criterion.Lambda.QueryOverSpatialRestrictionBuilderBase`3.IsClosed">
            <summary>
            Apply an "is closed" constraint to the named property
            </summary>
        </member>
        <member name="P:NHibernate.Spatial.Criterion.Lambda.QueryOverSpatialRestrictionBuilderBase`3.IsEmpty">
            <summary>
            Apply an "is empty" constraint to the named property
            </summary>
        </member>
        <member name="P:NHibernate.Spatial.Criterion.Lambda.QueryOverSpatialRestrictionBuilderBase`3.IsRing">
            <summary>
            Apply an "is ring" constraint to the named property
            </summary>
        </member>
        <member name="P:NHibernate.Spatial.Criterion.Lambda.QueryOverSpatialRestrictionBuilderBase`3.IsSimple">
            <summary>
            Apply an "is simple" constraint to the named property
            </summary>
        </member>
        <member name="P:NHibernate.Spatial.Criterion.Lambda.QueryOverSpatialRestrictionBuilderBase`3.IsValid">
            <summary>
            Apply an "is valid" constraint to the named property
            </summary>
        </member>
        <member name="T:NHibernate.Spatial.Dialect.Function.ConstantValueFunction">
             <summary>
             A function that renders a value, without needing arguments
             nor empty parentheses, as if were rather a constant identifier.
            
             This is useful to register symbols whose literal value differs
             among dialects (eg. TRUE and FALSE literal values)
             </summary>
        </member>
        <member name="T:NHibernate.Spatial.Dialect.Function.SpatialAnalysisFunction">
             <summary>
            
             </summary>
        </member>
        <member name="T:NHibernate.Spatial.Dialect.Function.SpatialStandardSafeFunction">
             <summary>
            
             </summary>
        </member>
        <member name="T:NHibernate.Spatial.Dialect.Function.SpatialStandardFunction">
             <summary>
            
             </summary>
        </member>
        <member name="M:NHibernate.Spatial.Dialect.Function.SpatialStandardFunction.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NHibernate.Spatial.Dialect.Function.SpatialStandardFunction"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:NHibernate.Spatial.Dialect.Function.SpatialStandardFunction.#ctor(System.String,NHibernate.Type.IType)">
            <summary>
            Initializes a new instance of the <see cref="T:NHibernate.Spatial.Dialect.Function.SpatialStandardFunction"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="typeValue">The type value.</param>
        </member>
        <member name="M:NHibernate.Spatial.Dialect.Function.SpatialStandardFunction.Render(System.Collections.IList,NHibernate.Engine.ISessionFactoryImplementor)">
            <summary>
            Render the function call as SQL.
            </summary>
            <param name="args">List of arguments</param>
            <param name="factory"></param>
            <returns>SQL fragment for the function.</returns>
        </member>
        <member name="M:NHibernate.Spatial.Dialect.Function.SpatialStandardFunction.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:NHibernate.Spatial.Dialect.Function.SpatialStandardFunction.HasArguments">
            <summary>
            Does this function have any arguments?
            </summary>
            <value></value>
        </member>
        <member name="P:NHibernate.Spatial.Dialect.Function.SpatialStandardFunction.HasParenthesesIfNoArguments">
            <summary>
            If there are no arguments, are parens required?
            </summary>
            <value></value>
        </member>
        <member name="M:NHibernate.Spatial.Dialect.Function.SpatialStandardSafeFunction.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NHibernate.Spatial.Dialect.Function.SpatialStandardSafeFunction"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:NHibernate.Spatial.Dialect.Function.SpatialStandardSafeFunction.#ctor(System.String,NHibernate.Type.IType)">
            <summary>
            Initializes a new instance of the <see cref="T:NHibernate.Spatial.Dialect.Function.SpatialStandardSafeFunction"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="typeValue">The type value.</param>
        </member>
        <member name="M:NHibernate.Spatial.Dialect.Function.SpatialStandardSafeFunction.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NHibernate.Spatial.Dialect.Function.SpatialStandardSafeFunction"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="_allowedArgsCount">The allowed args count.</param>
        </member>
        <member name="M:NHibernate.Spatial.Dialect.Function.SpatialStandardSafeFunction.#ctor(System.String,NHibernate.Type.IType,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NHibernate.Spatial.Dialect.Function.SpatialStandardSafeFunction"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="typeValue">The type value.</param>
            <param name="_allowedArgsCount">The allowed args count.</param>
        </member>
        <member name="M:NHibernate.Spatial.Dialect.Function.SpatialStandardSafeFunction.Render(System.Collections.IList,NHibernate.Engine.ISessionFactoryImplementor)">
            <summary>
            Render the function call as SQL.
            </summary>
            <param name="args">List of arguments</param>
            <param name="factory"></param>
            <returns>SQL fragment for the function.</returns>
        </member>
        <member name="M:NHibernate.Spatial.Dialect.Function.SpatialStandardSafeFunction.ValidateArgsCount(System.Collections.IList)">
            <summary>
            Validates the arguments count.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:NHibernate.Spatial.Dialect.Function.SpatialStandardSafeFunction.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:NHibernate.Spatial.Dialect.Function.SpatialStandardSafeFunction.AllowedArgsCount">
            <summary>
            Gets the allowed arguments count.
            </summary>
            <value>The allowed arguments count.</value>
        </member>
        <member name="M:NHibernate.Spatial.Dialect.Function.SpatialAnalysisFunction.#ctor(NHibernate.Spatial.Dialect.ISpatialDialect,NHibernate.Spatial.SpatialAnalysis)">
            <summary>
            Initializes a new instance of the <see cref="T:NHibernate.Spatial.Dialect.Function.SpatialAnalysisFunction"/> class.
            </summary>
            <param name="spatialDialect">The spatial dialect.</param>
            <param name="analysis">The analysis.</param>
        </member>
        <member name="M:NHibernate.Spatial.Dialect.Function.SpatialAnalysisFunction.Render(System.Collections.IList,NHibernate.Engine.ISessionFactoryImplementor)">
            <summary>
            Render the function call as SQL.
            </summary>
            <param name="args">List of arguments</param>
            <param name="factory"></param>
            <returns>SQL fragment for the function.</returns>
        </member>
        <member name="M:NHibernate.Spatial.Dialect.Function.SpatialPropertyFunction.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NHibernate.Spatial.Dialect.Function.SpatialPropertyFunction"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:NHibernate.Spatial.Dialect.Function.SpatialPropertyFunction.#ctor(System.String,NHibernate.Type.IType)">
            <summary>
            Initializes a new instance of the <see cref="T:NHibernate.Spatial.Dialect.Function.SpatialPropertyFunction"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="typeValue">The type value.</param>
        </member>
        <member name="M:NHibernate.Spatial.Dialect.Function.SpatialPropertyFunction.Render(System.Collections.IList,NHibernate.Engine.ISessionFactoryImplementor)">
            <summary>
            Render the function call as SQL.
            </summary>
            <param name="args">List of arguments</param>
            <param name="factory"></param>
            <returns>SQL fragment for the function.</returns>
        </member>
        <member name="T:NHibernate.Spatial.Dialect.Function.SpatialRelationFunction">
             <summary>
            
             </summary>
        </member>
        <member name="M:NHibernate.Spatial.Dialect.Function.SpatialRelationFunction.#ctor(NHibernate.Spatial.Dialect.ISpatialDialect,NHibernate.Spatial.SpatialRelation)">
            <summary>
            Initializes a new instance of the <see cref="T:NHibernate.Spatial.Dialect.Function.SpatialRelationFunction"/> class.
            </summary>
            <param name="spatialDialect">The spatial dialect.</param>
            <param name="relation">The relation.</param>
        </member>
        <member name="M:NHibernate.Spatial.Dialect.Function.SpatialRelationFunction.Render(System.Collections.IList,NHibernate.Engine.ISessionFactoryImplementor)">
            <summary>
            Render the function call as SQL.
            </summary>
            <param name="args">List of arguments</param>
            <param name="factory"></param>
            <returns>SQL fragment for the function.</returns>
        </member>
        <member name="M:NHibernate.Spatial.Dialect.Function.SpatialMethodFunction.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NHibernate.Spatial.Dialect.Function.SpatialMethodFunction"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:NHibernate.Spatial.Dialect.Function.SpatialMethodFunction.#ctor(System.String,NHibernate.Type.IType)">
            <summary>
            Initializes a new instance of the <see cref="T:NHibernate.Spatial.Dialect.Function.SpatialMethodFunction"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="typeValue">The type value.</param>
        </member>
        <member name="M:NHibernate.Spatial.Dialect.Function.SpatialMethodFunction.Render(System.Collections.IList,NHibernate.Engine.ISessionFactoryImplementor)">
            <summary>
            Render the function call as SQL.
            </summary>
            <param name="args">List of arguments</param>
            <param name="factory"></param>
            <returns>SQL fragment for the function.</returns>
        </member>
        <member name="T:NHibernate.Spatial.Dialect.Function.SpatialMethodSafeFunction">
             <summary>
            
             </summary>
        </member>
        <member name="M:NHibernate.Spatial.Dialect.Function.SpatialMethodSafeFunction.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NHibernate.Spatial.Dialect.Function.SpatialStandardSafeFunction"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:NHibernate.Spatial.Dialect.Function.SpatialMethodSafeFunction.#ctor(System.String,NHibernate.Type.IType)">
            <summary>
            Initializes a new instance of the <see cref="T:NHibernate.Spatial.Dialect.Function.SpatialStandardSafeFunction"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="typeValue">The type value.</param>
        </member>
        <member name="M:NHibernate.Spatial.Dialect.Function.SpatialMethodSafeFunction.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NHibernate.Spatial.Dialect.Function.SpatialStandardSafeFunction"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="_allowedArgsCount">The allowed args count.</param>
        </member>
        <member name="M:NHibernate.Spatial.Dialect.Function.SpatialMethodSafeFunction.#ctor(System.String,NHibernate.Type.IType,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NHibernate.Spatial.Dialect.Function.SpatialStandardSafeFunction"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="typeValue">The type value.</param>
            <param name="allowedArgsCount">The allowed args count.</param>
        </member>
        <member name="M:NHibernate.Spatial.Dialect.Function.SpatialMethodSafeFunction.Render(System.Collections.IList,NHibernate.Engine.ISessionFactoryImplementor)">
            <summary>
            Render the function call as SQL.
            </summary>
            <param name="args">List of arguments</param>
            <param name="factory"></param>
            <returns>SQL fragment for the function.</returns>
        </member>
        <member name="M:NHibernate.Spatial.Dialect.Function.SpatialMethodSafeFunction.ValidateArgsCount(System.Collections.IList)">
            <summary>
            Validates the arguments count.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:NHibernate.Spatial.Dialect.Function.SpatialMethodSafeFunction.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:NHibernate.Spatial.Dialect.Function.SpatialMethodSafeFunction.AllowedArgsCount">
            <summary>
            Gets the allowed arguments count.
            </summary>
            <value>The allowed arguments count.</value>
        </member>
        <member name="T:NHibernate.Spatial.Dialect.Function.SpatialValidationFunction">
             <summary>
            
             </summary>
        </member>
        <member name="M:NHibernate.Spatial.Dialect.Function.SpatialValidationFunction.#ctor(NHibernate.Spatial.Dialect.ISpatialDialect,NHibernate.Spatial.SpatialValidation)">
            <summary>
            Initializes a new instance of the <see cref="T:NHibernate.Spatial.Dialect.Function.SpatialValidationFunction"/> class.
            </summary>
            <param name="spatialDialect">The spatial dialect.</param>
            <param name="validation">The validation.</param>
        </member>
        <member name="M:NHibernate.Spatial.Dialect.Function.SpatialValidationFunction.Render(System.Collections.IList,NHibernate.Engine.ISessionFactoryImplementor)">
            <summary>
            Render the function call as SQL.
            </summary>
            <param name="args">List of arguments</param>
            <param name="factory"></param>
            <returns>SQL fragment for the function.</returns>
        </member>
        <member name="T:NHibernate.Spatial.Criterion.SpatialRelateProjection">
             <summary>
            
             </summary>
        </member>
        <member name="T:NHibernate.Spatial.Criterion.SpatialProjection">
            <summary>
            NHibernate query projection for spatial functions.
            </summary>
            <remarks>
            This class name could be misleading, it has nothing to do
            with cartographic planar projections
            </remarks>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialProjection.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NHibernate.Spatial.Criterion.SpatialProjection"/> class.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialProjection.GetTypes(NHibernate.ICriteria,NHibernate.Criterion.ICriteriaQuery)">
            <summary>
            Gets the types.
            </summary>
            <param name="criteria">The criteria.</param>
            <param name="criteriaQuery">The criteria query.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialProjection.ToSqlString(NHibernate.ICriteria,System.Int32,NHibernate.Criterion.ICriteriaQuery,System.Collections.Generic.IDictionary{System.String,NHibernate.IFilter})">
            <summary>
            Render the SQL Fragment.
            </summary>
            <param name="criteria"></param>
            <param name="position"></param>
            <param name="criteriaQuery"></param>
            <param name="enabledFilters"></param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialProjection.ToSqlString(System.String,NHibernate.Spatial.Dialect.ISpatialDialect)">
            <summary>
            Render the SQL Fragment.
            </summary>
            <param name="column">The column.</param>
            <param name="spatialDialect">The spatial dialect.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialRelateProjection.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NHibernate.Spatial.Criterion.SpatialRelateProjection"/> class.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="anotherPropertyName">Name of another property.</param>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialRelateProjection.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NHibernate.Spatial.Criterion.SpatialRelateProjection"/> class.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="anotherPropertyName">Name of another property.</param>
            <param name="pattern">The pattern.</param>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialRelateProjection.GetTypes(NHibernate.ICriteria,NHibernate.Criterion.ICriteriaQuery)">
            <summary>
            Gets the types.
            </summary>
            <param name="criteria">The criteria.</param>
            <param name="criteriaQuery">The criteria query.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialRelateProjection.ToSqlString(NHibernate.ICriteria,System.Int32,NHibernate.Criterion.ICriteriaQuery,System.Collections.Generic.IDictionary{System.String,NHibernate.IFilter})">
            <summary>
            Render the SQL Fragment.
            </summary>
            <param name="criteria"></param>
            <param name="position"></param>
            <param name="criteriaQuery"></param>
            <param name="enabledFilters"></param>
            <returns></returns>
        </member>
        <member name="T:NHibernate.Spatial.Criterion.SpatialRelationProjection">
             <summary>
            
             </summary>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialRelationProjection.#ctor(System.String,NHibernate.Spatial.SpatialRelation,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NHibernate.Spatial.Criterion.SpatialRelationProjection"/> class.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="relation">The relation.</param>
            <param name="anotherPropertyName">Name of another property.</param>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialRelationProjection.GetTypes(NHibernate.ICriteria,NHibernate.Criterion.ICriteriaQuery)">
            <summary>
            Gets the types.
            </summary>
            <param name="criteria">The criteria.</param>
            <param name="criteriaQuery">The criteria query.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialRelationProjection.ToSqlString(NHibernate.ICriteria,System.Int32,NHibernate.Criterion.ICriteriaQuery,System.Collections.Generic.IDictionary{System.String,NHibernate.IFilter})">
            <summary>
            Render the SQL Fragment.
            </summary>
            <param name="criteria"></param>
            <param name="position"></param>
            <param name="criteriaQuery"></param>
            <param name="enabledFilters"></param>
            <returns></returns>
        </member>
        <member name="T:NHibernate.Spatial.Criterion.SpatialValidationProjection">
             <summary>
            
             </summary>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialValidationProjection.#ctor(System.String,NHibernate.Spatial.SpatialValidation)">
            <summary>
            Initializes a new instance of the <see cref="T:NHibernate.Spatial.Criterion.SpatialValidationProjection"/> class.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="validation">The validation.</param>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialValidationProjection.GetTypes(NHibernate.ICriteria,NHibernate.Criterion.ICriteriaQuery)">
            <summary>
            Gets the types.
            </summary>
            <param name="criteria">The criteria.</param>
            <param name="criteriaQuery">The criteria query.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialValidationProjection.ToSqlString(NHibernate.ICriteria,System.Int32,NHibernate.Criterion.ICriteriaQuery,System.Collections.Generic.IDictionary{System.String,NHibernate.IFilter})">
            <summary>
            Render the SQL Fragment.
            </summary>
            <param name="criteria"></param>
            <param name="position"></param>
            <param name="criteriaQuery"></param>
            <param name="enabledFilters"></param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Linq.SpatialLinqExtensions.IsNull(GeoAPI.Geometries.IGeometry)">
            <summary>
            A fully compatible null checking. Use instead of " == null " expression.
            </summary>
            <remarks>
            <para>
            Using an equality to null lambda expression throws an exception in SQL Server
            ("Invalid operator for data type. Operator equals equal to, type equals geometry.")
            because NHibernate is generating an HQL expression like this:
            </para>
            <code>
                (t.geom is null) and (null is null) or t.geom = null
            </code>
            <para>
            Using this extension method, we generate just the following HQL:
            </para>
            <code>
                t.geom is null
            </code>
            </remarks>
            <param name="geometry"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:NHibernate.Spatial.Mapping.SpatialAuxiliaryDatabaseObject" -->
        <member name="M:NHibernate.Spatial.Mapping.SpatialAuxiliaryDatabaseObject.#ctor(NHibernate.Cfg.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:NHibernate.Spatial.Mapping.SpatialAuxiliaryDatabaseObject"/> class.
            </summary>
            <param name="configuration">The configuration.</param>
            <remarks>
            To programmatically configure the auxiliary object, we follow
            the advice of passing the configuration in the constructor given at:
            http://forum.hibernate.org/viewtopic.php?p=2320370#2320370
            However, this approach doesn't allow to configure it fully declaratively
            using the &lt;database-object&gt; element plus the option
            "hibernate.hbm2ddl.auto" set to "create" or "create-drop",
            Alternative solutions would be:
            1) Add a Configuration property to IMapping, or
            2) Add a Configuration parameter to IAuxiliaryDatabaseObject::SqlCreateString, or
            3) Add a SetConfiguration method to IAuxiliaryDatabaseObject.
            The same should apply to IAuxiliaryDatabaseObject::SqlDropString.
            </remarks>
        </member>
        <member name="M:NHibernate.Spatial.Mapping.SpatialAuxiliaryDatabaseObject.SqlCreateString(NHibernate.Dialect.Dialect,NHibernate.Engine.IMapping,System.String,System.String)">
            <summary>
            Creates SQL to create auxiliary database objects.
            </summary>
            <param name="dialect">The dialect.</param>
            <param name="mapping">The mapping.</param>
            <param name="defaultCatalog">The default catalog.</param>
            <param name="defaultSchema">The default schema.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Mapping.SpatialAuxiliaryDatabaseObject.SqlDropString(NHibernate.Dialect.Dialect,System.String,System.String)">
            <summary>
            Creates SQL to drop auxiliary database objects.
            </summary>
            <param name="dialect">The dialect.</param>
            <param name="defaultCatalog">The default catalog.</param>
            <param name="defaultSchema">The default schema.</param>
            <returns></returns>
        </member>
        <member name="T:NHibernate.Spatial.Metadata.GeometryColumn">
             <summary>
            
             </summary>
        </member>
        <member name="M:NHibernate.Spatial.Metadata.GeometryColumn.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:NHibernate.Spatial.Metadata.GeometryColumn.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:NHibernate.Spatial.Metadata.GeometryColumn.TableCatalog">
            <summary>
            Gets or sets the table catalog.
            </summary>
            <value>The table catalog.</value>
        </member>
        <member name="P:NHibernate.Spatial.Metadata.GeometryColumn.TableSchema">
            <summary>
            Gets or sets the table schema.
            </summary>
            <value>The table schema.</value>
        </member>
        <member name="P:NHibernate.Spatial.Metadata.GeometryColumn.TableName">
            <summary>
            Gets or sets the name of the table.
            </summary>
            <value>The name of the table.</value>
        </member>
        <member name="P:NHibernate.Spatial.Metadata.GeometryColumn.Name">
            <summary>
            Gets or sets the name of the geometry column.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:NHibernate.Spatial.Metadata.GeometryColumn.SRID">
            <summary>
            Gets or sets the SRID.
            </summary>
            <value>The SRID.</value>
        </member>
        <member name="P:NHibernate.Spatial.Metadata.GeometryColumn.Subtype">
            <summary>
            Gets or sets the geometry subtype.
            </summary>
            <value>The subtype.</value>
        </member>
        <member name="P:NHibernate.Spatial.Metadata.GeometryColumn.Dimension">
            <summary>
            Gets or sets the geometry dimension.
            </summary>
            <value>The dimension.</value>
        </member>
        <member name="T:NHibernate.Spatial.Metadata.MetadataClass">
             <summary>
            
             </summary>
        </member>
        <member name="F:NHibernate.Spatial.Metadata.MetadataClass.GeometryColumn">
             <summary>
            
             </summary>
        </member>
        <member name="F:NHibernate.Spatial.Metadata.MetadataClass.SpatialReferenceSystem">
             <summary>
            
             </summary>
        </member>
        <member name="M:NHibernate.Spatial.Metadata.Metadata.AddMapping(NHibernate.Cfg.Configuration,NHibernate.Spatial.Metadata.MetadataClass)">
            <summary>
            Add a spatial metadata class mapping to NHibernate configuration.
            </summary>
            <param name="configuration">The configuration.</param>
            <param name="clazz">The clazz.</param>
            <remarks>
            DO NOT add metadata class mappings when using the SchemaExport utility.
            You could lose all contents of those tables.
            </remarks>
        </member>
        <member name="M:NHibernate.Spatial.Metadata.Metadata.SupportsSpatialMetadata(NHibernate.ISession,NHibernate.Spatial.Metadata.MetadataClass)">
            <summary>
            Gets a value indicating whether the session supports spatial metadata.
            </summary>
            <value>
            	<c>true</c> if it supports spatial metadata; otherwise, <c>false</c>.
            </value>
            <param name="session">The session</param>
            <param name="metadataClass">The metadata class</param>
        </member>
        <member name="T:NHibernate.Spatial.Metadata.SpatialReferenceSystem">
             <summary>
            
             </summary>
        </member>
        <member name="M:NHibernate.Spatial.Metadata.SpatialReferenceSystem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NHibernate.Spatial.Metadata.SpatialReferenceSystem"/> class.
            </summary>
        </member>
        <member name="M:NHibernate.Spatial.Metadata.SpatialReferenceSystem.#ctor(System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NHibernate.Spatial.Metadata.SpatialReferenceSystem"/> class.
            </summary>
            <param name="srid">The SRID.</param>
            <param name="authorityName">Name of the authority.</param>
            <param name="authoritySRID">The authority srid.</param>
            <param name="wellKnownText">The well known text.</param>
        </member>
        <member name="P:NHibernate.Spatial.Metadata.SpatialReferenceSystem.SRID">
            <summary>
            Gets or sets the SRID.
            </summary>
            <value>The SRID.</value>
        </member>
        <member name="P:NHibernate.Spatial.Metadata.SpatialReferenceSystem.AuthorityName">
            <summary>
            Gets or sets the name of the authority.
            </summary>
            <value>The name of the authority.</value>
        </member>
        <member name="P:NHibernate.Spatial.Metadata.SpatialReferenceSystem.AuthoritySRID">
            <summary>
            Gets or sets the authority SRID.
            </summary>
            <value>The authority SRID.</value>
        </member>
        <member name="P:NHibernate.Spatial.Metadata.SpatialReferenceSystem.WellKnownText">
            <summary>
            Gets or sets the well known text.
            </summary>
            <value>The well known text.</value>
        </member>
        <member name="T:NHibernate.Spatial.Type.GeometryTypeBase`1">
             <summary>
            
             </summary>
             <typeparam name="T"></typeparam>
        </member>
        <member name="T:NHibernate.Spatial.Type.IGeometryUserType">
             <summary>
            
             </summary>
        </member>
        <member name="P:NHibernate.Spatial.Type.IGeometryUserType.SRID">
            <summary>
            Gets the system reference identification
            </summary>
        </member>
        <member name="P:NHibernate.Spatial.Type.IGeometryUserType.Subtype">
            <summary>
            Gets the OGC geometry subtype name
            </summary>
        </member>
        <member name="P:NHibernate.Spatial.Type.IGeometryUserType.Dimension">
            <summary>
            [3DIS] Gets the Dimension [2,3]
            </summary>
        </member>
        <member name="M:NHibernate.Spatial.Type.GeometryTypeBase`1.FromGeometry(System.Object)">
            <summary>
            Converts from GeoAPI geometry type to database geometry type.
            </summary>
            <param name="value">The GeoAPI geometry value.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Type.GeometryTypeBase`1.ToGeometry(System.Object)">
            <summary>
            Converts to GeoAPI geometry type from database geometry type.
            </summary>
            <param name="value">The databse geometry value.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Type.GeometryTypeBase`1.#ctor(NHibernate.Type.NullableType)">
            <summary>
            Initializes a new instance of the <see cref="T:NHibernate.Spatial.Type.GeometryTypeBase`1"/> class.
            </summary>
            <param name="nullableType">Type of the nullable.</param>
        </member>
        <member name="M:NHibernate.Spatial.Type.GeometryTypeBase`1.DeepCopy(System.Object)">
            <summary>
            Return a deep copy of the persistent state, stopping at entities and at collections.
            </summary>
            <param name="value">generally a collection element or entity field</param>
            <returns>a copy</returns>
        </member>
        <member name="M:NHibernate.Spatial.Type.GeometryTypeBase`1.Disassemble(System.Object)">
            <summary>
            Transform the object into its cacheable representation. At the very least this
            method should perform a deep copy if the type is mutable. That may not be enough
            for some implementations, however; for example, associations must be cached as
            identifier values. (optional operation)
            </summary>
            <param name="value">the object to be cached</param>
            <returns>a cacheable representation of the object</returns>
        </member>
        <member name="M:NHibernate.Spatial.Type.GeometryTypeBase`1.Assemble(System.Object,System.Object)">
            <summary>
            Reconstruct an object from the cacheable representation. At the very least this
            method should perform a deep copy if the type is mutable. (optional operation)
            </summary>
            <param name="cached">the object to be cached</param>
            <param name="owner">the owner of the cached object</param>
            <returns>
            a reconstructed object from the cachable representation
            </returns>
        </member>
        <member name="M:NHibernate.Spatial.Type.GeometryTypeBase`1.GetHashCode(System.Object)">
            <summary>
            Get a hashcode for the instance, consistent with persistence "equality"
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Type.GeometryTypeBase`1.NullSafeGet(System.Data.IDataReader,System.String[],System.Object)">
            <summary>
            Retrieve an instance of the mapped class from a JDBC resultset.
            Implementors should handle possibility of null values.
            </summary>
            <param name="rs">a IDataReader</param>
            <param name="names">column names</param>
            <param name="owner">the containing entity</param>
            <returns></returns>
            <exception cref="T:NHibernate.HibernateException">HibernateException</exception>
        </member>
        <member name="M:NHibernate.Spatial.Type.GeometryTypeBase`1.NullSafeSet(System.Data.IDbCommand,System.Object,System.Int32)">
            <summary>
            Write an instance of the mapped class to a prepared statement.
            Implementors should handle possibility of null values.
            A multi-column type should be written to parameters starting from index.
            </summary>
            <param name="cmd">a IDbCommand</param>
            <param name="value">the object to write</param>
            <param name="index">command parameter index</param>
            <exception cref="T:NHibernate.HibernateException">HibernateException</exception>
        </member>
        <member name="M:NHibernate.Spatial.Type.GeometryTypeBase`1.Replace(System.Object,System.Object,System.Object)">
            <summary>
            During merge, replace the existing (<paramref name="target"/>) value in the entity
            we are merging to with a new (<paramref name="original"/>) value from the detached
            entity we are merging. For immutable objects, or null values, it is safe to simply
            return the first parameter. For mutable objects, it is safe to return a copy of the
            first parameter. For objects with component values, it might make sense to
            recursively replace component values.
            </summary>
            <param name="original">the value from the detached entity being merged</param>
            <param name="target">the value in the managed entity</param>
            <param name="owner">the managed entity</param>
            <returns>the value to be merged</returns>
        </member>
        <member name="M:NHibernate.Spatial.Type.GeometryTypeBase`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:NHibernate.Spatial.Type.GeometryTypeBase`1.NHibernate#UserTypes#IUserType#Equals(System.Object,System.Object)">
            <summary>
            Determines whether the specified object is equals to another object.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Type.GeometryTypeBase`1.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:NHibernate.Spatial.Type.GeometryTypeBase`1.SetParameterValues(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Gets called by Hibernate to pass the configured type parameters to
            the implementation.
            </summary>
            <param name="parameters"></param>
        </member>
        <member name="M:NHibernate.Spatial.Type.GeometryTypeBase`1.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            Value Condition Less than zero <paramref name="x"/> is less than <paramref name="y"/>. Zero <paramref name="x"/> equals <paramref name="y"/>. Greater than zero <paramref name="x"/> is greater than <paramref name="y"/>.
            </returns>
            <exception cref="T:System.ArgumentException">Neither <paramref name="x"/> nor <paramref name="y"/> implements the <see cref="T:System.IComparable"/> interface.-or- <paramref name="x"/> and <paramref name="y"/> are of different types and neither one can handle comparisons with the other. </exception>
        </member>
        <member name="M:NHibernate.Spatial.Type.GeometryTypeBase`1.SetDefaultSRID(GeoAPI.Geometries.IGeometry)">
            <summary>
            Sets the default SRID.
            </summary>
            <param name="geometry">The geometry.</param>
        </member>
        <member name="P:NHibernate.Spatial.Type.GeometryTypeBase`1.IsMutable">
            <summary>
            Are objects of this type mutable?
            </summary>
            <value></value>
        </member>
        <member name="P:NHibernate.Spatial.Type.GeometryTypeBase`1.ReturnedType">
            <summary>
            The type returned by <c>NullSafeGet()</c>
            </summary>
            <value></value>
        </member>
        <member name="P:NHibernate.Spatial.Type.GeometryTypeBase`1.SqlTypes">
            <summary>
            The SQL types for the columns mapped by this type.
            </summary>
            <value></value>
        </member>
        <member name="P:NHibernate.Spatial.Type.GeometryTypeBase`1.SRID">
            <summary>
            Gets the system reference identification
            </summary>
            <value></value>
        </member>
        <member name="P:NHibernate.Spatial.Type.GeometryTypeBase`1.Subtype">
            <summary>
            OGC geometry subtype name
            </summary>
            <value></value>
        </member>
        <member name="P:NHibernate.Spatial.Type.GeometryTypeBase`1.Dimension">
            <summary>
            [3DIS] Gets the Dimension [2,3]
            </summary>
        </member>
        <member name="T:NHibernate.Spatial.Dialect.ISpatialDialect">
             <summary>
            
             </summary>
        </member>
        <member name="M:NHibernate.Spatial.Dialect.ISpatialDialect.CreateGeometryUserType">
            <summary>
            Creates the geometry user type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Dialect.ISpatialDialect.GetSpatialTransformString(System.Object,System.Int32)">
            <summary>
            Gets the spatial transform string.
            </summary>
            <param name="geometry">The geometry.</param>
            <param name="srid">The srid.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Dialect.ISpatialDialect.GetSpatialAggregateString(System.Object,NHibernate.Spatial.SpatialAggregate)">
            <summary>
            Gets the spatial aggregate string.
            </summary>
            <param name="geometry">The geometry.</param>
            <param name="aggregate">The aggregate.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Dialect.ISpatialDialect.GetSpatialAnalysisString(System.Object,NHibernate.Spatial.SpatialAnalysis,System.Object)">
            <summary>
            Gets the spatial analysis string.
            </summary>
            <param name="geometry">The geometry.</param>
            <param name="analysis">The analysis.</param>
            <param name="extraArgument">The extra argument.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Dialect.ISpatialDialect.GetSpatialValidationString(System.Object,NHibernate.Spatial.SpatialValidation,System.Boolean)">
            <summary>
            Gets the spatial validation string.
            </summary>
            <param name="geometry">The geometry.</param>
            <param name="validation">The validation.</param>
            <param name="criterion">if set to <c>true</c> [criterion].</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Dialect.ISpatialDialect.GetSpatialRelateString(System.Object,System.Object,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Gets the spatial relate string.
            </summary>
            <param name="geometry">The geometry.</param>
            <param name="anotherGeometry">Another geometry.</param>
            <param name="pattern">The pattern.</param>
            <param name="isStringPattern">if set to <c>true</c> [is string pattern].</param>
            <param name="criterion">if set to <c>true</c> [criterion].</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NHibernate.Spatial.Dialect.ISpatialDialect.GetSpatialRelationString(System.Object,NHibernate.Spatial.SpatialRelation,System.Object,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:NHibernate.Spatial.Dialect.ISpatialDialect.GetSpatialFilterString(System.String,System.String,System.String,System.String,NHibernate.SqlCommand.Parameter)" -->
        <member name="M:NHibernate.Spatial.Dialect.ISpatialDialect.GetSpatialCreateString(System.String)">
            <summary>
            Gets the spatial create string.
            </summary>
            <param name="schema">The schema.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Dialect.ISpatialDialect.GetSpatialCreateString(System.String,System.String,System.String,System.Int32,System.String,System.Int32,System.Boolean)">
            <summary>
            Gets the spatial create string.
            </summary>
            <param name="schema">The schema.</param>
            <param name="table">The table.</param>
            <param name="column">The column.</param>
            <param name="srid">The srid.</param>
            <param name="subtype">The subtype.</param>
            <param name="dimension">[3DIS] The dimension</param>
            <param name="isNullable">Whether or not the column is nullable</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Dialect.ISpatialDialect.GetSpatialDropString(System.String)">
            <summary>
            Gets the spatial drop string.
            </summary>
            <param name="schema">The schema.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Dialect.ISpatialDialect.GetSpatialDropString(System.String,System.String,System.String)">
            <summary>
            Gets the spatial drop string.
            </summary>
            <param name="schema">The schema.</param>
            <param name="table">The table.</param>
            <param name="column">The column.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Dialect.ISpatialDialect.SupportsSpatialMetadata(NHibernate.Spatial.Metadata.MetadataClass)">
            <summary>
            Gets a value indicating whether it supports spatial metadata.
            </summary>
            <value>
            	<c>true</c> if it supports spatial metadata; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NHibernate.Spatial.Dialect.ISpatialDialect.GeometryType">
            <summary>
            Gets the type of the geometry.
            </summary>
            <value>The type of the geometry.</value>
        </member>
        <member name="T:NHibernate.Spatial.Type.GeometryType">
            <summary>
            This type can be used in geometry columns mappings and will use the
            proper conversions according to the spatial database dialect used.
            </summary>
            <remarks>
            To make an explicit dialect selection, just use the specific
            geometry type (eg. MsSqlSpatialGeometryType). See
            <see cref="P:NHibernate.Spatial.Dialect.SpatialDialect.LastInstantiated"/>
            </remarks>
        </member>
        <member name="M:NHibernate.Spatial.Type.GeometryType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NHibernate.Spatial.Type.GeometryType"/> class.
            </summary>
        </member>
        <member name="M:NHibernate.Spatial.Type.GeometryType.Assemble(System.Object,System.Object)">
            <summary>
            Reconstruct an object from the cacheable representation. At the very least this
            method should perform a deep copy if the type is mutable. (optional operation)
            </summary>
            <param name="cached">the object to be cached</param>
            <param name="owner">the owner of the cached object</param>
            <returns>
            a reconstructed object from the cachable representation
            </returns>
        </member>
        <member name="M:NHibernate.Spatial.Type.GeometryType.DeepCopy(System.Object)">
            <summary>
            Return a deep copy of the persistent state, stopping at entities and at collections.
            </summary>
            <param name="value">generally a collection element or entity field</param>
            <returns>a copy</returns>
        </member>
        <member name="M:NHibernate.Spatial.Type.GeometryType.Disassemble(System.Object)">
            <summary>
            Transform the object into its cacheable representation. At the very least this
            method should perform a deep copy if the type is mutable. That may not be enough
            for some implementations, however; for example, associations must be cached as
            identifier values. (optional operation)
            </summary>
            <param name="value">the object to be cached</param>
            <returns>a cacheable representation of the object</returns>
        </member>
        <member name="M:NHibernate.Spatial.Type.GeometryType.GetHashCode(System.Object)">
            <summary>
            Get a hashcode for the instance, consistent with persistence "equality"
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Type.GeometryType.NullSafeGet(System.Data.IDataReader,System.String[],System.Object)">
            <summary>
            Retrieve an instance of the mapped class from a JDBC resultset.
            Implementors should handle possibility of null values.
            </summary>
            <param name="rs">a IDataReader</param>
            <param name="names">column names</param>
            <param name="owner">the containing entity</param>
            <returns></returns>
            <exception cref="T:NHibernate.HibernateException">HibernateException</exception>
        </member>
        <member name="M:NHibernate.Spatial.Type.GeometryType.NullSafeSet(System.Data.IDbCommand,System.Object,System.Int32)">
            <summary>
            Write an instance of the mapped class to a prepared statement.
            Implementors should handle possibility of null values.
            A multi-column type should be written to parameters starting from index.
            </summary>
            <param name="cmd">a IDbCommand</param>
            <param name="value">the object to write</param>
            <param name="index">command parameter index</param>
            <exception cref="T:NHibernate.HibernateException">HibernateException</exception>
        </member>
        <member name="M:NHibernate.Spatial.Type.GeometryType.Replace(System.Object,System.Object,System.Object)">
            <summary>
            During merge, replace the existing (<paramref name="target"/>) value in the entity
            we are merging to with a new (<paramref name="original"/>) value from the detached
            entity we are merging. For immutable objects, or null values, it is safe to simply
            return the first parameter. For mutable objects, it is safe to return a copy of the
            first parameter. For objects with component values, it might make sense to
            recursively replace component values.
            </summary>
            <param name="original">the value from the detached entity being merged</param>
            <param name="target">the value in the managed entity</param>
            <param name="owner">the managed entity</param>
            <returns>the value to be merged</returns>
        </member>
        <member name="M:NHibernate.Spatial.Type.GeometryType.NHibernate#UserTypes#IUserType#Equals(System.Object,System.Object)">
            <summary>
            Determines whether the specified object is equals to another object.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Type.GeometryType.SetParameterValues(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Gets called by Hibernate to pass the configured type parameters to
            the implementation.
            </summary>
            <param name="parameters"></param>
        </member>
        <member name="M:NHibernate.Spatial.Type.GeometryType.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            Value Condition Less than zero <paramref name="x"/> is less than <paramref name="y"/>. Zero <paramref name="x"/> equals <paramref name="y"/>. Greater than zero <paramref name="x"/> is greater than <paramref name="y"/>.
            </returns>
            <exception cref="T:System.ArgumentException">Neither <paramref name="x"/> nor <paramref name="y"/> implements the <see cref="T:System.IComparable"/> interface.-or- <paramref name="x"/> and <paramref name="y"/> are of different types and neither one can handle comparisons with the other. </exception>
        </member>
        <member name="P:NHibernate.Spatial.Type.GeometryType.IsMutable">
            <summary>
            Are objects of this type mutable?
            </summary>
            <value></value>
        </member>
        <member name="P:NHibernate.Spatial.Type.GeometryType.ReturnedType">
            <summary>
            The type returned by <c>NullSafeGet()</c>
            </summary>
            <value></value>
        </member>
        <member name="P:NHibernate.Spatial.Type.GeometryType.SqlTypes">
            <summary>
            The SQL types for the columns mapped by this type.
            </summary>
            <value></value>
        </member>
        <member name="P:NHibernate.Spatial.Type.GeometryType.SRID">
            <summary>
            Gets the system reference identification
            </summary>
            <value></value>
        </member>
        <member name="P:NHibernate.Spatial.Type.GeometryType.Subtype">
            <summary>
            Gets the OGC geometry subtype name
            </summary>
            <value></value>
        </member>
        <member name="P:NHibernate.Spatial.Type.GeometryType.Dimension">
            <summary>
            [3DIS] Gets the Dimension [2,3]
            </summary>
        </member>
        <member name="T:NHibernate.Spatial.Dialect.SpatialDialect">
             <summary>
            
             </summary>
        </member>
        <member name="F:NHibernate.Spatial.Dialect.SpatialDialect.HqlPrefix">
            <summary>
            Function prefix for HQL queries.
            </summary>
        </member>
        <member name="F:NHibernate.Spatial.Dialect.SpatialDialect.IsoPrefix">
            <summary>
            Fuction prefix for dialects implementing ISO/IEC SQL/MM Spatial.
            </summary>
        </member>
        <member name="F:NHibernate.Spatial.Dialect.SpatialDialect.lastInstantiated">
             <summary>
             The last spatial dialect instantiated in the current AppDomain.
             </summary>
            
             <remarks>
             A class implementing <see cref="T:NHibernate.Spatial.Dialect.ISpatialDialect"/> must assign
             itself to this field in its constructor.
            
             <para>
             It has not been tested yet the behavior of this field in an
             environment of multiple spatial dialects instantiated, and
             geometry columns associated, in the same application domain.
             Hopefully, the corresponding dialect always will be instantiated
             before the geometry type, but this assumption has to be analyzed
             in the NHibernate source code and tested in a real scenario.
             </para>
            
             <para>
             This may be an ugly trick but it could be avoided if NHibernate
             provides more context of the IUserType instatiation. For example,
             providing the current NHibernate.Cfg.Settings object through
             a new interface method.
             </para>
            
             </remarks>
        </member>
        <member name="M:NHibernate.Spatial.Dialect.SpatialDialect.GeometryTypeOf(NHibernate.ISessionFactory)">
            <summary>
            Returns the geometry type associated to the session factory.
            </summary>
            <param name="sessionFactory"></param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Dialect.SpatialDialect.GeometryTypeOf(NHibernate.ISession)">
            <summary>
            Returns the geometry type associated to the session.
            </summary>
            <param name="session"></param>
            <returns></returns>
        </member>
        <member name="T:NHibernate.Spatial.Criterion.SpatialFilterCriterion">
             <summary>
            
             </summary>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialFilterCriterion.#ctor(System.String,GeoAPI.Geometries.Envelope,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NHibernate.Spatial.Criterion.SpatialFilterCriterion"/> class.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="envelope">The envelope.</param>
            <param name="srid">The srid.</param>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialFilterCriterion.#ctor(System.String,GeoAPI.Geometries.IGeometry)">
            <summary>
            Initializes a new instance of the <see cref="T:NHibernate.Spatial.Criterion.SpatialFilterCriterion"/> class.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="envelope">The envelope.</param>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialFilterCriterion.GetTypedValues(NHibernate.ICriteria,NHibernate.Criterion.ICriteriaQuery)">
            <summary>
            Return typed values for all parameters in the rendered SQL fragment
            </summary>
            <param name="criteria"></param>
            <param name="criteriaQuery"></param>
            <returns>
            An array of TypedValues for the Expression.
            </returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialFilterCriterion.ToSqlString(NHibernate.ICriteria,NHibernate.Criterion.ICriteriaQuery,System.Collections.Generic.IDictionary{System.String,NHibernate.IFilter})">
            <summary>
            Render a SqlString for the expression.
            </summary>
            <param name="criteria"></param>
            <param name="criteriaQuery"></param>
            <param name="enabledFilters"></param>
            <returns>
            A SqlString that contains a valid Sql fragment.
            </returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialFilterCriterion.ToString">
            <summary>
            Gets a string representation of the <see cref="T:NHibernate.Criterion.AbstractCriterion"/>.
            </summary>
            <returns>
            A String that shows the contents of the <see cref="T:NHibernate.Criterion.AbstractCriterion"/>.
            </returns>
            <remarks>
            This is not a well formed Sql fragment.  It is useful for logging what the <see cref="T:NHibernate.Criterion.AbstractCriterion"/>
            looks like.
            </remarks>
        </member>
        <member name="T:NHibernate.Spatial.Criterion.SpatialAnalysisProjection">
             <summary>
            
             </summary>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialAnalysisProjection.#ctor(System.String,NHibernate.Spatial.SpatialAnalysis,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NHibernate.Spatial.Criterion.SpatialAnalysisProjection"/> class.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="analysis">The analysis.</param>
            <param name="anotherPropertyName">Name of another property.</param>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialAnalysisProjection.#ctor(System.String,NHibernate.Spatial.SpatialAnalysis)">
            <summary>
            Initializes a new instance of the <see cref="T:NHibernate.Spatial.Criterion.SpatialAnalysisProjection"/> class.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="analysis">The analysis.</param>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialAnalysisProjection.#ctor(System.String,NHibernate.Spatial.SpatialAnalysis,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:NHibernate.Spatial.Criterion.SpatialAnalysisProjection"/> class.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="analysis">The analysis.</param>
            <param name="value"></param>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialAnalysisProjection.#ctor(System.String,NHibernate.Spatial.SpatialAnalysis,GeoAPI.Geometries.IGeometry)">
            <summary>
            Initializes a new instance of the <see cref="T:NHibernate.Spatial.Criterion.SpatialAnalysisProjection"/> class.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="analysis">The analysis.</param>
            <param name="geometry">The arguments.</param>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialAnalysisProjection.GetTypes(NHibernate.ICriteria,NHibernate.Criterion.ICriteriaQuery)">
            <summary>
            Gets the types.
            </summary>
            <param name="criteria">The criteria.</param>
            <param name="criteriaQuery">The criteria query.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialAnalysisProjection.ToSqlString(NHibernate.ICriteria,System.Int32,NHibernate.Criterion.ICriteriaQuery,System.Collections.Generic.IDictionary{System.String,NHibernate.IFilter})">
            <summary>
            Render the SQL Fragment.
            </summary>
            <param name="criteria"></param>
            <param name="position"></param>
            <param name="criteriaQuery"></param>
            <param name="enabledFilters"></param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialAnalysisProjection.IsBinaryOperation">
            <summary>
            Determines whether is binary operation.
            </summary>
            <returns>
            	<c>true</c> if is binary operation; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialAnalysisProjection.GetTypedValues(NHibernate.ICriteria,NHibernate.Criterion.ICriteriaQuery)">
            <summary>
            Return typed values for all parameters in the rendered SQL fragment
            </summary>
            <param name="criteria"></param>
            <param name="criteriaQuery"></param>
            <returns>
            An array of TypedValues for the Expression.
            </returns>
        </member>
        <member name="T:NHibernate.Spatial.Criterion.SpatialValidationCriterion">
             <summary>
            
             </summary>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialValidationCriterion.#ctor(System.String,NHibernate.Spatial.SpatialValidation)">
            <summary>
            Initializes a new instance of the <see cref="T:NHibernate.Spatial.Criterion.SpatialValidationCriterion"/> class.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="validation">The validation.</param>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialValidationCriterion.GetTypedValues(NHibernate.ICriteria,NHibernate.Criterion.ICriteriaQuery)">
            <summary>
            Return typed values for all parameters in the rendered SQL fragment
            </summary>
            <param name="criteria"></param>
            <param name="criteriaQuery"></param>
            <returns>
            An array of TypedValues for the Expression.
            </returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialValidationCriterion.ToSqlString(NHibernate.ICriteria,NHibernate.Criterion.ICriteriaQuery,System.Collections.Generic.IDictionary{System.String,NHibernate.IFilter})">
            <summary>
            Render a SqlString for the expression.
            </summary>
            <param name="criteria"></param>
            <param name="criteriaQuery"></param>
            <param name="enabledFilters"></param>
            <returns>
            A SqlString that contains a valid Sql fragment.
            </returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialValidationCriterion.ToString">
            <summary>
            Gets a string representation of the <see cref="T:NHibernate.Criterion.AbstractCriterion"/>.
            </summary>
            <returns>
            A String that shows the contents of the <see cref="T:NHibernate.Criterion.AbstractCriterion"/>.
            </returns>
            <remarks>
            This is not a well formed Sql fragment.  It is useful for logging what the <see cref="T:NHibernate.Criterion.AbstractCriterion"/>
            looks like.
            </remarks>
        </member>
        <member name="T:NHibernate.Spatial.SpatialAggregate">
             <summary>
            
             </summary>
        </member>
        <member name="F:NHibernate.Spatial.SpatialAggregate.Collect">
             <summary>
            
             </summary>
        </member>
        <member name="F:NHibernate.Spatial.SpatialAggregate.Envelope">
             <summary>
            
             </summary>
        </member>
        <member name="F:NHibernate.Spatial.SpatialAggregate.Intersection">
             <summary>
            
             </summary>
        </member>
        <member name="F:NHibernate.Spatial.SpatialAggregate.Union">
             <summary>
            
             </summary>
        </member>
        <member name="F:NHibernate.Spatial.SpatialAggregate.ConvexHull">
            <summary>
            
            </summary>
        </member>
        <member name="T:NHibernate.Spatial.Criterion.SpatialAggregateProjection">
             <summary>
            
             </summary>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialAggregateProjection.#ctor(System.String,NHibernate.Spatial.SpatialAggregate)">
            <summary>
            Initializes a new instance of the <see cref="T:NHibernate.Spatial.Criterion.SpatialAggregateProjection"/> class.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="aggregate">The aggregate.</param>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialAggregateProjection.ToSqlString(System.String,NHibernate.Spatial.Dialect.ISpatialDialect)">
            <summary>
            Render the SQL Fragment.
            </summary>
            <param name="column">The column.</param>
            <param name="spatialDialect">The spatial dialect.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialAggregateProjection.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:NHibernate.Spatial.Criterion.SpatialExpression" -->
        <member name="T:NHibernate.Spatial.Criterion.SpatialRestrictions">
             <summary>
            
             </summary>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialRestrictions.Filter(System.String,GeoAPI.Geometries.Envelope,System.Int32)">
            <summary>
            Filters the specified property name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="envelope">The envelope.</param>
            <param name="srid">The srid.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialRestrictions.Filter(System.String,GeoAPI.Geometries.IGeometry)">
            <summary>
            Filters the specified property name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="envelope">The envelope.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialRestrictions.Contains(System.String,System.Object)">
            <summary>
            Determines whether the specified geometry property contains another geometry.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="anotherGeometry">Another geometry.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialRestrictions.CoveredBy(System.String,System.Object)">
            <summary>
            Determines whether the specified geometry property is covered by another geometry.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="anotherGeometry">Another geometry.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialRestrictions.Covers(System.String,System.Object)">
            <summary>
            Determines whether the specified geometry property covers another geometry.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="anotherGeometry">Another geometry.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialRestrictions.Crosses(System.String,System.Object)">
            <summary>
            Determines whether the specified geometry property crosses another geometry.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="anotherGeometry">Another geometry.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialRestrictions.Disjoint(System.String,System.Object)">
            <summary>
            Determines whether the specified geometry property is disjoint with another geometry.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="anotherGeometry">Another geometry.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialRestrictions.Eq(System.String,System.Object)">
            <summary>
            Determines whether the specified geometry property is equals to another geometry.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="anotherGeometry">Another geometry.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialRestrictions.EqExact(System.String,System.Object,System.Double)">
            <summary>
            Determines whether the specified geometry property is exactly equals (within a tolerance) to another geometry.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="anotherGeometry">Another geometry.</param>
            <param name="tolerance">The tolerance.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialRestrictions.Intersects(System.String,System.Object)">
            <summary>
            Determines whether the specified geometry property intersects another geometry.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="anotherGeometry">Another geometry.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialRestrictions.Overlaps(System.String,System.Object)">
            <summary>
            Determines whether the specified geometry property overlaps another geometry.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="anotherGeometry">Another geometry.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialRestrictions.Relate(System.String,System.Object,System.String)">
            <summary>
            Determines whether the specified geometry property relates to another geometry.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="anotherGeometry">Another geometry.</param>
            <param name="intersectionPatternMatrix">The intersection pattern matrix.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialRestrictions.Touches(System.String,System.Object)">
            <summary>
            Determines whether the specified geometry property touches another geometry.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="anotherGeometry">Another geometry.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialRestrictions.Within(System.String,System.Object)">
            <summary>
            Determines whether the specified geometry property is within another geometry.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="anotherGeometry">Another geometry.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialRestrictions.IsWithinDistance(System.String,System.Object,System.Double)">
            <summary>
            Determines whether the specified geometry property is within a givin distance of another geometry.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="anotherGeometry">Another geometry.</param>
            <param name="distance">The distance.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialRestrictions.IsClosed(System.String)">
            <summary>
            Determines whether the specified geometry property is closed.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialRestrictions.IsEmpty(System.String)">
            <summary>
            Determines whether the specified geometry property is empty.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialRestrictions.IsRing(System.String)">
            <summary>
            Determines whether the specified geometry property is ring.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialRestrictions.IsSimple(System.String)">
            <summary>
            Determines whether the specified geometry property is simple.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialRestrictions.IsValid(System.String)">
            <summary>
            Determines whether the specified geometry property is valid.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="T:NHibernate.Spatial.Criterion.SpatialRelationCriterion">
             <summary>
            
             </summary>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialRelationCriterion.#ctor(System.String,NHibernate.Spatial.SpatialRelation,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:NHibernate.Spatial.Criterion.SpatialRelationCriterion"/> class.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="relation">The relation.</param>
            <param name="anotherGeometry">Another geometry.</param>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialRelationCriterion.GetTypedValues(NHibernate.ICriteria,NHibernate.Criterion.ICriteriaQuery)">
            <summary>
            Return typed values for all parameters in the rendered SQL fragment
            </summary>
            <param name="criteria"></param>
            <param name="criteriaQuery"></param>
            <returns>
            An array of TypedValues for the Expression.
            </returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialRelationCriterion.ToSqlString(NHibernate.ICriteria,NHibernate.Criterion.ICriteriaQuery,System.Collections.Generic.IDictionary{System.String,NHibernate.IFilter})">
            <summary>
            Render a SqlString for the expression.
            </summary>
            <param name="criteria"></param>
            <param name="criteriaQuery"></param>
            <param name="enabledFilters"></param>
            <returns>
            A SqlString that contains a valid Sql fragment.
            </returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialRelationCriterion.GetColumnNames(NHibernate.ICriteria,NHibernate.Criterion.ICriteriaQuery,System.String)">
            <summary>
            Gets the column names.
            </summary>
            <param name="criteria">The criteria.</param>
            <param name="criteriaQuery">The criteria query.</param>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialRelationCriterion.ToString">
            <summary>
            Gets a string representation of the <see cref="T:NHibernate.Criterion.AbstractCriterion"/>.
            </summary>
            <returns>
            A String that shows the contents of the <see cref="T:NHibernate.Criterion.AbstractCriterion"/>.
            </returns>
            <remarks>
            This is not a well formed Sql fragment.  It is useful for logging what the <see cref="T:NHibernate.Criterion.AbstractCriterion"/>
            looks like.
            </remarks>
        </member>
        <member name="T:NHibernate.Spatial.Criterion.SpatialTransformProjection">
             <summary>
            
             </summary>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialTransformProjection.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NHibernate.Spatial.Criterion.SpatialTransformProjection"/> class.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="targetSrid">The target srid.</param>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialTransformProjection.ToSqlString(System.String,NHibernate.Spatial.Dialect.ISpatialDialect)">
            <summary>
            Render the SQL Fragment.
            </summary>
            <param name="column">The column.</param>
            <param name="spatialDialect">The spatial dialect.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Spatial.Criterion.SpatialTransformProjection.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:NHibernate.Spatial.SpatialAnalysis">
             <summary>
            
             </summary>
        </member>
        <member name="F:NHibernate.Spatial.SpatialAnalysis.Buffer">
             <summary>
            
             </summary>
        </member>
        <member name="F:NHibernate.Spatial.SpatialAnalysis.ConvexHull">
             <summary>
            
             </summary>
        </member>
        <member name="F:NHibernate.Spatial.SpatialAnalysis.Difference">
             <summary>
            
             </summary>
        </member>
        <member name="F:NHibernate.Spatial.SpatialAnalysis.Distance">
             <summary>
            
             </summary>
        </member>
        <member name="F:NHibernate.Spatial.SpatialAnalysis.Intersection">
             <summary>
            
             </summary>
        </member>
        <member name="F:NHibernate.Spatial.SpatialAnalysis.SymDifference">
             <summary>
            
             </summary>
        </member>
        <member name="F:NHibernate.Spatial.SpatialAnalysis.Union">
             <summary>
            
             </summary>
        </member>
        <member name="T:NHibernate.Spatial.SpatialRelation">
             <summary>
            
             </summary>
        </member>
        <member name="F:NHibernate.Spatial.SpatialRelation.Contains">
             <summary>
            
             </summary>
        </member>
        <member name="F:NHibernate.Spatial.SpatialRelation.CoveredBy">
             <summary>
            
             </summary>
        </member>
        <member name="F:NHibernate.Spatial.SpatialRelation.Covers">
             <summary>
            
             </summary>
        </member>
        <member name="F:NHibernate.Spatial.SpatialRelation.Crosses">
             <summary>
            
             </summary>
        </member>
        <member name="F:NHibernate.Spatial.SpatialRelation.Disjoint">
             <summary>
            
             </summary>
        </member>
        <member name="F:NHibernate.Spatial.SpatialRelation.Equals">
             <summary>
            
             </summary>
        </member>
        <member name="F:NHibernate.Spatial.SpatialRelation.Intersects">
             <summary>
            
             </summary>
        </member>
        <member name="F:NHibernate.Spatial.SpatialRelation.Overlaps">
             <summary>
            
             </summary>
        </member>
        <member name="F:NHibernate.Spatial.SpatialRelation.Touches">
             <summary>
            
             </summary>
        </member>
        <member name="F:NHibernate.Spatial.SpatialRelation.Within">
             <summary>
            
             </summary>
        </member>
        <member name="T:NHibernate.Spatial.SpatialValidation">
             <summary>
            
             </summary>
        </member>
        <member name="F:NHibernate.Spatial.SpatialValidation.IsClosed">
             <summary>
            
             </summary>
        </member>
        <member name="F:NHibernate.Spatial.SpatialValidation.IsEmpty">
             <summary>
            
             </summary>
        </member>
        <member name="F:NHibernate.Spatial.SpatialValidation.IsRing">
             <summary>
            
             </summary>
        </member>
        <member name="F:NHibernate.Spatial.SpatialValidation.IsSimple">
             <summary>
            
             </summary>
        </member>
        <member name="F:NHibernate.Spatial.SpatialValidation.IsValid">
             <summary>
            
             </summary>
        </member>
    </members>
</doc>
