// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ASTRA.EMSG.IntegrationTests.Features.A_Administration
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("A7 - Ausgewählte Systemparameter pflegen", Description="\tAls Applikationsadministrator,\r\n\twill ich Ausgewählte Systemparameter pflegen\r\n\t" +
        "damit ich eine zentrale Steuerungsmöglichkeit wichtiger Basiseinstellungen habe " +
        "", SourceFile="Features\\A - Administration\\A7.feature", SourceLine=0)]
    public partial class A7_AusgewahlteSystemparameterPflegenFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "A7.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("de-AT"), "A7 - Ausgewählte Systemparameter pflegen", "\tAls Applikationsadministrator,\r\n\twill ich Ausgewählte Systemparameter pflegen\r\n\t" +
                    "damit ich eine zentrale Steuerungsmöglichkeit wichtiger Basiseinstellungen habe " +
                    "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line 7
testRunner.Given("ich bin Applikationsadministrator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Gegeben sei ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Massnahmenvorschlag",
                        "Typ"});
            table1.AddRow(new string[] {
                        "Deckbelagserneuerung",
                        "Fahrbahn"});
            table1.AddRow(new string[] {
                        "Oberflächenverbesserung",
                        "Fahrbahn"});
#line 8
testRunner.And("es gibt folgende Massnahmevorschläge im System:", ((string)(null)), table1, "Und ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Massnahmenvorschlag",
                        "Typ"});
            table2.AddRow(new string[] {
                        "Deckbelagserneuerung",
                        "Fahrbahn"});
            table2.AddRow(new string[] {
                        "Oberflächenverbesserung",
                        "Fahrbahn"});
#line 12
testRunner.And("es gibt folgende Massnahmen im System:", ((string)(null)), table2, "Und ");
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Applikationsadministrator kann ausgewählte Systemparameter, die für alle Mand" +
            "anten angewendet werden, pflegen", new string[] {
                "Manuell"}, SourceLine=19)]
        public virtual void DerApplikationsadministratorKannAusgewahlteSystemparameterDieFurAlleMandantenAngewendetWerdenPflegen()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Applikationsadministrator kann ausgewählte Systemparameter, die für alle Mand" +
                    "anten angewendet werden, pflegen", new string[] {
                        "Manuell"});
#line 20
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Systemparameter",
                        "IA",
                        "IB",
                        "IC",
                        "II",
                        "III",
                        "IV"});
            table3.AddRow(new string[] {
                        "Wiederbeschaffungswert Fläche Fahrbahn",
                        "430",
                        "400",
                        "140",
                        "380",
                        "430",
                        "340"});
            table3.AddRow(new string[] {
                        "Alterungsbeiwert I",
                        "1,6",
                        "1,6",
                        "1,4",
                        "1,8",
                        "2,2",
                        "2,6"});
#line 21
testRunner.When("ich folgende Systemparameter je Belastungskategorie anpasse:", ((string)(null)), table3, "Wenn ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Massnahmenvorschlag",
                        "Typ",
                        "IA",
                        "IB",
                        "IC",
                        "II",
                        "III",
                        "IV"});
            table4.AddRow(new string[] {
                        "Oberflächenverbesserung",
                        "Fahrbahn",
                        "50",
                        "50",
                        "50",
                        "50",
                        "50",
                        "50"});
#line 25
testRunner.And("ich folgende Standard-Kosten-Werte für Massnahmenvorschläge je Belastungskategori" +
                    "e anpasse:", ((string)(null)), table4, "Und ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Massnahmenvorschlag",
                        "Typ",
                        "IA",
                        "IB",
                        "IC",
                        "II",
                        "III",
                        "IV"});
            table5.AddRow(new string[] {
                        "Deckbelagsverbesserung",
                        "Fahrbahn",
                        "100",
                        "100",
                        "100",
                        "100",
                        "100",
                        "100"});
#line 28
testRunner.And("ich folgenden neuen Massnahmenvorschläge je Belastungskategorie erfasse:", ((string)(null)), table5, "Und ");
#line 31
testRunner.Then("stehen die veränderten Parameter allen Mandanten zur Verfügung.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Applikationsadministrator kann Massnahmenvorschläge löschen", new string[] {
                "Manuell"}, SourceLine=35)]
        public virtual void DerApplikationsadministratorKannMassnahmenvorschlageLoschen()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Applikationsadministrator kann Massnahmenvorschläge löschen", new string[] {
                        "Manuell"});
#line 36
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Massnahmenvorschlag",
                        "Typ"});
            table6.AddRow(new string[] {
                        "Deckbelagserneuerung",
                        "Fahrbahn"});
#line 37
testRunner.When("ich folgende Massnahmenvorschläge lösche:", ((string)(null)), table6, "Wenn ");
#line 40
testRunner.Then("stehen diese Massnahmenvorschläge allen Mandanten nicht mehr zur Verfügung.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Applikationsadministrator kann Massnahmen löschen", new string[] {
                "Manuell"}, SourceLine=44)]
        public virtual void DerApplikationsadministratorKannMassnahmenLoschen()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Applikationsadministrator kann Massnahmen löschen", new string[] {
                        "Manuell"});
#line 45
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Massnahmenvorschlag",
                        "Typ"});
            table7.AddRow(new string[] {
                        "Deckbelagserneuerung",
                        "Fahrbahn"});
#line 46
testRunner.When("ich folgende Massnahmen lösche:", ((string)(null)), table7, "Wenn ");
#line 49
testRunner.Then("stehen diese Massnahmen allen Mandanten nicht mehr zur Verfügung.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Das System wendet die definierten Systemparameter für alle Mandanten von EMSG an", new string[] {
                "Manuell"}, SourceLine=53)]
        public virtual void DasSystemWendetDieDefiniertenSystemparameterFurAlleMandantenVonEMSGAn()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Das System wendet die definierten Systemparameter für alle Mandanten von EMSG an", new string[] {
                        "Manuell"});
#line 54
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Wenn Systemparameter verändert werden, so soll das keine Auswirkung auf die Auswe" +
            "rtungen abgeschlossener Jahre haben", new string[] {
                "Manuell"}, SourceLine=58)]
        public virtual void WennSystemparameterVerandertWerdenSoSollDasKeineAuswirkungAufDieAuswertungenAbgeschlossenerJahreHaben()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Wenn Systemparameter verändert werden, so soll das keine Auswirkung auf die Auswe" +
                    "rtungen abgeschlossener Jahre haben", new string[] {
                        "Manuell"});
#line 59
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Systemparameter",
                        "IA",
                        "IB",
                        "IC",
                        "II",
                        "III",
                        "IV"});
            table8.AddRow(new string[] {
                        "Wiederbeschaffungswert Fläche Fahrbahn",
                        "430",
                        "400",
                        "140",
                        "380",
                        "430",
                        "340"});
            table8.AddRow(new string[] {
                        "Alterungsbeiwert I",
                        "1,6",
                        "1,6",
                        "1,4",
                        "1,8",
                        "2,2",
                        "2,6"});
#line 60
testRunner.When("ich folgende Systemparameter je Belastungskategorie anpasse:", ((string)(null)), table8, "Wenn ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Massnahmenvorschlag",
                        "Typ",
                        "IA",
                        "IB",
                        "IC",
                        "II",
                        "III",
                        "IV"});
            table9.AddRow(new string[] {
                        "Oberflächenverbesserung",
                        "Fahrbahn",
                        "50",
                        "50",
                        "50",
                        "50",
                        "50",
                        "50"});
#line 64
testRunner.And("ich folgende Standard-Kosten-Werte für Massnahmenvorschläge je Belastungskategori" +
                    "e anpasse:", ((string)(null)), table9, "Und ");
#line 67
testRunner.Then("sind alle Auswertungen abgeschlossener Jahre aller Mandanten unverändert.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("A7 - Ausgewählte Systemparameter pflegen")]
    public partial class A7_AusgewahlteSystemparameterPflegenFeature_NUnit
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "A7.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("de-AT"), "A7 - Ausgewählte Systemparameter pflegen", "\tAls Applikationsadministrator,\r\n\twill ich Ausgewählte Systemparameter pflegen\r\n\t" +
                    "damit ich eine zentrale Steuerungsmöglichkeit wichtiger Basiseinstellungen habe " +
                    "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line 7
testRunner.Given("ich bin Applikationsadministrator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Gegeben sei ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Massnahmenvorschlag",
                        "Typ"});
            table1.AddRow(new string[] {
                        "Deckbelagserneuerung",
                        "Fahrbahn"});
            table1.AddRow(new string[] {
                        "Oberflächenverbesserung",
                        "Fahrbahn"});
#line 8
testRunner.And("es gibt folgende Massnahmevorschläge im System:", ((string)(null)), table1, "Und ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Massnahmenvorschlag",
                        "Typ"});
            table2.AddRow(new string[] {
                        "Deckbelagserneuerung",
                        "Fahrbahn"});
            table2.AddRow(new string[] {
                        "Oberflächenverbesserung",
                        "Fahrbahn"});
#line 12
testRunner.And("es gibt folgende Massnahmen im System:", ((string)(null)), table2, "Und ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Der Applikationsadministrator kann ausgewählte Systemparameter, die für alle Mand" +
            "anten angewendet werden, pflegen")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void DerApplikationsadministratorKannAusgewahlteSystemparameterDieFurAlleMandantenAngewendetWerdenPflegen()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Applikationsadministrator kann ausgewählte Systemparameter, die für alle Mand" +
                    "anten angewendet werden, pflegen", new string[] {
                        "Manuell"});
#line 20
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Systemparameter",
                        "IA",
                        "IB",
                        "IC",
                        "II",
                        "III",
                        "IV"});
            table3.AddRow(new string[] {
                        "Wiederbeschaffungswert Fläche Fahrbahn",
                        "430",
                        "400",
                        "140",
                        "380",
                        "430",
                        "340"});
            table3.AddRow(new string[] {
                        "Alterungsbeiwert I",
                        "1,6",
                        "1,6",
                        "1,4",
                        "1,8",
                        "2,2",
                        "2,6"});
#line 21
testRunner.When("ich folgende Systemparameter je Belastungskategorie anpasse:", ((string)(null)), table3, "Wenn ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Massnahmenvorschlag",
                        "Typ",
                        "IA",
                        "IB",
                        "IC",
                        "II",
                        "III",
                        "IV"});
            table4.AddRow(new string[] {
                        "Oberflächenverbesserung",
                        "Fahrbahn",
                        "50",
                        "50",
                        "50",
                        "50",
                        "50",
                        "50"});
#line 25
testRunner.And("ich folgende Standard-Kosten-Werte für Massnahmenvorschläge je Belastungskategori" +
                    "e anpasse:", ((string)(null)), table4, "Und ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Massnahmenvorschlag",
                        "Typ",
                        "IA",
                        "IB",
                        "IC",
                        "II",
                        "III",
                        "IV"});
            table5.AddRow(new string[] {
                        "Deckbelagsverbesserung",
                        "Fahrbahn",
                        "100",
                        "100",
                        "100",
                        "100",
                        "100",
                        "100"});
#line 28
testRunner.And("ich folgenden neuen Massnahmenvorschläge je Belastungskategorie erfasse:", ((string)(null)), table5, "Und ");
#line 31
testRunner.Then("stehen die veränderten Parameter allen Mandanten zur Verfügung.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Der Applikationsadministrator kann Massnahmenvorschläge löschen")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void DerApplikationsadministratorKannMassnahmenvorschlageLoschen()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Applikationsadministrator kann Massnahmenvorschläge löschen", new string[] {
                        "Manuell"});
#line 36
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Massnahmenvorschlag",
                        "Typ"});
            table6.AddRow(new string[] {
                        "Deckbelagserneuerung",
                        "Fahrbahn"});
#line 37
testRunner.When("ich folgende Massnahmenvorschläge lösche:", ((string)(null)), table6, "Wenn ");
#line 40
testRunner.Then("stehen diese Massnahmenvorschläge allen Mandanten nicht mehr zur Verfügung.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Der Applikationsadministrator kann Massnahmen löschen")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void DerApplikationsadministratorKannMassnahmenLoschen()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Applikationsadministrator kann Massnahmen löschen", new string[] {
                        "Manuell"});
#line 45
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Massnahmenvorschlag",
                        "Typ"});
            table7.AddRow(new string[] {
                        "Deckbelagserneuerung",
                        "Fahrbahn"});
#line 46
testRunner.When("ich folgende Massnahmen lösche:", ((string)(null)), table7, "Wenn ");
#line 49
testRunner.Then("stehen diese Massnahmen allen Mandanten nicht mehr zur Verfügung.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Das System wendet die definierten Systemparameter für alle Mandanten von EMSG an")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void DasSystemWendetDieDefiniertenSystemparameterFurAlleMandantenVonEMSGAn()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Das System wendet die definierten Systemparameter für alle Mandanten von EMSG an", new string[] {
                        "Manuell"});
#line 54
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Wenn Systemparameter verändert werden, so soll das keine Auswirkung auf die Auswe" +
            "rtungen abgeschlossener Jahre haben")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void WennSystemparameterVerandertWerdenSoSollDasKeineAuswirkungAufDieAuswertungenAbgeschlossenerJahreHaben()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Wenn Systemparameter verändert werden, so soll das keine Auswirkung auf die Auswe" +
                    "rtungen abgeschlossener Jahre haben", new string[] {
                        "Manuell"});
#line 59
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Systemparameter",
                        "IA",
                        "IB",
                        "IC",
                        "II",
                        "III",
                        "IV"});
            table8.AddRow(new string[] {
                        "Wiederbeschaffungswert Fläche Fahrbahn",
                        "430",
                        "400",
                        "140",
                        "380",
                        "430",
                        "340"});
            table8.AddRow(new string[] {
                        "Alterungsbeiwert I",
                        "1,6",
                        "1,6",
                        "1,4",
                        "1,8",
                        "2,2",
                        "2,6"});
#line 60
testRunner.When("ich folgende Systemparameter je Belastungskategorie anpasse:", ((string)(null)), table8, "Wenn ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Massnahmenvorschlag",
                        "Typ",
                        "IA",
                        "IB",
                        "IC",
                        "II",
                        "III",
                        "IV"});
            table9.AddRow(new string[] {
                        "Oberflächenverbesserung",
                        "Fahrbahn",
                        "50",
                        "50",
                        "50",
                        "50",
                        "50",
                        "50"});
#line 64
testRunner.And("ich folgende Standard-Kosten-Werte für Massnahmenvorschläge je Belastungskategori" +
                    "e anpasse:", ((string)(null)), table9, "Und ");
#line 67
testRunner.Then("sind alle Auswertungen abgeschlossener Jahre aller Mandanten unverändert.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
