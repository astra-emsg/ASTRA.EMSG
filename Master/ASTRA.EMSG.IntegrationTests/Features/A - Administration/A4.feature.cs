// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ASTRA.EMSG.IntegrationTests.Features.A_Administration
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("A4 - Achsenupdates einspielen", Description="\tAls Benutzeradministrator,\r\n\twill ich Achsenupdates einspielen\r\n\tdamit ich mit d" +
        "en aktuellen Daten zu Achsen arbeite", SourceFile="Features\\A - Administration\\A4.feature", SourceLine=0)]
    public partial class A4_AchsenupdatesEinspielenFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "A4.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("de-AT"), "A4 - Achsenupdates einspielen", "\tAls Benutzeradministrator,\r\n\twill ich Achsenupdates einspielen\r\n\tdamit ich mit d" +
                    "en aktuellen Daten zu Achsen arbeite", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Benutzeradministrator kann die Aktualisierung der Achsen aufrufen", new string[] {
                "Manuell"}, SourceLine=8)]
        public virtual void DerBenutzeradministratorKannDieAktualisierungDerAchsenAufrufen()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Benutzeradministrator kann die Aktualisierung der Achsen aufrufen", new string[] {
                        "Manuell"});
#line 9
this.ScenarioSetup(scenarioInfo);
#line 10
testRunner.Given("ich öffne die Seite \'Arbeitsmodus wechseln\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Gegeben sei ");
#line 11
testRunner.And("ich wähle den Arbeitsmodus \'GIS Modus\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line 12
testRunner.When("ich auf Achsenupdate klicke", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line 13
testRunner.Then("wird der Achseupdateprozess gestartet und die Achsen werden aktualisiert", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Das System holt sich automatisch die neuen Achsen für den Mandanten", new string[] {
                "Manuell"}, SourceLine=17)]
        public virtual void DasSystemHoltSichAutomatischDieNeuenAchsenFurDenMandanten()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Das System holt sich automatisch die neuen Achsen für den Mandanten", new string[] {
                        "Manuell"});
#line 18
this.ScenarioSetup(scenarioInfo);
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Das System zieht automatisch Referenzen auf Achssegmente von Strassenabschnitten " +
            "nach", new string[] {
                "Manuell"}, SourceLine=22)]
        public virtual void DasSystemZiehtAutomatischReferenzenAufAchssegmenteVonStrassenabschnittenNach()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Das System zieht automatisch Referenzen auf Achssegmente von Strassenabschnitten " +
                    "nach", new string[] {
                        "Manuell"});
#line 23
this.ScenarioSetup(scenarioInfo);
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Manager kann Strassenabschnitte immer nur auf den aktuellen Stand der Ac" +
            "hsen definieren", new string[] {
                "Manuell"}, SourceLine=27)]
        public virtual void DerData_ManagerKannStrassenabschnitteImmerNurAufDenAktuellenStandDerAchsenDefinieren()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Data-Manager kann Strassenabschnitte immer nur auf den aktuellen Stand der Ac" +
                    "hsen definieren", new string[] {
                        "Manuell"});
#line 28
this.ScenarioSetup(scenarioInfo);
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Dem Data-Manager steht eine Liste mit den Status der letzten Achsenaktualisierung" +
            "en zur Verfügung", new string[] {
                "Manuell"}, SourceLine=32)]
        public virtual void DemData_ManagerStehtEineListeMitDenStatusDerLetztenAchsenaktualisierungenZurVerfugung()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Dem Data-Manager steht eine Liste mit den Status der letzten Achsenaktualisierung" +
                    "en zur Verfügung", new string[] {
                        "Manuell"});
#line 33
this.ScenarioSetup(scenarioInfo);
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("A4 - Achsenupdates einspielen")]
    public partial class A4_AchsenupdatesEinspielenFeature_NUnit
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "A4.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("de-AT"), "A4 - Achsenupdates einspielen", "\tAls Benutzeradministrator,\r\n\twill ich Achsenupdates einspielen\r\n\tdamit ich mit d" +
                    "en aktuellen Daten zu Achsen arbeite", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Der Benutzeradministrator kann die Aktualisierung der Achsen aufrufen")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void DerBenutzeradministratorKannDieAktualisierungDerAchsenAufrufen()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Benutzeradministrator kann die Aktualisierung der Achsen aufrufen", new string[] {
                        "Manuell"});
#line 9
this.ScenarioSetup(scenarioInfo);
#line 10
testRunner.Given("ich öffne die Seite \'Arbeitsmodus wechseln\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Gegeben sei ");
#line 11
testRunner.And("ich wähle den Arbeitsmodus \'GIS Modus\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line 12
testRunner.When("ich auf Achsenupdate klicke", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line 13
testRunner.Then("wird der Achseupdateprozess gestartet und die Achsen werden aktualisiert", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Das System holt sich automatisch die neuen Achsen für den Mandanten")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void DasSystemHoltSichAutomatischDieNeuenAchsenFurDenMandanten()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Das System holt sich automatisch die neuen Achsen für den Mandanten", new string[] {
                        "Manuell"});
#line 18
this.ScenarioSetup(scenarioInfo);
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Das System zieht automatisch Referenzen auf Achssegmente von Strassenabschnitten " +
            "nach")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void DasSystemZiehtAutomatischReferenzenAufAchssegmenteVonStrassenabschnittenNach()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Das System zieht automatisch Referenzen auf Achssegmente von Strassenabschnitten " +
                    "nach", new string[] {
                        "Manuell"});
#line 23
this.ScenarioSetup(scenarioInfo);
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Der Data-Manager kann Strassenabschnitte immer nur auf den aktuellen Stand der Ac" +
            "hsen definieren")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void DerData_ManagerKannStrassenabschnitteImmerNurAufDenAktuellenStandDerAchsenDefinieren()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Data-Manager kann Strassenabschnitte immer nur auf den aktuellen Stand der Ac" +
                    "hsen definieren", new string[] {
                        "Manuell"});
#line 28
this.ScenarioSetup(scenarioInfo);
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Dem Data-Manager steht eine Liste mit den Status der letzten Achsenaktualisierung" +
            "en zur Verfügung")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void DemData_ManagerStehtEineListeMitDenStatusDerLetztenAchsenaktualisierungenZurVerfugung()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Dem Data-Manager steht eine Liste mit den Status der letzten Achsenaktualisierung" +
                    "en zur Verfügung", new string[] {
                        "Manuell"});
#line 33
this.ScenarioSetup(scenarioInfo);
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
