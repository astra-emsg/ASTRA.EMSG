// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ASTRA.EMSG.IntegrationTests.Features.A_Administration
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("A14 - Ausgewählte Systemparameter für meinen Mandanten pflegen", Description="\tAls Benutzeradministrator\r\n\twill ich ausgewählte Systemparameter für meinen Mand" +
        "anten pflegen\r\n\tdamit ich eine zentrale Steuerungsmöglichkeit wichtiger Basisein" +
        "stellungen habe", SourceFile="Features\\A - Administration\\A14.feature", SourceLine=0)]
    public partial class A14_AusgewahlteSystemparameterFurMeinenMandantenPflegenFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "A14.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("de-AT"), "A14 - Ausgewählte Systemparameter für meinen Mandanten pflegen", "\tAls Benutzeradministrator\r\n\twill ich ausgewählte Systemparameter für meinen Mand" +
                    "anten pflegen\r\n\tdamit ich eine zentrale Steuerungsmöglichkeit wichtiger Basisein" +
                    "stellungen habe", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 8
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mandant",
                        "Modus"});
            table1.AddRow(new string[] {
                        "Mandant_1",
                        "strassennamen"});
#line 9
testRunner.Given("folgende Einstellungen existieren:", ((string)(null)), table1, "Gegeben sei ");
#line 12
testRunner.And("ich bin Benutzeradministrator von Mandant_1 bin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Benutzeradministrator kann ausgewählte Systemparameter, die für seinen Mandan" +
            "ten angewendet werden, pflegen", new string[] {
                "Manuell"}, SourceLine=16)]
        public virtual void DerBenutzeradministratorKannAusgewahlteSystemparameterDieFurSeinenMandantenAngewendetWerdenPflegen()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Benutzeradministrator kann ausgewählte Systemparameter, die für seinen Mandan" +
                    "ten angewendet werden, pflegen", new string[] {
                        "Manuell"});
#line 17
this.ScenarioSetup(scenarioInfo);
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Systemparameter",
                        "IA",
                        "IB",
                        "IC",
                        "II",
                        "III",
                        "IV"});
            table2.AddRow(new string[] {
                        "Wiederbeschaffungswert Fläche Fahrbahn",
                        "430",
                        "400",
                        "160",
                        "380",
                        "430",
                        "340"});
            table2.AddRow(new string[] {
                        "Alterungsbeiwert I",
                        "1,5",
                        "1,5",
                        "1,5",
                        "1,8",
                        "2,2",
                        "2,6"});
#line 18
testRunner.When("ich folgende Systemparameter je Belastungskategorie anpasse:", ((string)(null)), table2, "Wenn ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Massnahmenvorschlag",
                        "Typ",
                        "IA",
                        "IB",
                        "IC",
                        "II",
                        "III",
                        "IV"});
            table3.AddRow(new string[] {
                        "Oberflächenverbesserung",
                        "Fahrbahn",
                        "60",
                        "60",
                        "60",
                        "60",
                        "60",
                        "60"});
#line 22
testRunner.And("ich folgende Standard-Kosten-Werte für Massnahmenvorschläge je Belastungskategori" +
                    "e anpasse:", ((string)(null)), table3, "Und ");
#line 25
testRunner.And("ich ein neues Logo für meinen Mandanten hochlade", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line 26
testRunner.Then("stehen die veränderten Parameter nur meinem Mandanten zur Verfügung.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Das System wendet die definierten Systemparameter für die Auswertungen des Mandan" +
            "ten an", new string[] {
                "Manuell"}, SourceLine=30)]
        public virtual void DasSystemWendetDieDefiniertenSystemparameterFurDieAuswertungenDesMandantenAn()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Das System wendet die definierten Systemparameter für die Auswertungen des Mandan" +
                    "ten an", new string[] {
                        "Manuell"});
#line 31
this.ScenarioSetup(scenarioInfo);
#line 8
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Wenn Systemparameter verändert werden, so soll das keine Auswirkung auf die Auswe" +
            "rtungen abgeschlossener Jahre haben", new string[] {
                "Manuell"}, SourceLine=35)]
        public virtual void WennSystemparameterVerandertWerdenSoSollDasKeineAuswirkungAufDieAuswertungenAbgeschlossenerJahreHaben()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Wenn Systemparameter verändert werden, so soll das keine Auswirkung auf die Auswe" +
                    "rtungen abgeschlossener Jahre haben", new string[] {
                        "Manuell"});
#line 36
this.ScenarioSetup(scenarioInfo);
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Systemparameter",
                        "IA",
                        "IB",
                        "IC",
                        "II",
                        "III",
                        "IV"});
            table4.AddRow(new string[] {
                        "Wiederbeschaffungswert Fläche Fahrbahn",
                        "430",
                        "400",
                        "160",
                        "380",
                        "430",
                        "340"});
            table4.AddRow(new string[] {
                        "Alterungsbeiwert I",
                        "1,5",
                        "1,5",
                        "1,5",
                        "1,8",
                        "2,2",
                        "2,6"});
#line 37
testRunner.When("ich folgende Systemparameter je Belastungskategorie anpasse:", ((string)(null)), table4, "Wenn ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Massnahmenvorschlag",
                        "Typ",
                        "IA",
                        "IB",
                        "IC",
                        "II",
                        "III",
                        "IV"});
            table5.AddRow(new string[] {
                        "Oberflächenverbesserung",
                        "Fahrbahn",
                        "60",
                        "60",
                        "60",
                        "60",
                        "60",
                        "60"});
#line 41
testRunner.And("ich folgende Standard-Kosten-Werte für Massnahmenvorschläge je Belastungskategori" +
                    "e anpasse:", ((string)(null)), table5, "Und ");
#line 44
testRunner.Then("sind alle Auswertungen abgeschlossener Jahre aller Mandanten unverändert.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("A14 - Ausgewählte Systemparameter für meinen Mandanten pflegen")]
    public partial class A14_AusgewahlteSystemparameterFurMeinenMandantenPflegenFeature_NUnit
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "A14.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("de-AT"), "A14 - Ausgewählte Systemparameter für meinen Mandanten pflegen", "\tAls Benutzeradministrator\r\n\twill ich ausgewählte Systemparameter für meinen Mand" +
                    "anten pflegen\r\n\tdamit ich eine zentrale Steuerungsmöglichkeit wichtiger Basisein" +
                    "stellungen habe", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 8
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mandant",
                        "Modus"});
            table1.AddRow(new string[] {
                        "Mandant_1",
                        "strassennamen"});
#line 9
testRunner.Given("folgende Einstellungen existieren:", ((string)(null)), table1, "Gegeben sei ");
#line 12
testRunner.And("ich bin Benutzeradministrator von Mandant_1 bin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Der Benutzeradministrator kann ausgewählte Systemparameter, die für seinen Mandan" +
            "ten angewendet werden, pflegen")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void DerBenutzeradministratorKannAusgewahlteSystemparameterDieFurSeinenMandantenAngewendetWerdenPflegen()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Benutzeradministrator kann ausgewählte Systemparameter, die für seinen Mandan" +
                    "ten angewendet werden, pflegen", new string[] {
                        "Manuell"});
#line 17
this.ScenarioSetup(scenarioInfo);
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Systemparameter",
                        "IA",
                        "IB",
                        "IC",
                        "II",
                        "III",
                        "IV"});
            table2.AddRow(new string[] {
                        "Wiederbeschaffungswert Fläche Fahrbahn",
                        "430",
                        "400",
                        "160",
                        "380",
                        "430",
                        "340"});
            table2.AddRow(new string[] {
                        "Alterungsbeiwert I",
                        "1,5",
                        "1,5",
                        "1,5",
                        "1,8",
                        "2,2",
                        "2,6"});
#line 18
testRunner.When("ich folgende Systemparameter je Belastungskategorie anpasse:", ((string)(null)), table2, "Wenn ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Massnahmenvorschlag",
                        "Typ",
                        "IA",
                        "IB",
                        "IC",
                        "II",
                        "III",
                        "IV"});
            table3.AddRow(new string[] {
                        "Oberflächenverbesserung",
                        "Fahrbahn",
                        "60",
                        "60",
                        "60",
                        "60",
                        "60",
                        "60"});
#line 22
testRunner.And("ich folgende Standard-Kosten-Werte für Massnahmenvorschläge je Belastungskategori" +
                    "e anpasse:", ((string)(null)), table3, "Und ");
#line 25
testRunner.And("ich ein neues Logo für meinen Mandanten hochlade", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line 26
testRunner.Then("stehen die veränderten Parameter nur meinem Mandanten zur Verfügung.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Das System wendet die definierten Systemparameter für die Auswertungen des Mandan" +
            "ten an")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void DasSystemWendetDieDefiniertenSystemparameterFurDieAuswertungenDesMandantenAn()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Das System wendet die definierten Systemparameter für die Auswertungen des Mandan" +
                    "ten an", new string[] {
                        "Manuell"});
#line 31
this.ScenarioSetup(scenarioInfo);
#line 8
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Wenn Systemparameter verändert werden, so soll das keine Auswirkung auf die Auswe" +
            "rtungen abgeschlossener Jahre haben")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void WennSystemparameterVerandertWerdenSoSollDasKeineAuswirkungAufDieAuswertungenAbgeschlossenerJahreHaben()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Wenn Systemparameter verändert werden, so soll das keine Auswirkung auf die Auswe" +
                    "rtungen abgeschlossener Jahre haben", new string[] {
                        "Manuell"});
#line 36
this.ScenarioSetup(scenarioInfo);
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Systemparameter",
                        "IA",
                        "IB",
                        "IC",
                        "II",
                        "III",
                        "IV"});
            table4.AddRow(new string[] {
                        "Wiederbeschaffungswert Fläche Fahrbahn",
                        "430",
                        "400",
                        "160",
                        "380",
                        "430",
                        "340"});
            table4.AddRow(new string[] {
                        "Alterungsbeiwert I",
                        "1,5",
                        "1,5",
                        "1,5",
                        "1,8",
                        "2,2",
                        "2,6"});
#line 37
testRunner.When("ich folgende Systemparameter je Belastungskategorie anpasse:", ((string)(null)), table4, "Wenn ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Massnahmenvorschlag",
                        "Typ",
                        "IA",
                        "IB",
                        "IC",
                        "II",
                        "III",
                        "IV"});
            table5.AddRow(new string[] {
                        "Oberflächenverbesserung",
                        "Fahrbahn",
                        "60",
                        "60",
                        "60",
                        "60",
                        "60",
                        "60"});
#line 41
testRunner.And("ich folgende Standard-Kosten-Werte für Massnahmenvorschläge je Belastungskategori" +
                    "e anpasse:", ((string)(null)), table5, "Und ");
#line 44
testRunner.Then("sind alle Auswertungen abgeschlossener Jahre aller Mandanten unverändert.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
