// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ASTRA.EMSG.IntegrationTests.Features.A_Administration
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("A6 - ausgewählte Einstellungen einzelner Organisationen verwalten", Description="\tAls Applikationsadministrator,\r\n\twill ich ausgewählte Einstellungen einzelner Or" +
        "ganisationen (Mandanten) verwalten\r\n\tdamit ich eine zentrale Steuerungsmöglichke" +
        "it wichtiger Basiseinstellungen habe", SourceFile="Features\\A - Administration\\A6.feature", SourceLine=0)]
    public partial class A6_AusgewahlteEinstellungenEinzelnerOrganisationenVerwaltenFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "A6.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("de-AT"), "A6 - ausgewählte Einstellungen einzelner Organisationen verwalten", "\tAls Applikationsadministrator,\r\n\twill ich ausgewählte Einstellungen einzelner Or" +
                    "ganisationen (Mandanten) verwalten\r\n\tdamit ich eine zentrale Steuerungsmöglichke" +
                    "it wichtiger Basiseinstellungen habe", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line 7
testRunner.Given("ich bin Applikationsadministrator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Gegeben sei ");
#line 8
testRunner.And("es gibt die OwnerID G161-ZH", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Applikationsadministrator kann ausgewählte Einstellungen für die EMSG Mandant" +
            "en verwalten", new string[] {
                "Manuell"}, SourceLine=12)]
        public virtual void DerApplikationsadministratorKannAusgewahlteEinstellungenFurDieEMSGMandantenVerwalten()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Applikationsadministrator kann ausgewählte Einstellungen für die EMSG Mandant" +
                    "en verwalten", new string[] {
                        "Manuell"});
#line 13
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 14
testRunner.Then("ist das Menu für Einstellungen für die EMSG Mandanten verfügbar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Applikationsadministrator kann einem Mandanten eine Owner ID (der Achsen) zuo" +
            "rdnen", new string[] {
                "Manuell"}, SourceLine=18)]
        public virtual void DerApplikationsadministratorKannEinemMandantenEineOwnerIDDerAchsenZuordnen()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Applikationsadministrator kann einem Mandanten eine Owner ID (der Achsen) zuo" +
                    "rdnen", new string[] {
                        "Manuell"});
#line 19
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 20
testRunner.Given("die OwnerID G161-ZH ist noch keinen Mandantem zugeordnet", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Gegeben sei ");
#line 21
testRunner.When("ich nach der Gemeindenummer 161 suche", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line 22
testRunner.And("ich für diese Gemeinde die OwnerID G161-ZH eintrage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line 23
testRunner.Then("sieht der Mandant 161 (Zollikon) die Achsen seiner Gemeinde", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Das System stellt sicher, dass die Owner ID, die vom Applikationsadministrator ei" +
            "ngegeben wird, exisitiert", new string[] {
                "Manuell"}, SourceLine=27)]
        public virtual void DasSystemStelltSicherDassDieOwnerIDDieVomApplikationsadministratorEingegebenWirdExisitiert()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Das System stellt sicher, dass die Owner ID, die vom Applikationsadministrator ei" +
                    "ngegeben wird, exisitiert", new string[] {
                        "Manuell"});
#line 28
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 29
testRunner.Given("es gibt die OwnerID 666 nicht", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Gegeben sei ");
#line 30
testRunner.When("ich nach der Gemeindenummer 161 suche", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line 31
testRunner.And("ich für diese Gemeinde die OwnerID 666 eintrage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line 32
testRunner.Then("erscheint eine Fehlermeldung", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Das System stellt sicher, dass eine Owner ID nur einem Mandanten zugeordnet wurde" +
            "", new string[] {
                "Manuell"}, SourceLine=36)]
        public virtual void DasSystemStelltSicherDassEineOwnerIDNurEinemMandantenZugeordnetWurde()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Das System stellt sicher, dass eine Owner ID nur einem Mandanten zugeordnet wurde" +
                    "", new string[] {
                        "Manuell"});
#line 37
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 38
testRunner.Given("die OwnerID G161-ZH ist bereits einem Mandanten zugeordnet", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Gegeben sei ");
#line 39
testRunner.When("ich nach der Gemeindenummer 261 suche", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line 40
testRunner.And("ich für diese Gemeinde die OwnerID G161-ZH eintrage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line 41
testRunner.Then("erscheint eine Fehlermeldung", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("A6 - ausgewählte Einstellungen einzelner Organisationen verwalten")]
    public partial class A6_AusgewahlteEinstellungenEinzelnerOrganisationenVerwaltenFeature_NUnit
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "A6.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("de-AT"), "A6 - ausgewählte Einstellungen einzelner Organisationen verwalten", "\tAls Applikationsadministrator,\r\n\twill ich ausgewählte Einstellungen einzelner Or" +
                    "ganisationen (Mandanten) verwalten\r\n\tdamit ich eine zentrale Steuerungsmöglichke" +
                    "it wichtiger Basiseinstellungen habe", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line 7
testRunner.Given("ich bin Applikationsadministrator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Gegeben sei ");
#line 8
testRunner.And("es gibt die OwnerID G161-ZH", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Der Applikationsadministrator kann ausgewählte Einstellungen für die EMSG Mandant" +
            "en verwalten")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void DerApplikationsadministratorKannAusgewahlteEinstellungenFurDieEMSGMandantenVerwalten()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Applikationsadministrator kann ausgewählte Einstellungen für die EMSG Mandant" +
                    "en verwalten", new string[] {
                        "Manuell"});
#line 13
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 14
testRunner.Then("ist das Menu für Einstellungen für die EMSG Mandanten verfügbar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Der Applikationsadministrator kann einem Mandanten eine Owner ID (der Achsen) zuo" +
            "rdnen")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void DerApplikationsadministratorKannEinemMandantenEineOwnerIDDerAchsenZuordnen()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Applikationsadministrator kann einem Mandanten eine Owner ID (der Achsen) zuo" +
                    "rdnen", new string[] {
                        "Manuell"});
#line 19
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 20
testRunner.Given("die OwnerID G161-ZH ist noch keinen Mandantem zugeordnet", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Gegeben sei ");
#line 21
testRunner.When("ich nach der Gemeindenummer 161 suche", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line 22
testRunner.And("ich für diese Gemeinde die OwnerID G161-ZH eintrage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line 23
testRunner.Then("sieht der Mandant 161 (Zollikon) die Achsen seiner Gemeinde", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Das System stellt sicher, dass die Owner ID, die vom Applikationsadministrator ei" +
            "ngegeben wird, exisitiert")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void DasSystemStelltSicherDassDieOwnerIDDieVomApplikationsadministratorEingegebenWirdExisitiert()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Das System stellt sicher, dass die Owner ID, die vom Applikationsadministrator ei" +
                    "ngegeben wird, exisitiert", new string[] {
                        "Manuell"});
#line 28
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 29
testRunner.Given("es gibt die OwnerID 666 nicht", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Gegeben sei ");
#line 30
testRunner.When("ich nach der Gemeindenummer 161 suche", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line 31
testRunner.And("ich für diese Gemeinde die OwnerID 666 eintrage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line 32
testRunner.Then("erscheint eine Fehlermeldung", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Das System stellt sicher, dass eine Owner ID nur einem Mandanten zugeordnet wurde" +
            "")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void DasSystemStelltSicherDassEineOwnerIDNurEinemMandantenZugeordnetWurde()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Das System stellt sicher, dass eine Owner ID nur einem Mandanten zugeordnet wurde" +
                    "", new string[] {
                        "Manuell"});
#line 37
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 38
testRunner.Given("die OwnerID G161-ZH ist bereits einem Mandanten zugeordnet", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Gegeben sei ");
#line 39
testRunner.When("ich nach der Gemeindenummer 261 suche", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line 40
testRunner.And("ich für diese Gemeinde die OwnerID G161-ZH eintrage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line 41
testRunner.Then("erscheint eine Fehlermeldung", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
