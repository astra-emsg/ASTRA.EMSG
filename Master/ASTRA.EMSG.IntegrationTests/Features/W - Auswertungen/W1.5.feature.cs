// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ASTRA.EMSG.IntegrationTests.Features.W_Auswertungen
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("W1.5 - Eine Karte mit Strassenabschnitten, symbolisiert nach Belastungskategorien" +
        " erhalten", Description="\tAls Data-Reader\r\n\twill ich eine Karte mit Strassenabschnitten, symbolisiert nach" +
        " Belastungskategorien erhalten\r\n\tdamit ich für Entscheidungsträger meiner Gemein" +
        "de eine Informationsbasis habe und einen Überblick zu meinem Inventar erhalte", SourceFile="Features\\W - Auswertungen\\W1.5.feature", SourceLine=0)]
    public partial class W1_5_EineKarteMitStrassenabschnittenSymbolisiertNachBelastungskategorienErhaltenFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "W1.5.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("de-AT"), "W1.5 - Eine Karte mit Strassenabschnitten, symbolisiert nach Belastungskategorien" +
                    " erhalten", "\tAls Data-Reader\r\n\twill ich eine Karte mit Strassenabschnitten, symbolisiert nach" +
                    " Belastungskategorien erhalten\r\n\tdamit ich für Entscheidungsträger meiner Gemein" +
                    "de eine Informationsbasis habe und einen Überblick zu meinem Inventar erhalte", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mandant",
                        "Modus"});
            table1.AddRow(new string[] {
                        "Mandant_1",
                        "gis"});
#line 7
testRunner.Given("folgende Einstellungen existieren:", ((string)(null)), table1, "Gegeben sei ");
#line 11
 testRunner.And("ich bin Data-Reader von \'Mandant_1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "ID",
                        "Strassenname",
                        "LaengenkorrekturAnfang",
                        "LaengenkorrekturEnde",
                        "Belastungskategorie",
                        "Belag",
                        "BreiteFahrbahn",
                        "Trottoir",
                        "BreiteTrottoirLinks",
                        "BreiteTrottoirRechts",
                        "Strasseneigentümer",
                        "Ortsbezeichnung",
                        "Validationsfehler"});
            table2.AddRow(new string[] {
                        "1",
                        "Bahnstrasse",
                        "-",
                        "-",
                        "IC",
                        "Beton",
                        "5,75",
                        "KeinTrottoir",
                        "-",
                        "-",
                        "Private",
                        "Mitterndorf",
                        "Nein"});
            table2.AddRow(new string[] {
                        "2",
                        "Moosgasse",
                        "0",
                        "2",
                        "IB",
                        "Asphalt",
                        "5,50",
                        "BeideSeiten",
                        "1,5",
                        "2",
                        "Gemeinde",
                        "Ortsteil Mossbrunn",
                        "Nein"});
            table2.AddRow(new string[] {
                        "3",
                        "Hauptstrasse",
                        "2,25",
                        "1,5",
                        "II",
                        "Beton",
                        "7",
                        "NochNichtErfasst",
                        "-",
                        "-",
                        "Korporation",
                        "Ortsteil Gramatneusiedl",
                        "Nein"});
            table2.AddRow(new string[] {
                        "4",
                        "Hauptstrasse",
                        "2",
                        "-",
                        "II",
                        "Beton",
                        "7",
                        "Links",
                        "2,1",
                        "-",
                        "Gemeinde",
                        "Ortsteil Gramatneusiedl",
                        "Nein"});
#line 12
 testRunner.And("folgende Netzinformationen existieren:", ((string)(null)), table2, "Und ");
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Reader kann die gewünschte Auswertung selektieren", new string[] {
                "Manuell"}, SourceLine=21)]
        public virtual void DerData_ReaderKannDieGewunschteAuswertungSelektieren()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Data-Reader kann die gewünschte Auswertung selektieren", new string[] {
                        "Manuell"});
#line 22
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Reader muss ein Jahr auswählen, für das vom System eine Inventarauswertu" +
            "ng generiert werden soll", new string[] {
                "Manuell"}, SourceLine=26)]
        public virtual void DerData_ReaderMussEinJahrAuswahlenFurDasVomSystemEineInventarauswertungGeneriertWerdenSoll()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Data-Reader muss ein Jahr auswählen, für das vom System eine Inventarauswertu" +
                    "ng generiert werden soll", new string[] {
                        "Manuell"});
#line 27
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Vom System wird das Jahr des letzen Jahresabschlusses als default Wert vorselekti" +
            "ert", new string[] {
                "Manuell"}, SourceLine=31)]
        public virtual void VomSystemWirdDasJahrDesLetzenJahresabschlussesAlsDefaultWertVorselektiert()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Vom System wird das Jahr des letzen Jahresabschlusses als default Wert vorselekti" +
                    "ert", new string[] {
                        "Manuell"});
#line 32
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Reader sieht auf der Karte die Strassenabschnitte farblich symbolisiert " +
            "nach deren Belastungskategorie", new string[] {
                "Manuell"}, SourceLine=36)]
        public virtual void DerData_ReaderSiehtAufDerKarteDieStrassenabschnitteFarblichSymbolisiertNachDerenBelastungskategorie()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Data-Reader sieht auf der Karte die Strassenabschnitte farblich symbolisiert " +
                    "nach deren Belastungskategorie", new string[] {
                        "Manuell"});
#line 37
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Belastungskategorie",
                        "Farbe",
                        "Kommentar"});
            table3.AddRow(new string[] {
                        "IA",
                        "#b7e9b1",
                        "(hellgrün)"});
            table3.AddRow(new string[] {
                        "IB",
                        "#90d188",
                        "(grün)"});
            table3.AddRow(new string[] {
                        "IC",
                        "#60ab57",
                        "(dunkelgrün)"});
            table3.AddRow(new string[] {
                        "II",
                        "#38aabb",
                        "(türkis)"});
            table3.AddRow(new string[] {
                        "III",
                        "#3882bb",
                        "(hellblau)"});
            table3.AddRow(new string[] {
                        "IV",
                        "#194e95",
                        "(dunkelblau)"});
#line 38
testRunner.Given("folgende Belastungskategorien und Farben sind definiert:", ((string)(null)), table3, "Gegeben sei ");
#line 47
testRunner.And("ich öffne die Seite Auswertungen\\Strassenabschnitte Geographisch", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "ID",
                        "Strassenname",
                        "LaengenkorrekturAnfang",
                        "LaengenkorrekturEnde",
                        "Belastungskategorie",
                        "Belag",
                        "BreiteFahrbahn",
                        "Trottoir",
                        "BreiteTrottoirLinks",
                        "BreiteTrottoirRechts",
                        "Strasseneigentümer",
                        "Ortsbezeichnung",
                        "Kommentar"});
            table4.AddRow(new string[] {
                        "1",
                        "Bahnstrasse",
                        "-",
                        "-",
                        "IC",
                        "Beton",
                        "5,75",
                        "KeinTrottoir",
                        "-",
                        "-",
                        "Private",
                        "Mitterndorf",
                        "Graphenfarbe: #60ab57 (dunkelgrün)"});
            table4.AddRow(new string[] {
                        "2",
                        "Moosgasse",
                        "0",
                        "2",
                        "IB",
                        "Asphalt",
                        "5,50",
                        "BeideSeiten",
                        "1,5",
                        "2",
                        "Gemeinde",
                        "Ortsteil Mossbrunn",
                        "Graphenfarbe: #90d188 (grün)"});
            table4.AddRow(new string[] {
                        "3",
                        "Hauptstrasse",
                        "2,25",
                        "1,5",
                        "II",
                        "Beton",
                        "7",
                        "NochNichtErfasst",
                        "-",
                        "-",
                        "Korporation",
                        "Ortsteil Gramatneusiedl",
                        "Graphenfarbe: #38aabb (türkis)"});
            table4.AddRow(new string[] {
                        "4",
                        "Hauptstrasse",
                        "2",
                        "-",
                        "II",
                        "Beton",
                        "7",
                        "Links",
                        "2,1",
                        "-",
                        "Gemeinde",
                        "Ortsteil Gramatneusiedl",
                        "Graphenfarbe: #38aabb (türkis)"});
#line 48
testRunner.Then("sind folgende Informationen sichtbar:", ((string)(null)), table4, "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Reader kann die darzustellenden Strassenabschnitte über einen Filter auf" +
            " den Strasseneigentümer einschränken", new string[] {
                "Manuell"}, SourceLine=57)]
        public virtual void DerData_ReaderKannDieDarzustellendenStrassenabschnitteUberEinenFilterAufDenStrasseneigentumerEinschranken()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Data-Reader kann die darzustellenden Strassenabschnitte über einen Filter auf" +
                    " den Strasseneigentümer einschränken", new string[] {
                        "Manuell"});
#line 58
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 59
testRunner.Given("ich öffne die Seite Auswertungen\\Strassenabschnitte Geographisch", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Gegeben sei ");
#line 60
testRunner.When("ich den Filter auf Eigentümer: \"Gemeinde\" setze", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "ID",
                        "Strassenname",
                        "LaengenkorrekturAnfang",
                        "LaengenkorrekturEnde",
                        "Belastungskategorie",
                        "Belag",
                        "BreiteFahrbahn",
                        "Trottoir",
                        "BreiteTrottoirLinks",
                        "BreiteTrottoirRechts",
                        "Strasseneigentümer",
                        "Ortsbezeichnung"});
            table5.AddRow(new string[] {
                        "2",
                        "Moosgasse",
                        "0",
                        "2",
                        "IB",
                        "Asphalt",
                        "5,50",
                        "BeideSeiten",
                        "1,5",
                        "2",
                        "Gemeinde",
                        "Ortsteil Mossbrunn"});
            table5.AddRow(new string[] {
                        "4",
                        "Hauptstrasse",
                        "2",
                        "-",
                        "II",
                        "Beton",
                        "7",
                        "Links",
                        "2,1",
                        "-",
                        "Gemeinde",
                        "Ortsteil Gramatneusiedl"});
#line 61
testRunner.Then("sind folgende Informationen sichtbar:", ((string)(null)), table5, "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Reader kann die aktuelle Ansicht als PDF exportieren", new string[] {
                "Manuell"}, SourceLine=67)]
        public virtual void DerData_ReaderKannDieAktuelleAnsichtAlsPDFExportieren()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Data-Reader kann die aktuelle Ansicht als PDF exportieren", new string[] {
                        "Manuell"});
#line 68
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("W1.5 - Eine Karte mit Strassenabschnitten, symbolisiert nach Belastungskategorien" +
        " erhalten")]
    public partial class W1_5_EineKarteMitStrassenabschnittenSymbolisiertNachBelastungskategorienErhaltenFeature_NUnit
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "W1.5.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("de-AT"), "W1.5 - Eine Karte mit Strassenabschnitten, symbolisiert nach Belastungskategorien" +
                    " erhalten", "\tAls Data-Reader\r\n\twill ich eine Karte mit Strassenabschnitten, symbolisiert nach" +
                    " Belastungskategorien erhalten\r\n\tdamit ich für Entscheidungsträger meiner Gemein" +
                    "de eine Informationsbasis habe und einen Überblick zu meinem Inventar erhalte", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mandant",
                        "Modus"});
            table1.AddRow(new string[] {
                        "Mandant_1",
                        "gis"});
#line 7
testRunner.Given("folgende Einstellungen existieren:", ((string)(null)), table1, "Gegeben sei ");
#line 11
 testRunner.And("ich bin Data-Reader von \'Mandant_1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "ID",
                        "Strassenname",
                        "LaengenkorrekturAnfang",
                        "LaengenkorrekturEnde",
                        "Belastungskategorie",
                        "Belag",
                        "BreiteFahrbahn",
                        "Trottoir",
                        "BreiteTrottoirLinks",
                        "BreiteTrottoirRechts",
                        "Strasseneigentümer",
                        "Ortsbezeichnung",
                        "Validationsfehler"});
            table2.AddRow(new string[] {
                        "1",
                        "Bahnstrasse",
                        "-",
                        "-",
                        "IC",
                        "Beton",
                        "5,75",
                        "KeinTrottoir",
                        "-",
                        "-",
                        "Private",
                        "Mitterndorf",
                        "Nein"});
            table2.AddRow(new string[] {
                        "2",
                        "Moosgasse",
                        "0",
                        "2",
                        "IB",
                        "Asphalt",
                        "5,50",
                        "BeideSeiten",
                        "1,5",
                        "2",
                        "Gemeinde",
                        "Ortsteil Mossbrunn",
                        "Nein"});
            table2.AddRow(new string[] {
                        "3",
                        "Hauptstrasse",
                        "2,25",
                        "1,5",
                        "II",
                        "Beton",
                        "7",
                        "NochNichtErfasst",
                        "-",
                        "-",
                        "Korporation",
                        "Ortsteil Gramatneusiedl",
                        "Nein"});
            table2.AddRow(new string[] {
                        "4",
                        "Hauptstrasse",
                        "2",
                        "-",
                        "II",
                        "Beton",
                        "7",
                        "Links",
                        "2,1",
                        "-",
                        "Gemeinde",
                        "Ortsteil Gramatneusiedl",
                        "Nein"});
#line 12
 testRunner.And("folgende Netzinformationen existieren:", ((string)(null)), table2, "Und ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Der Data-Reader kann die gewünschte Auswertung selektieren")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void DerData_ReaderKannDieGewunschteAuswertungSelektieren()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Data-Reader kann die gewünschte Auswertung selektieren", new string[] {
                        "Manuell"});
#line 22
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Der Data-Reader muss ein Jahr auswählen, für das vom System eine Inventarauswertu" +
            "ng generiert werden soll")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void DerData_ReaderMussEinJahrAuswahlenFurDasVomSystemEineInventarauswertungGeneriertWerdenSoll()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Data-Reader muss ein Jahr auswählen, für das vom System eine Inventarauswertu" +
                    "ng generiert werden soll", new string[] {
                        "Manuell"});
#line 27
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Vom System wird das Jahr des letzen Jahresabschlusses als default Wert vorselekti" +
            "ert")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void VomSystemWirdDasJahrDesLetzenJahresabschlussesAlsDefaultWertVorselektiert()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Vom System wird das Jahr des letzen Jahresabschlusses als default Wert vorselekti" +
                    "ert", new string[] {
                        "Manuell"});
#line 32
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Der Data-Reader sieht auf der Karte die Strassenabschnitte farblich symbolisiert " +
            "nach deren Belastungskategorie")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void DerData_ReaderSiehtAufDerKarteDieStrassenabschnitteFarblichSymbolisiertNachDerenBelastungskategorie()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Data-Reader sieht auf der Karte die Strassenabschnitte farblich symbolisiert " +
                    "nach deren Belastungskategorie", new string[] {
                        "Manuell"});
#line 37
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Belastungskategorie",
                        "Farbe",
                        "Kommentar"});
            table3.AddRow(new string[] {
                        "IA",
                        "#b7e9b1",
                        "(hellgrün)"});
            table3.AddRow(new string[] {
                        "IB",
                        "#90d188",
                        "(grün)"});
            table3.AddRow(new string[] {
                        "IC",
                        "#60ab57",
                        "(dunkelgrün)"});
            table3.AddRow(new string[] {
                        "II",
                        "#38aabb",
                        "(türkis)"});
            table3.AddRow(new string[] {
                        "III",
                        "#3882bb",
                        "(hellblau)"});
            table3.AddRow(new string[] {
                        "IV",
                        "#194e95",
                        "(dunkelblau)"});
#line 38
testRunner.Given("folgende Belastungskategorien und Farben sind definiert:", ((string)(null)), table3, "Gegeben sei ");
#line 47
testRunner.And("ich öffne die Seite Auswertungen\\Strassenabschnitte Geographisch", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "ID",
                        "Strassenname",
                        "LaengenkorrekturAnfang",
                        "LaengenkorrekturEnde",
                        "Belastungskategorie",
                        "Belag",
                        "BreiteFahrbahn",
                        "Trottoir",
                        "BreiteTrottoirLinks",
                        "BreiteTrottoirRechts",
                        "Strasseneigentümer",
                        "Ortsbezeichnung",
                        "Kommentar"});
            table4.AddRow(new string[] {
                        "1",
                        "Bahnstrasse",
                        "-",
                        "-",
                        "IC",
                        "Beton",
                        "5,75",
                        "KeinTrottoir",
                        "-",
                        "-",
                        "Private",
                        "Mitterndorf",
                        "Graphenfarbe: #60ab57 (dunkelgrün)"});
            table4.AddRow(new string[] {
                        "2",
                        "Moosgasse",
                        "0",
                        "2",
                        "IB",
                        "Asphalt",
                        "5,50",
                        "BeideSeiten",
                        "1,5",
                        "2",
                        "Gemeinde",
                        "Ortsteil Mossbrunn",
                        "Graphenfarbe: #90d188 (grün)"});
            table4.AddRow(new string[] {
                        "3",
                        "Hauptstrasse",
                        "2,25",
                        "1,5",
                        "II",
                        "Beton",
                        "7",
                        "NochNichtErfasst",
                        "-",
                        "-",
                        "Korporation",
                        "Ortsteil Gramatneusiedl",
                        "Graphenfarbe: #38aabb (türkis)"});
            table4.AddRow(new string[] {
                        "4",
                        "Hauptstrasse",
                        "2",
                        "-",
                        "II",
                        "Beton",
                        "7",
                        "Links",
                        "2,1",
                        "-",
                        "Gemeinde",
                        "Ortsteil Gramatneusiedl",
                        "Graphenfarbe: #38aabb (türkis)"});
#line 48
testRunner.Then("sind folgende Informationen sichtbar:", ((string)(null)), table4, "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Der Data-Reader kann die darzustellenden Strassenabschnitte über einen Filter auf" +
            " den Strasseneigentümer einschränken")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void DerData_ReaderKannDieDarzustellendenStrassenabschnitteUberEinenFilterAufDenStrasseneigentumerEinschranken()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Data-Reader kann die darzustellenden Strassenabschnitte über einen Filter auf" +
                    " den Strasseneigentümer einschränken", new string[] {
                        "Manuell"});
#line 58
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 59
testRunner.Given("ich öffne die Seite Auswertungen\\Strassenabschnitte Geographisch", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Gegeben sei ");
#line 60
testRunner.When("ich den Filter auf Eigentümer: \"Gemeinde\" setze", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "ID",
                        "Strassenname",
                        "LaengenkorrekturAnfang",
                        "LaengenkorrekturEnde",
                        "Belastungskategorie",
                        "Belag",
                        "BreiteFahrbahn",
                        "Trottoir",
                        "BreiteTrottoirLinks",
                        "BreiteTrottoirRechts",
                        "Strasseneigentümer",
                        "Ortsbezeichnung"});
            table5.AddRow(new string[] {
                        "2",
                        "Moosgasse",
                        "0",
                        "2",
                        "IB",
                        "Asphalt",
                        "5,50",
                        "BeideSeiten",
                        "1,5",
                        "2",
                        "Gemeinde",
                        "Ortsteil Mossbrunn"});
            table5.AddRow(new string[] {
                        "4",
                        "Hauptstrasse",
                        "2",
                        "-",
                        "II",
                        "Beton",
                        "7",
                        "Links",
                        "2,1",
                        "-",
                        "Gemeinde",
                        "Ortsteil Gramatneusiedl"});
#line 61
testRunner.Then("sind folgende Informationen sichtbar:", ((string)(null)), table5, "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Der Data-Reader kann die aktuelle Ansicht als PDF exportieren")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void DerData_ReaderKannDieAktuelleAnsichtAlsPDFExportieren()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Data-Reader kann die aktuelle Ansicht als PDF exportieren", new string[] {
                        "Manuell"});
#line 68
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
