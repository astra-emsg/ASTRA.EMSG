// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ASTRA.EMSG.IntegrationTests.Features.W_Auswertungen
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("W1.7 - Eine Tabelle mit Menge pro Belastungskategorie erhalten", Description="\tAls Data-Reader\r\n\twill ich eine Tabelle mit Menge pro Belastungskategorie erhalt" +
        "en\r\n\tdamit ich für Entscheidungsträger meiner Gemeinde eine Informationsbasis ha" +
        "be und einen Überblick zu meinem Inventar erhalte", SourceFile="Features\\W - Auswertungen\\W1.7.feature", SourceLine=0)]
    public partial class W1_7_EineTabelleMitMengeProBelastungskategorieErhaltenFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "W1.7.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("de-AT"), "W1.7 - Eine Tabelle mit Menge pro Belastungskategorie erhalten", "\tAls Data-Reader\r\n\twill ich eine Tabelle mit Menge pro Belastungskategorie erhalt" +
                    "en\r\n\tdamit ich für Entscheidungsträger meiner Gemeinde eine Informationsbasis ha" +
                    "be und einen Überblick zu meinem Inventar erhalte", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Reader kann die gewünschte Auswertung selektieren", new string[] {
                "Manuell"}, SourceLine=8)]
        public virtual void DerData_ReaderKannDieGewunschteAuswertungSelektieren()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Data-Reader kann die gewünschte Auswertung selektieren", new string[] {
                        "Manuell"});
#line 9
this.ScenarioSetup(scenarioInfo);
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Reader kann ein Jahr auswählen, für das vom System eine Inventarauswertu" +
            "ng generiert werden soll", new string[] {
                "Manuell"}, SourceLine=13)]
        public virtual void DerData_ReaderKannEinJahrAuswahlenFurDasVomSystemEineInventarauswertungGeneriertWerdenSoll()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Data-Reader kann ein Jahr auswählen, für das vom System eine Inventarauswertu" +
                    "ng generiert werden soll", new string[] {
                        "Manuell"});
#line 14
this.ScenarioSetup(scenarioInfo);
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Vom System wird das Jahr des letzten Jahresabschlusses als default Wert vorselekt" +
            "iert", new string[] {
                "Manuell"}, SourceLine=18)]
        public virtual void VomSystemWirdDasJahrDesLetztenJahresabschlussesAlsDefaultWertVorselektiert()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Vom System wird das Jahr des letzten Jahresabschlusses als default Wert vorselekt" +
                    "iert", new string[] {
                        "Manuell"});
#line 19
this.ScenarioSetup(scenarioInfo);
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void DasSystemLiefertEineTabelleMitMengenProBelastungskategorieDesMandantenSummarischerModus(string tF, string mandant, string mengenIA, string mengenIB, string mengenIC, string mengenII, string mengenIII, string mengenIV, string summe, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Automatisch"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Das System liefert eine Tabelle mit Mengen pro Belastungskategorie des Mandanten " +
                    "(summarischer Modus)", @__tags);
#line 24
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mandant",
                        "Modus",
                        "Mengentyp"});
            table1.AddRow(new string[] {
                        "Mandant_1",
                        "summarisch",
                        "Gesamtlänge"});
            table1.AddRow(new string[] {
                        "Mandant_2",
                        "summarisch",
                        "Gesamtfläche"});
#line 25
testRunner.Given("folgende Einstellungen existieren:", ((string)(null)), table1, "Gegeben sei ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Belastungskategorie",
                        "Menge Gesamtfläche"});
            table2.AddRow(new string[] {
                        "IA",
                        "107760"});
            table2.AddRow(new string[] {
                        "IB",
                        "5100"});
            table2.AddRow(new string[] {
                        "IC",
                        "795"});
            table2.AddRow(new string[] {
                        "II",
                        "2790000"});
            table2.AddRow(new string[] {
                        "III",
                        "2051200"});
            table2.AddRow(new string[] {
                        "IV",
                        "16200"});
#line 29
testRunner.And("für Mandant \'Mandant_1\' folgende summarische Zustands- und Netzinformationen exis" +
                    "tieren:", ((string)(null)), table2, "Und ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Belastungskategorie",
                        "Menge Gesamtfläche"});
            table3.AddRow(new string[] {
                        "IA",
                        "7950"});
            table3.AddRow(new string[] {
                        "IB",
                        "51000"});
            table3.AddRow(new string[] {
                        "IC",
                        "1077600"});
            table3.AddRow(new string[] {
                        "II",
                        "20512000"});
            table3.AddRow(new string[] {
                        "III",
                        "27900000"});
            table3.AddRow(new string[] {
                        "IV",
                        "162000"});
#line 37
testRunner.And("für Mandant \'Mandant_2\' folgende summarische Zustands- und Netzinformationen exis" +
                    "tieren:", ((string)(null)), table3, "Und ");
#line 45
testRunner.And(string.Format("ich habe alle Rollen für \'{0}\'", mandant), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line 46
testRunner.And("ich einen Jahresabschluss für das Jahr \'2010\' durchführe", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Filter",
                        "Filter Wert"});
            table4.AddRow(new string[] {
                        "Erfassungsperiode",
                        "2010"});
#line 47
testRunner.When("ich die Tabelle mit Mengen pro Belastungskategorie generiere", ((string)(null)), table4, "Wenn ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "BelastungskategorieTyp",
                        "Menge"});
            table5.AddRow(new string[] {
                        "IA",
                        string.Format("{0}", mengenIA)});
            table5.AddRow(new string[] {
                        "IB",
                        string.Format("{0}", mengenIB)});
            table5.AddRow(new string[] {
                        "IC",
                        string.Format("{0}", mengenIC)});
            table5.AddRow(new string[] {
                        "II",
                        string.Format("{0}", mengenII)});
            table5.AddRow(new string[] {
                        "III",
                        string.Format("{0}", mengenIII)});
            table5.AddRow(new string[] {
                        "IV",
                        string.Format("{0}", mengenIV)});
#line 50
testRunner.And("zeigt die Tabelle mit Mengen pro Belastungskategorie folgende Mengen:", ((string)(null)), table5, "Und ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Das System liefert eine Tabelle mit Mengen pro Belastungskategorie des Mandanten " +
            "(summarischer Modus), 1", new string[] {
                "Automatisch"}, SourceLine=60)]
        public virtual void DasSystemLiefertEineTabelleMitMengenProBelastungskategorieDesMandantenSummarischerModus_1()
        {
            this.DasSystemLiefertEineTabelleMitMengenProBelastungskategorieDesMandantenSummarischerModus("1", "Mandant_1", "107760", "5100", "795", "2790000", "2051200", "16200", "613975", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Das System liefert eine Tabelle mit Mengen pro Belastungskategorie des Mandanten " +
            "(summarischer Modus), 2", new string[] {
                "Automatisch"}, SourceLine=60)]
        public virtual void DasSystemLiefertEineTabelleMitMengenProBelastungskategorieDesMandantenSummarischerModus_2()
        {
            this.DasSystemLiefertEineTabelleMitMengenProBelastungskategorieDesMandantenSummarischerModus("2", "Mandant_2", "7950", "51000", "1077600", "20512000", "27900000", "162000", "49710550", ((string[])(null)));
#line hidden
        }
        
        public virtual void DasSystemLiefertEineTabelleMitMengenProBelastungskategorieDesMandantenStrassennamen_ModusGIS_Modus(
                    string tF, 
                    string referenzAuswertung, 
                    string mandant, 
                    string strasseneigentumer, 
                    string mengenIAFB, 
                    string mengenIBFB, 
                    string mengenICFB, 
                    string mengenIIFB, 
                    string mengenIIIFB, 
                    string mengenIVFB, 
                    string mengenIATR, 
                    string mengenIBTR, 
                    string mengenICTR, 
                    string mengenIITR, 
                    string mengenIIITR, 
                    string mengenIVTR, 
                    string summeFB, 
                    string summeTR, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Automatisch"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Das System liefert eine Tabelle mit Mengen pro Belastungskategorie des Mandanten " +
                    "(Strassennamen-Modus, GIS-Modus)", @__tags);
#line 65
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mandant",
                        "Modus"});
            table6.AddRow(new string[] {
                        "Mandant_4",
                        "strassennamen"});
            table6.AddRow(new string[] {
                        "Mandant_5",
                        "GIS"});
#line 66
testRunner.Given("folgende Einstellungen existieren:", ((string)(null)), table6, "Gegeben sei ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Belastungskategorie",
                        "BreiteFahrbahn",
                        "Länge",
                        "Trottoir",
                        "BreiteTrottoirLinks",
                        "BreiteTrottoirRechts"});
            table7.AddRow(new string[] {
                        "II",
                        "19,56",
                        "1800",
                        "KeinTrottoir",
                        "0",
                        "0"});
            table7.AddRow(new string[] {
                        "IV",
                        "19",
                        "5000",
                        "Links",
                        "2,32",
                        "0"});
            table7.AddRow(new string[] {
                        "III",
                        "20",
                        "2500",
                        "Rechts",
                        "0",
                        "2,90"});
            table7.AddRow(new string[] {
                        "II",
                        "18",
                        "1300",
                        "BeideSeiten",
                        "1,40",
                        "3"});
            table7.AddRow(new string[] {
                        "IC",
                        "8,45",
                        "800",
                        "NochNichtErfasst",
                        "-",
                        "-"});
            table7.AddRow(new string[] {
                        "IB",
                        "12,87",
                        "400",
                        "KeinTrottoir",
                        "0",
                        "0"});
#line 70
testRunner.And("für Mandant \'Mandant_4\' existieren folgende Netzinformationen:", ((string)(null)), table7, "Und ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Belastungskategorie",
                        "BreiteFahrbahn",
                        "Länge",
                        "Trottoir",
                        "BreiteTrottoirLinks",
                        "BreiteTrottoirRechts"});
            table8.AddRow(new string[] {
                        "II",
                        "19,56",
                        "1800",
                        "KeinTrottoir",
                        "0",
                        "0"});
            table8.AddRow(new string[] {
                        "III",
                        "19",
                        "5000",
                        "Links",
                        "2,32",
                        "0"});
            table8.AddRow(new string[] {
                        "IV",
                        "20",
                        "2500",
                        "Rechts",
                        "0",
                        "2,90"});
            table8.AddRow(new string[] {
                        "II",
                        "18",
                        "1300",
                        "BeideSeiten",
                        "1,40",
                        "3"});
            table8.AddRow(new string[] {
                        "IC",
                        "8,45",
                        "800",
                        "NochNichtErfasst",
                        "-",
                        "-"});
            table8.AddRow(new string[] {
                        "IB",
                        "12,87",
                        "400",
                        "KeinTrottoir",
                        "0",
                        "0"});
#line 78
testRunner.And("für Mandant \'Mandant_5\' existieren folgende GIS Netzinformationen:", ((string)(null)), table8, "Und ");
#line 86
testRunner.And(string.Format("ich habe alle Rollen für \'{0}\'", mandant), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line 87
testRunner.And("ich einen Jahresabschluss für das Jahr \'2010\' durchführe", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Filter",
                        "Filter Wert"});
            table9.AddRow(new string[] {
                        "Erfassungsperiode",
                        "2010"});
#line 88
testRunner.When("ich die Tabelle mit Mengen pro Belastungskategorie generiere", ((string)(null)), table9, "Wenn ");
#line 91
testRunner.Then(string.Format("ist das Ergebnis das gleiche wie in der Referenz Auswertung \'{0}\'", referenzAuswertung), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mandant",
                        "Mengen IA FB",
                        "Mengen IB FB",
                        "Mengen IC FB",
                        "Mengen II FB",
                        "Mengen III FB",
                        "Mengen IV FB",
                        "Mengen IA TR",
                        "Mengen IB TR",
                        "Mengen IC TR",
                        "Mengen II TR",
                        "Mengen III TR",
                        "Mengen IV TR"});
            table10.AddRow(new string[] {
                        string.Format("{0}", mandant),
                        string.Format("{0}", mengenIAFB),
                        string.Format("{0}", mengenIBFB),
                        string.Format("{0}", mengenICFB),
                        string.Format("{0}", mengenIIFB),
                        string.Format("{0}", mengenIIIFB),
                        string.Format("{0}", mengenIVFB),
                        string.Format("{0}", mengenIATR),
                        string.Format("{0}", mengenIBTR),
                        string.Format("{0}", mengenICTR),
                        string.Format("{0}", mengenIITR),
                        string.Format("{0}", mengenIIITR),
                        string.Format("{0}", mengenIVTR)});
#line 92
testRunner.And("zeigt die Tabelle folgende Mengen: (manuell)", ((string)(null)), table10, "Und ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Das System liefert eine Tabelle mit Mengen pro Belastungskategorie des Mandanten " +
            "(Strassennamen-Modus, GIS-Modus), 4", new string[] {
                "Automatisch"}, SourceLine=97)]
        public virtual void DasSystemLiefertEineTabelleMitMengenProBelastungskategorieDesMandantenStrassennamen_ModusGIS_Modus_4()
        {
            this.DasSystemLiefertEineTabelleMitMengenProBelastungskategorieDesMandantenStrassennamen_ModusGIS_Modus("4", "W1.7_Strassennamen_Mandant4", "Mandant_4", "", "0", "5148", "6760", "58608", "50000", "95000", "0", "0", "0", "5720", "7250", "11600", "215516", "24570", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Das System liefert eine Tabelle mit Mengen pro Belastungskategorie des Mandanten " +
            "(Strassennamen-Modus, GIS-Modus), 5", new string[] {
                "Automatisch"}, SourceLine=97)]
        public virtual void DasSystemLiefertEineTabelleMitMengenProBelastungskategorieDesMandantenStrassennamen_ModusGIS_Modus_5()
        {
            this.DasSystemLiefertEineTabelleMitMengenProBelastungskategorieDesMandantenStrassennamen_ModusGIS_Modus("5", "W1.7_Gis_Mandant5", "Mandant_5", "", "0", "5148", "6760", "58608", "95000", "50000", "0", "0", "0", "5720", "11600", "7250", "215516", "24570", ((string[])(null)));
#line hidden
        }
        
        public virtual void DerData_ReaderKannDieTabelleAufDenStrasseneigentumerFilternAusgenommenSummarischerModusHierExistiertKeineAngabeZumStrasseneigentumer(
                    string tF, 
                    string referenzAuswertung, 
                    string mandant, 
                    string strasseneigentumer, 
                    string mengenIAFB, 
                    string mengenIBFB, 
                    string mengenICFB, 
                    string mengenIIFB, 
                    string mengenIIIFB, 
                    string mengenIVFB, 
                    string mengenIATR, 
                    string mengenIBTR, 
                    string mengenICTR, 
                    string mengenIITR, 
                    string mengenIIITR, 
                    string mengenIVTR, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Automatisch"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Data-Reader kann die Tabelle auf den Strasseneigentümer filtern (ausgenommen " +
                    "summarischer Modus – hier existiert keine Angabe zum Strasseneigentümer)", @__tags);
#line 104
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mandant",
                        "Modus"});
            table11.AddRow(new string[] {
                        "Mandant_4",
                        "strassennamen"});
            table11.AddRow(new string[] {
                        "Mandant_5",
                        "GIS"});
#line 105
testRunner.Given("folgende Einstellungen existieren:", ((string)(null)), table11, "Gegeben sei ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Belastungskategorie",
                        "BreiteFahrbahn",
                        "Länge",
                        "Trottoir",
                        "BreiteTrottoirLinks",
                        "BreiteTrottoirRechts",
                        "Strasseneigentümer"});
            table12.AddRow(new string[] {
                        "II",
                        "19,56",
                        "1800",
                        "KeinTrottoir",
                        "0",
                        "0",
                        "Gemeinde"});
            table12.AddRow(new string[] {
                        "IV",
                        "19",
                        "5000",
                        "Links",
                        "2,32",
                        "0",
                        "Privat"});
            table12.AddRow(new string[] {
                        "III",
                        "20",
                        "2500",
                        "Rechts",
                        "0",
                        "2,90",
                        "Korporation"});
            table12.AddRow(new string[] {
                        "II",
                        "18",
                        "1300",
                        "BeideSeiten",
                        "1,40",
                        "3",
                        "Gemeinde"});
            table12.AddRow(new string[] {
                        "IC",
                        "8,45",
                        "800",
                        "NochNichtErfasst",
                        "-",
                        "-",
                        "Privat"});
            table12.AddRow(new string[] {
                        "IB",
                        "12,87",
                        "400",
                        "KeinTrottoir",
                        "0",
                        "0",
                        "Korporation"});
#line 109
testRunner.And("für Mandant \'Mandant_4\' existieren folgende Netzinformationen:", ((string)(null)), table12, "Und ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Belastungskategorie",
                        "BreiteFahrbahn",
                        "Länge",
                        "Trottoir",
                        "BreiteTrottoirLinks",
                        "BreiteTrottoirRechts",
                        "Strasseneigentümer"});
            table13.AddRow(new string[] {
                        "II",
                        "19,56",
                        "1800",
                        "KeinTrottoir",
                        "0",
                        "0",
                        "Gemeinde"});
            table13.AddRow(new string[] {
                        "III",
                        "19",
                        "5000",
                        "Links",
                        "2,32",
                        "0",
                        "Korporation"});
            table13.AddRow(new string[] {
                        "IV",
                        "20",
                        "2500",
                        "Rechts",
                        "0",
                        "2,90",
                        "Privat"});
            table13.AddRow(new string[] {
                        "II",
                        "18",
                        "1300",
                        "BeideSeiten",
                        "1,40",
                        "3",
                        "Gemeinde"});
            table13.AddRow(new string[] {
                        "IC",
                        "8,45",
                        "800",
                        "NochNichtErfasst",
                        "-",
                        "-",
                        "Privat"});
            table13.AddRow(new string[] {
                        "IB",
                        "12,87",
                        "400",
                        "KeinTrottoir",
                        "0",
                        "0",
                        "Korporation"});
#line 117
testRunner.And("für Mandant \'Mandant_5\' existieren folgende GIS Netzinformationen:", ((string)(null)), table13, "Und ");
#line 125
testRunner.And(string.Format("ich habe alle Rollen für \'{0}\'", mandant), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line 126
testRunner.And("ich einen Jahresabschluss für das Jahr \'2010\' durchführe", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Filter",
                        "Filter Wert"});
            table14.AddRow(new string[] {
                        "Erfassungsperiode",
                        "2010"});
            table14.AddRow(new string[] {
                        "Strasseneigentümer",
                        string.Format("{0}", strasseneigentumer)});
#line 127
testRunner.When("ich die Tabelle mit Mengen pro Belastungskategorie generiere", ((string)(null)), table14, "Wenn ");
#line 131
testRunner.Then(string.Format("ist das Ergebnis das gleiche wie in der Referenz Auswertung \'{0}\'", referenzAuswertung), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mandant",
                        "Mengen IA",
                        "Mengen IB",
                        "Mengen IC",
                        "Mengen II",
                        "Mengen III",
                        "Mengen IV"});
            table15.AddRow(new string[] {
                        string.Format("{0}", mandant),
                        "<Mengen IA>",
                        "<Mengen IB>",
                        "<Mengen IC>",
                        "<Mengen II>",
                        "<Mengen III>",
                        "<Mengen IV>"});
#line 132
testRunner.And("zeigt die Tabelle folgende Mengen: (manuell)", ((string)(null)), table15, "Und ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Reader kann die Tabelle auf den Strasseneigentümer filtern (ausgenommen " +
            "summarischer Modus – hier existiert keine Angabe zum Strasseneigentümer), 1", new string[] {
                "Automatisch"}, SourceLine=137)]
        public virtual void DerData_ReaderKannDieTabelleAufDenStrasseneigentumerFilternAusgenommenSummarischerModusHierExistiertKeineAngabeZumStrasseneigentumer_1()
        {
            this.DerData_ReaderKannDieTabelleAufDenStrasseneigentumerFilternAusgenommenSummarischerModusHierExistiertKeineAngabeZumStrasseneigentumer("1", "W1.7_Strassennamen_Mandant4_Gemeinde", "Mandant_4", "Gemeinde", "0", "0", "0", "58608", "0", "0", "0", "0", "0", "5720", "0", "0", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Reader kann die Tabelle auf den Strasseneigentümer filtern (ausgenommen " +
            "summarischer Modus – hier existiert keine Angabe zum Strasseneigentümer), 2", new string[] {
                "Automatisch"}, SourceLine=137)]
        public virtual void DerData_ReaderKannDieTabelleAufDenStrasseneigentumerFilternAusgenommenSummarischerModusHierExistiertKeineAngabeZumStrasseneigentumer_2()
        {
            this.DerData_ReaderKannDieTabelleAufDenStrasseneigentumerFilternAusgenommenSummarischerModusHierExistiertKeineAngabeZumStrasseneigentumer("2", "W1.7_Strassennamen_Mandant4_Private", "Mandant_4", "Privat", "0", "0", "6760", "0", "0", "95000", "0", "0", "0", "0", "0", "11600", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Reader kann die Tabelle auf den Strasseneigentümer filtern (ausgenommen " +
            "summarischer Modus – hier existiert keine Angabe zum Strasseneigentümer), 3", new string[] {
                "Automatisch"}, SourceLine=137)]
        public virtual void DerData_ReaderKannDieTabelleAufDenStrasseneigentumerFilternAusgenommenSummarischerModusHierExistiertKeineAngabeZumStrasseneigentumer_3()
        {
            this.DerData_ReaderKannDieTabelleAufDenStrasseneigentumerFilternAusgenommenSummarischerModusHierExistiertKeineAngabeZumStrasseneigentumer("3", "W1.7_Strassennamen_Mandant4_Korporation", "Mandant_4", "Korporation", "0", "5148", "0", "0", "50000", "0", "0", "0", "0", "0", "7250", "0", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Reader kann die Tabelle auf den Strasseneigentümer filtern (ausgenommen " +
            "summarischer Modus – hier existiert keine Angabe zum Strasseneigentümer), 4", new string[] {
                "Automatisch"}, SourceLine=137)]
        public virtual void DerData_ReaderKannDieTabelleAufDenStrasseneigentumerFilternAusgenommenSummarischerModusHierExistiertKeineAngabeZumStrasseneigentumer_4()
        {
            this.DerData_ReaderKannDieTabelleAufDenStrasseneigentumerFilternAusgenommenSummarischerModusHierExistiertKeineAngabeZumStrasseneigentumer("4", "W1.7_Gis_Mandant5_Gemeinde", "Mandant_5", "Gemeinde", "0", "0", "0", "58608", "0", "0", "0", "0", "0", "5720", "0", "0", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Reader kann die Tabelle auf den Strasseneigentümer filtern (ausgenommen " +
            "summarischer Modus – hier existiert keine Angabe zum Strasseneigentümer), 5", new string[] {
                "Automatisch"}, SourceLine=137)]
        public virtual void DerData_ReaderKannDieTabelleAufDenStrasseneigentumerFilternAusgenommenSummarischerModusHierExistiertKeineAngabeZumStrasseneigentumer_5()
        {
            this.DerData_ReaderKannDieTabelleAufDenStrasseneigentumerFilternAusgenommenSummarischerModusHierExistiertKeineAngabeZumStrasseneigentumer("5", "W1.7_Gis_Mandant5_Private", "Mandant_5", "Privat", "0", "0", "6760", "0", "0", "95000", "0", "0", "0", "0", "0", "11600", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Reader kann die Tabelle auf den Strasseneigentümer filtern (ausgenommen " +
            "summarischer Modus – hier existiert keine Angabe zum Strasseneigentümer), 6", new string[] {
                "Automatisch"}, SourceLine=137)]
        public virtual void DerData_ReaderKannDieTabelleAufDenStrasseneigentumerFilternAusgenommenSummarischerModusHierExistiertKeineAngabeZumStrasseneigentumer_6()
        {
            this.DerData_ReaderKannDieTabelleAufDenStrasseneigentumerFilternAusgenommenSummarischerModusHierExistiertKeineAngabeZumStrasseneigentumer("6", "W1.7_Gis_Mandant5_Korporation", "Mandant_5", "Korporation", "0", "5148", "0", "0", "50000", "0", "0", "0", "0", "0", "7250", "0", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Reader kann die Tabelle als Excel-File exportieren", new string[] {
                "Manuell"}, SourceLine=147)]
        public virtual void DerData_ReaderKannDieTabelleAlsExcel_FileExportieren()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Data-Reader kann die Tabelle als Excel-File exportieren", new string[] {
                        "Manuell"});
#line 148
this.ScenarioSetup(scenarioInfo);
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("W1.7 - Eine Tabelle mit Menge pro Belastungskategorie erhalten")]
    public partial class W1_7_EineTabelleMitMengeProBelastungskategorieErhaltenFeature_NUnit
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "W1.7.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("de-AT"), "W1.7 - Eine Tabelle mit Menge pro Belastungskategorie erhalten", "\tAls Data-Reader\r\n\twill ich eine Tabelle mit Menge pro Belastungskategorie erhalt" +
                    "en\r\n\tdamit ich für Entscheidungsträger meiner Gemeinde eine Informationsbasis ha" +
                    "be und einen Überblick zu meinem Inventar erhalte", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Der Data-Reader kann die gewünschte Auswertung selektieren")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void DerData_ReaderKannDieGewunschteAuswertungSelektieren()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Data-Reader kann die gewünschte Auswertung selektieren", new string[] {
                        "Manuell"});
#line 9
this.ScenarioSetup(scenarioInfo);
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Der Data-Reader kann ein Jahr auswählen, für das vom System eine Inventarauswertu" +
            "ng generiert werden soll")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void DerData_ReaderKannEinJahrAuswahlenFurDasVomSystemEineInventarauswertungGeneriertWerdenSoll()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Data-Reader kann ein Jahr auswählen, für das vom System eine Inventarauswertu" +
                    "ng generiert werden soll", new string[] {
                        "Manuell"});
#line 14
this.ScenarioSetup(scenarioInfo);
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Vom System wird das Jahr des letzten Jahresabschlusses als default Wert vorselekt" +
            "iert")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void VomSystemWirdDasJahrDesLetztenJahresabschlussesAlsDefaultWertVorselektiert()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Vom System wird das Jahr des letzten Jahresabschlusses als default Wert vorselekt" +
                    "iert", new string[] {
                        "Manuell"});
#line 19
this.ScenarioSetup(scenarioInfo);
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Das System liefert eine Tabelle mit Mengen pro Belastungskategorie des Mandanten " +
            "(summarischer Modus)")]
        [NUnit.Framework.CategoryAttribute("Automatisch")]
        [NUnit.Framework.TestCaseAttribute("1", "Mandant_1", "107760", "5100", "795", "2790000", "2051200", "16200", "613975", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2", "Mandant_2", "7950", "51000", "1077600", "20512000", "27900000", "162000", "49710550", new string[0])]
        public virtual void DasSystemLiefertEineTabelleMitMengenProBelastungskategorieDesMandantenSummarischerModus(string tF, string mandant, string mengenIA, string mengenIB, string mengenIC, string mengenII, string mengenIII, string mengenIV, string summe, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Automatisch"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Das System liefert eine Tabelle mit Mengen pro Belastungskategorie des Mandanten " +
                    "(summarischer Modus)", @__tags);
#line 24
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mandant",
                        "Modus",
                        "Mengentyp"});
            table1.AddRow(new string[] {
                        "Mandant_1",
                        "summarisch",
                        "Gesamtlänge"});
            table1.AddRow(new string[] {
                        "Mandant_2",
                        "summarisch",
                        "Gesamtfläche"});
#line 25
testRunner.Given("folgende Einstellungen existieren:", ((string)(null)), table1, "Gegeben sei ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Belastungskategorie",
                        "Menge Gesamtfläche"});
            table2.AddRow(new string[] {
                        "IA",
                        "107760"});
            table2.AddRow(new string[] {
                        "IB",
                        "5100"});
            table2.AddRow(new string[] {
                        "IC",
                        "795"});
            table2.AddRow(new string[] {
                        "II",
                        "2790000"});
            table2.AddRow(new string[] {
                        "III",
                        "2051200"});
            table2.AddRow(new string[] {
                        "IV",
                        "16200"});
#line 29
testRunner.And("für Mandant \'Mandant_1\' folgende summarische Zustands- und Netzinformationen exis" +
                    "tieren:", ((string)(null)), table2, "Und ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Belastungskategorie",
                        "Menge Gesamtfläche"});
            table3.AddRow(new string[] {
                        "IA",
                        "7950"});
            table3.AddRow(new string[] {
                        "IB",
                        "51000"});
            table3.AddRow(new string[] {
                        "IC",
                        "1077600"});
            table3.AddRow(new string[] {
                        "II",
                        "20512000"});
            table3.AddRow(new string[] {
                        "III",
                        "27900000"});
            table3.AddRow(new string[] {
                        "IV",
                        "162000"});
#line 37
testRunner.And("für Mandant \'Mandant_2\' folgende summarische Zustands- und Netzinformationen exis" +
                    "tieren:", ((string)(null)), table3, "Und ");
#line 45
testRunner.And(string.Format("ich habe alle Rollen für \'{0}\'", mandant), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line 46
testRunner.And("ich einen Jahresabschluss für das Jahr \'2010\' durchführe", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Filter",
                        "Filter Wert"});
            table4.AddRow(new string[] {
                        "Erfassungsperiode",
                        "2010"});
#line 47
testRunner.When("ich die Tabelle mit Mengen pro Belastungskategorie generiere", ((string)(null)), table4, "Wenn ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "BelastungskategorieTyp",
                        "Menge"});
            table5.AddRow(new string[] {
                        "IA",
                        string.Format("{0}", mengenIA)});
            table5.AddRow(new string[] {
                        "IB",
                        string.Format("{0}", mengenIB)});
            table5.AddRow(new string[] {
                        "IC",
                        string.Format("{0}", mengenIC)});
            table5.AddRow(new string[] {
                        "II",
                        string.Format("{0}", mengenII)});
            table5.AddRow(new string[] {
                        "III",
                        string.Format("{0}", mengenIII)});
            table5.AddRow(new string[] {
                        "IV",
                        string.Format("{0}", mengenIV)});
#line 50
testRunner.And("zeigt die Tabelle mit Mengen pro Belastungskategorie folgende Mengen:", ((string)(null)), table5, "Und ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Das System liefert eine Tabelle mit Mengen pro Belastungskategorie des Mandanten " +
            "(Strassennamen-Modus, GIS-Modus)")]
        [NUnit.Framework.CategoryAttribute("Automatisch")]
        [NUnit.Framework.TestCaseAttribute("4", "W1.7_Strassennamen_Mandant4", "Mandant_4", "", "0", "5148", "6760", "58608", "50000", "95000", "0", "0", "0", "5720", "7250", "11600", "215516", "24570", new string[0])]
        [NUnit.Framework.TestCaseAttribute("5", "W1.7_Gis_Mandant5", "Mandant_5", "", "0", "5148", "6760", "58608", "95000", "50000", "0", "0", "0", "5720", "11600", "7250", "215516", "24570", new string[0])]
        public virtual void DasSystemLiefertEineTabelleMitMengenProBelastungskategorieDesMandantenStrassennamen_ModusGIS_Modus(
                    string tF, 
                    string referenzAuswertung, 
                    string mandant, 
                    string strasseneigentumer, 
                    string mengenIAFB, 
                    string mengenIBFB, 
                    string mengenICFB, 
                    string mengenIIFB, 
                    string mengenIIIFB, 
                    string mengenIVFB, 
                    string mengenIATR, 
                    string mengenIBTR, 
                    string mengenICTR, 
                    string mengenIITR, 
                    string mengenIIITR, 
                    string mengenIVTR, 
                    string summeFB, 
                    string summeTR, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Automatisch"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Das System liefert eine Tabelle mit Mengen pro Belastungskategorie des Mandanten " +
                    "(Strassennamen-Modus, GIS-Modus)", @__tags);
#line 65
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mandant",
                        "Modus"});
            table6.AddRow(new string[] {
                        "Mandant_4",
                        "strassennamen"});
            table6.AddRow(new string[] {
                        "Mandant_5",
                        "GIS"});
#line 66
testRunner.Given("folgende Einstellungen existieren:", ((string)(null)), table6, "Gegeben sei ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Belastungskategorie",
                        "BreiteFahrbahn",
                        "Länge",
                        "Trottoir",
                        "BreiteTrottoirLinks",
                        "BreiteTrottoirRechts"});
            table7.AddRow(new string[] {
                        "II",
                        "19,56",
                        "1800",
                        "KeinTrottoir",
                        "0",
                        "0"});
            table7.AddRow(new string[] {
                        "IV",
                        "19",
                        "5000",
                        "Links",
                        "2,32",
                        "0"});
            table7.AddRow(new string[] {
                        "III",
                        "20",
                        "2500",
                        "Rechts",
                        "0",
                        "2,90"});
            table7.AddRow(new string[] {
                        "II",
                        "18",
                        "1300",
                        "BeideSeiten",
                        "1,40",
                        "3"});
            table7.AddRow(new string[] {
                        "IC",
                        "8,45",
                        "800",
                        "NochNichtErfasst",
                        "-",
                        "-"});
            table7.AddRow(new string[] {
                        "IB",
                        "12,87",
                        "400",
                        "KeinTrottoir",
                        "0",
                        "0"});
#line 70
testRunner.And("für Mandant \'Mandant_4\' existieren folgende Netzinformationen:", ((string)(null)), table7, "Und ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Belastungskategorie",
                        "BreiteFahrbahn",
                        "Länge",
                        "Trottoir",
                        "BreiteTrottoirLinks",
                        "BreiteTrottoirRechts"});
            table8.AddRow(new string[] {
                        "II",
                        "19,56",
                        "1800",
                        "KeinTrottoir",
                        "0",
                        "0"});
            table8.AddRow(new string[] {
                        "III",
                        "19",
                        "5000",
                        "Links",
                        "2,32",
                        "0"});
            table8.AddRow(new string[] {
                        "IV",
                        "20",
                        "2500",
                        "Rechts",
                        "0",
                        "2,90"});
            table8.AddRow(new string[] {
                        "II",
                        "18",
                        "1300",
                        "BeideSeiten",
                        "1,40",
                        "3"});
            table8.AddRow(new string[] {
                        "IC",
                        "8,45",
                        "800",
                        "NochNichtErfasst",
                        "-",
                        "-"});
            table8.AddRow(new string[] {
                        "IB",
                        "12,87",
                        "400",
                        "KeinTrottoir",
                        "0",
                        "0"});
#line 78
testRunner.And("für Mandant \'Mandant_5\' existieren folgende GIS Netzinformationen:", ((string)(null)), table8, "Und ");
#line 86
testRunner.And(string.Format("ich habe alle Rollen für \'{0}\'", mandant), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line 87
testRunner.And("ich einen Jahresabschluss für das Jahr \'2010\' durchführe", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Filter",
                        "Filter Wert"});
            table9.AddRow(new string[] {
                        "Erfassungsperiode",
                        "2010"});
#line 88
testRunner.When("ich die Tabelle mit Mengen pro Belastungskategorie generiere", ((string)(null)), table9, "Wenn ");
#line 91
testRunner.Then(string.Format("ist das Ergebnis das gleiche wie in der Referenz Auswertung \'{0}\'", referenzAuswertung), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mandant",
                        "Mengen IA FB",
                        "Mengen IB FB",
                        "Mengen IC FB",
                        "Mengen II FB",
                        "Mengen III FB",
                        "Mengen IV FB",
                        "Mengen IA TR",
                        "Mengen IB TR",
                        "Mengen IC TR",
                        "Mengen II TR",
                        "Mengen III TR",
                        "Mengen IV TR"});
            table10.AddRow(new string[] {
                        string.Format("{0}", mandant),
                        string.Format("{0}", mengenIAFB),
                        string.Format("{0}", mengenIBFB),
                        string.Format("{0}", mengenICFB),
                        string.Format("{0}", mengenIIFB),
                        string.Format("{0}", mengenIIIFB),
                        string.Format("{0}", mengenIVFB),
                        string.Format("{0}", mengenIATR),
                        string.Format("{0}", mengenIBTR),
                        string.Format("{0}", mengenICTR),
                        string.Format("{0}", mengenIITR),
                        string.Format("{0}", mengenIIITR),
                        string.Format("{0}", mengenIVTR)});
#line 92
testRunner.And("zeigt die Tabelle folgende Mengen: (manuell)", ((string)(null)), table10, "Und ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Der Data-Reader kann die Tabelle auf den Strasseneigentümer filtern (ausgenommen " +
            "summarischer Modus – hier existiert keine Angabe zum Strasseneigentümer)")]
        [NUnit.Framework.CategoryAttribute("Automatisch")]
        [NUnit.Framework.TestCaseAttribute("1", "W1.7_Strassennamen_Mandant4_Gemeinde", "Mandant_4", "Gemeinde", "0", "0", "0", "58608", "0", "0", "0", "0", "0", "5720", "0", "0", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2", "W1.7_Strassennamen_Mandant4_Private", "Mandant_4", "Privat", "0", "0", "6760", "0", "0", "95000", "0", "0", "0", "0", "0", "11600", new string[0])]
        [NUnit.Framework.TestCaseAttribute("3", "W1.7_Strassennamen_Mandant4_Korporation", "Mandant_4", "Korporation", "0", "5148", "0", "0", "50000", "0", "0", "0", "0", "0", "7250", "0", new string[0])]
        [NUnit.Framework.TestCaseAttribute("4", "W1.7_Gis_Mandant5_Gemeinde", "Mandant_5", "Gemeinde", "0", "0", "0", "58608", "0", "0", "0", "0", "0", "5720", "0", "0", new string[0])]
        [NUnit.Framework.TestCaseAttribute("5", "W1.7_Gis_Mandant5_Private", "Mandant_5", "Privat", "0", "0", "6760", "0", "0", "95000", "0", "0", "0", "0", "0", "11600", new string[0])]
        [NUnit.Framework.TestCaseAttribute("6", "W1.7_Gis_Mandant5_Korporation", "Mandant_5", "Korporation", "0", "5148", "0", "0", "50000", "0", "0", "0", "0", "0", "7250", "0", new string[0])]
        public virtual void DerData_ReaderKannDieTabelleAufDenStrasseneigentumerFilternAusgenommenSummarischerModusHierExistiertKeineAngabeZumStrasseneigentumer(
                    string tF, 
                    string referenzAuswertung, 
                    string mandant, 
                    string strasseneigentumer, 
                    string mengenIAFB, 
                    string mengenIBFB, 
                    string mengenICFB, 
                    string mengenIIFB, 
                    string mengenIIIFB, 
                    string mengenIVFB, 
                    string mengenIATR, 
                    string mengenIBTR, 
                    string mengenICTR, 
                    string mengenIITR, 
                    string mengenIIITR, 
                    string mengenIVTR, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Automatisch"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Data-Reader kann die Tabelle auf den Strasseneigentümer filtern (ausgenommen " +
                    "summarischer Modus – hier existiert keine Angabe zum Strasseneigentümer)", @__tags);
#line 104
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mandant",
                        "Modus"});
            table11.AddRow(new string[] {
                        "Mandant_4",
                        "strassennamen"});
            table11.AddRow(new string[] {
                        "Mandant_5",
                        "GIS"});
#line 105
testRunner.Given("folgende Einstellungen existieren:", ((string)(null)), table11, "Gegeben sei ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Belastungskategorie",
                        "BreiteFahrbahn",
                        "Länge",
                        "Trottoir",
                        "BreiteTrottoirLinks",
                        "BreiteTrottoirRechts",
                        "Strasseneigentümer"});
            table12.AddRow(new string[] {
                        "II",
                        "19,56",
                        "1800",
                        "KeinTrottoir",
                        "0",
                        "0",
                        "Gemeinde"});
            table12.AddRow(new string[] {
                        "IV",
                        "19",
                        "5000",
                        "Links",
                        "2,32",
                        "0",
                        "Privat"});
            table12.AddRow(new string[] {
                        "III",
                        "20",
                        "2500",
                        "Rechts",
                        "0",
                        "2,90",
                        "Korporation"});
            table12.AddRow(new string[] {
                        "II",
                        "18",
                        "1300",
                        "BeideSeiten",
                        "1,40",
                        "3",
                        "Gemeinde"});
            table12.AddRow(new string[] {
                        "IC",
                        "8,45",
                        "800",
                        "NochNichtErfasst",
                        "-",
                        "-",
                        "Privat"});
            table12.AddRow(new string[] {
                        "IB",
                        "12,87",
                        "400",
                        "KeinTrottoir",
                        "0",
                        "0",
                        "Korporation"});
#line 109
testRunner.And("für Mandant \'Mandant_4\' existieren folgende Netzinformationen:", ((string)(null)), table12, "Und ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Belastungskategorie",
                        "BreiteFahrbahn",
                        "Länge",
                        "Trottoir",
                        "BreiteTrottoirLinks",
                        "BreiteTrottoirRechts",
                        "Strasseneigentümer"});
            table13.AddRow(new string[] {
                        "II",
                        "19,56",
                        "1800",
                        "KeinTrottoir",
                        "0",
                        "0",
                        "Gemeinde"});
            table13.AddRow(new string[] {
                        "III",
                        "19",
                        "5000",
                        "Links",
                        "2,32",
                        "0",
                        "Korporation"});
            table13.AddRow(new string[] {
                        "IV",
                        "20",
                        "2500",
                        "Rechts",
                        "0",
                        "2,90",
                        "Privat"});
            table13.AddRow(new string[] {
                        "II",
                        "18",
                        "1300",
                        "BeideSeiten",
                        "1,40",
                        "3",
                        "Gemeinde"});
            table13.AddRow(new string[] {
                        "IC",
                        "8,45",
                        "800",
                        "NochNichtErfasst",
                        "-",
                        "-",
                        "Privat"});
            table13.AddRow(new string[] {
                        "IB",
                        "12,87",
                        "400",
                        "KeinTrottoir",
                        "0",
                        "0",
                        "Korporation"});
#line 117
testRunner.And("für Mandant \'Mandant_5\' existieren folgende GIS Netzinformationen:", ((string)(null)), table13, "Und ");
#line 125
testRunner.And(string.Format("ich habe alle Rollen für \'{0}\'", mandant), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line 126
testRunner.And("ich einen Jahresabschluss für das Jahr \'2010\' durchführe", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Filter",
                        "Filter Wert"});
            table14.AddRow(new string[] {
                        "Erfassungsperiode",
                        "2010"});
            table14.AddRow(new string[] {
                        "Strasseneigentümer",
                        string.Format("{0}", strasseneigentumer)});
#line 127
testRunner.When("ich die Tabelle mit Mengen pro Belastungskategorie generiere", ((string)(null)), table14, "Wenn ");
#line 131
testRunner.Then(string.Format("ist das Ergebnis das gleiche wie in der Referenz Auswertung \'{0}\'", referenzAuswertung), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mandant",
                        "Mengen IA",
                        "Mengen IB",
                        "Mengen IC",
                        "Mengen II",
                        "Mengen III",
                        "Mengen IV"});
            table15.AddRow(new string[] {
                        string.Format("{0}", mandant),
                        "<Mengen IA>",
                        "<Mengen IB>",
                        "<Mengen IC>",
                        "<Mengen II>",
                        "<Mengen III>",
                        "<Mengen IV>"});
#line 132
testRunner.And("zeigt die Tabelle folgende Mengen: (manuell)", ((string)(null)), table15, "Und ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Der Data-Reader kann die Tabelle als Excel-File exportieren")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void DerData_ReaderKannDieTabelleAlsExcel_FileExportieren()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Data-Reader kann die Tabelle als Excel-File exportieren", new string[] {
                        "Manuell"});
#line 148
this.ScenarioSetup(scenarioInfo);
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
