// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ASTRA.EMSG.IntegrationTests.Features.W_Auswertungen
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("W1.1 - Eine Grafik mit Mengen pro Belastungskategorie erhalten", Description="    Als Data-Reader\r\n    will ich eine Grafik mit Mengen pro Belastungskategorie " +
        "erhalten\r\n    damit ich für Entscheidungsträger meiner Gemeinde eine Information" +
        "sbasis habe und einen Überblick zu meinem Inventar erhalte", SourceFile="Features\\W - Auswertungen\\W1.1.feature", SourceLine=0)]
    public partial class W1_1_EineGrafikMitMengenProBelastungskategorieErhaltenFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "W1.1.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("de-AT"), "W1.1 - Eine Grafik mit Mengen pro Belastungskategorie erhalten", "    Als Data-Reader\r\n    will ich eine Grafik mit Mengen pro Belastungskategorie " +
                    "erhalten\r\n    damit ich für Entscheidungsträger meiner Gemeinde eine Information" +
                    "sbasis habe und einen Überblick zu meinem Inventar erhalte", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Reader kann die gewünschte Auswertung selektieren", new string[] {
                "Manuell"}, SourceLine=8)]
        public virtual void DerData_ReaderKannDieGewunschteAuswertungSelektieren()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Data-Reader kann die gewünschte Auswertung selektieren", new string[] {
                        "Manuell"});
#line 9
this.ScenarioSetup(scenarioInfo);
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Reader muss ein Jahr auswählen, für das vom System eine Inventarauswertu" +
            "ng generiert werden soll", new string[] {
                "Manuell"}, SourceLine=13)]
        public virtual void DerData_ReaderMussEinJahrAuswahlenFurDasVomSystemEineInventarauswertungGeneriertWerdenSoll()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Data-Reader muss ein Jahr auswählen, für das vom System eine Inventarauswertu" +
                    "ng generiert werden soll", new string[] {
                        "Manuell"});
#line 14
this.ScenarioSetup(scenarioInfo);
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Vom System wird das Jahr des letzten Jahresabschlusses als default Wert vorselekt" +
            "iert", new string[] {
                "Manuell"}, SourceLine=18)]
        public virtual void VomSystemWirdDasJahrDesLetztenJahresabschlussesAlsDefaultWertVorselektiert()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Vom System wird das Jahr des letzten Jahresabschlusses als default Wert vorselekt" +
                    "iert", new string[] {
                        "Manuell"});
#line 19
this.ScenarioSetup(scenarioInfo);
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void DasSystemLiefertEineGrafikMitMengenProBelastungskategorieDesMandantenSummarischerModus(string tF, string referenzAuswertung, string mandant, string mengenanteilIA, string mengenanteilIB, string mengenanteilIC, string mengenanteilII, string mengenanteilIII, string mengenanteilIV, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Automatisch"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Das System liefert eine Grafik mit Mengen pro Belastungskategorie des Mandanten (" +
                    "summarischer Modus)", @__tags);
#line 24
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mandant",
                        "Modus",
                        "Mengentyp"});
            table1.AddRow(new string[] {
                        "Mandant_1",
                        "summarisch",
                        "Gesamtlänge"});
            table1.AddRow(new string[] {
                        "Mandant_2",
                        "summarisch",
                        "Gesamtfläche"});
#line 25
testRunner.Given("folgende Einstellungen existieren:", ((string)(null)), table1, "Gegeben sei ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Belastungskategorie",
                        "Menge Gesamtfläche"});
            table2.AddRow(new string[] {
                        "IA",
                        "107760"});
            table2.AddRow(new string[] {
                        "IB",
                        "5100"});
            table2.AddRow(new string[] {
                        "IC",
                        "795"});
            table2.AddRow(new string[] {
                        "II",
                        "2790000"});
            table2.AddRow(new string[] {
                        "III",
                        "2051200"});
            table2.AddRow(new string[] {
                        "IV",
                        "16200"});
#line 29
testRunner.And("für Mandant \'Mandant_1\' folgende summarische Zustands- und Netzinformationen exis" +
                    "tieren:", ((string)(null)), table2, "Und ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Belastungskategorie",
                        "Menge Gesamtfläche"});
            table3.AddRow(new string[] {
                        "IA",
                        "7950"});
            table3.AddRow(new string[] {
                        "IB",
                        "51000"});
            table3.AddRow(new string[] {
                        "IC",
                        "1077600"});
            table3.AddRow(new string[] {
                        "II",
                        "20512000"});
            table3.AddRow(new string[] {
                        "III",
                        "27900000"});
            table3.AddRow(new string[] {
                        "IV",
                        "162000"});
#line 37
testRunner.And("für Mandant \'Mandant_2\' folgende summarische Zustands- und Netzinformationen exis" +
                    "tieren:", ((string)(null)), table3, "Und ");
#line 45
testRunner.And(string.Format("ich habe alle Rollen für \'{0}\'", mandant), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line 46
testRunner.And("ich einen Jahresabschluss für das Jahr \'2010\' durchführe", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Filter",
                        "Filter Wert"});
            table4.AddRow(new string[] {
                        "Erfassungsperiode",
                        "2010"});
#line 47
testRunner.When("ich die Grafik mit Mengen pro Belastungskategorie generiere", ((string)(null)), table4, "Wenn ");
#line 50
testRunner.Then(string.Format("ist das Ergebnis das gleiche wie in der Referenz Auswertung \'{0}\'", referenzAuswertung), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mandant",
                        "Mengenanteil IA",
                        "Mengenanteil IB",
                        "Mengenanteil IC",
                        "Mengenanteil II",
                        "Mengenanteil III",
                        "Mengenanteil IV"});
            table5.AddRow(new string[] {
                        string.Format("{0}", mandant),
                        string.Format("{0}", mengenanteilIA),
                        string.Format("{0}", mengenanteilIB),
                        string.Format("{0}", mengenanteilIC),
                        string.Format("{0}", mengenanteilII),
                        string.Format("{0}", mengenanteilIII),
                        string.Format("{0}", mengenanteilIV)});
#line 51
testRunner.Then("zeigt die Grafik folgende Verteilung: (manuell)", ((string)(null)), table5, "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Das System liefert eine Grafik mit Mengen pro Belastungskategorie des Mandanten (" +
            "summarischer Modus), 1", new string[] {
                "Automatisch"}, SourceLine=55)]
        public virtual void DasSystemLiefertEineGrafikMitMengenProBelastungskategorieDesMandantenSummarischerModus_1()
        {
            this.DasSystemLiefertEineGrafikMitMengenProBelastungskategorieDesMandantenSummarischerModus("1", "W1.1_Summarisch_Mandant1", "Mandant_1", "2%", "0%", "0%", "56%", "41%", "0%", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Das System liefert eine Grafik mit Mengen pro Belastungskategorie des Mandanten (" +
            "summarischer Modus), 2", new string[] {
                "Automatisch"}, SourceLine=55)]
        public virtual void DasSystemLiefertEineGrafikMitMengenProBelastungskategorieDesMandantenSummarischerModus_2()
        {
            this.DasSystemLiefertEineGrafikMitMengenProBelastungskategorieDesMandantenSummarischerModus("2", "W1.1_Summarisch_Mandant2", "Mandant_2", "0%", "0%", "2%", "41%", "56%", "0%", ((string[])(null)));
#line hidden
        }
        
        public virtual void DasSystemLiefertEineGrafikMitMengenProBelastungskategorieDesMandantenStrassennamen_ModusGIS_Modus(
                    string tF, 
                    string referenzAuswertung, 
                    string mandant, 
                    string strasseneigentumer, 
                    string mengenanteilIAFB, 
                    string mengenanteilIBFB, 
                    string mengenanteilICFB, 
                    string mengenanteilIIFB, 
                    string mengenanteilIIIFB, 
                    string mengenanteilIVFB, 
                    string mengenanteilIATR, 
                    string mengenanteilIBTR, 
                    string mengenanteilICTR, 
                    string mengenanteilIITR, 
                    string mengenanteilIIITR, 
                    string mengenanteilIVTR, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Automatisch"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Das System liefert eine Grafik mit Mengen pro Belastungskategorie des Mandanten (" +
                    "Strassennamen-Modus, GIS-Modus)", @__tags);
#line 60
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mandant",
                        "Modus"});
            table6.AddRow(new string[] {
                        "Mandant_4",
                        "strassennamen"});
            table6.AddRow(new string[] {
                        "Mandant_5",
                        "GIS"});
#line 61
testRunner.Given("folgende Einstellungen existieren:", ((string)(null)), table6, "Gegeben sei ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Belastungskategorie",
                        "BreiteFahrbahn",
                        "Länge",
                        "Trottoir",
                        "BreiteTrottoirLinks",
                        "BreiteTrottoirRechts"});
            table7.AddRow(new string[] {
                        "II",
                        "19,56",
                        "1800",
                        "KeinTrottoir",
                        "0",
                        "0"});
            table7.AddRow(new string[] {
                        "IV",
                        "19",
                        "5000",
                        "Links",
                        "2,32",
                        "0"});
            table7.AddRow(new string[] {
                        "III",
                        "20",
                        "2500",
                        "Rechts",
                        "0",
                        "2,90"});
            table7.AddRow(new string[] {
                        "II",
                        "18",
                        "1300",
                        "BeideSeiten",
                        "1,40",
                        "3"});
            table7.AddRow(new string[] {
                        "IC",
                        "8,45",
                        "800",
                        "NochNichtErfasst",
                        "-",
                        "-"});
            table7.AddRow(new string[] {
                        "IB",
                        "12,87",
                        "400",
                        "KeinTrottoir",
                        "0",
                        "0"});
#line 65
testRunner.And("für Mandant \'Mandant_4\' existieren folgende Netzinformationen:", ((string)(null)), table7, "Und ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Belastungskategorie",
                        "BreiteFahrbahn",
                        "Länge",
                        "Trottoir",
                        "BreiteTrottoirLinks",
                        "BreiteTrottoirRechts"});
            table8.AddRow(new string[] {
                        "II",
                        "19,56",
                        "1800",
                        "KeinTrottoir",
                        "0",
                        "0"});
            table8.AddRow(new string[] {
                        "III",
                        "19",
                        "5000",
                        "Links",
                        "2,32",
                        "0"});
            table8.AddRow(new string[] {
                        "IV",
                        "20",
                        "2500",
                        "Rechts",
                        "0",
                        "2,90"});
            table8.AddRow(new string[] {
                        "II",
                        "18",
                        "1300",
                        "BeideSeiten",
                        "1,40",
                        "3"});
            table8.AddRow(new string[] {
                        "IC",
                        "8,45",
                        "800",
                        "NochNichtErfasst",
                        "-",
                        "-"});
            table8.AddRow(new string[] {
                        "IB",
                        "12,87",
                        "400",
                        "KeinTrottoir",
                        "0",
                        "0"});
#line 73
testRunner.And("für Mandant \'Mandant_5\' existieren folgende GIS Netzinformationen:", ((string)(null)), table8, "Und ");
#line 81
testRunner.And(string.Format("ich habe alle Rollen für \'{0}\'", mandant), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line 82
testRunner.And("ich einen Jahresabschluss für das Jahr \'2010\' durchführe", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Filter",
                        "Filter Wert"});
            table9.AddRow(new string[] {
                        "Erfassungsperiode",
                        "2010"});
#line 83
testRunner.When("ich die Grafik mit Mengen pro Belastungskategorie generiere", ((string)(null)), table9, "Wenn ");
#line 86
testRunner.Then(string.Format("ist das Ergebnis das gleiche wie in der Referenz Auswertung \'{0}\'", referenzAuswertung), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mandant",
                        "Mengenanteil IA FB",
                        "Mengenanteil IB FB",
                        "Mengenanteil IC FB",
                        "Mengenanteil II FB",
                        "Mengenanteil III FB",
                        "Mengenanteil IV FB",
                        "Mengenanteil IA TR",
                        "Mengenanteil IB TR",
                        "Mengenanteil IC TR",
                        "Mengenanteil II TR",
                        "Mengenanteil III TR",
                        "Mengenanteil IV TR"});
            table10.AddRow(new string[] {
                        string.Format("{0}", mandant),
                        string.Format("{0}", mengenanteilIAFB),
                        string.Format("{0}", mengenanteilIBFB),
                        string.Format("{0}", mengenanteilICFB),
                        string.Format("{0}", mengenanteilIIFB),
                        string.Format("{0}", mengenanteilIIIFB),
                        string.Format("{0}", mengenanteilIVFB),
                        string.Format("{0}", mengenanteilIATR),
                        string.Format("{0}", mengenanteilIBTR),
                        string.Format("{0}", mengenanteilICTR),
                        string.Format("{0}", mengenanteilIITR),
                        string.Format("{0}", mengenanteilIIITR),
                        string.Format("{0}", mengenanteilIVTR)});
#line 87
testRunner.Then("zeigt die Grafik folgende Verteilung: (manuell)", ((string)(null)), table10, "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Das System liefert eine Grafik mit Mengen pro Belastungskategorie des Mandanten (" +
            "Strassennamen-Modus, GIS-Modus), 4", new string[] {
                "Automatisch"}, SourceLine=92)]
        public virtual void DasSystemLiefertEineGrafikMitMengenProBelastungskategorieDesMandantenStrassennamen_ModusGIS_Modus_4()
        {
            this.DasSystemLiefertEineGrafikMitMengenProBelastungskategorieDesMandantenStrassennamen_ModusGIS_Modus("4", "W1.1_Strassennamen_Mandant4", "Mandant_4", "", "0%", "2%", "3%", "27%", "23%", "44%", "0%", "0%", "0%", "23%", "30%", "47%", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Das System liefert eine Grafik mit Mengen pro Belastungskategorie des Mandanten (" +
            "Strassennamen-Modus, GIS-Modus), 5", new string[] {
                "Automatisch"}, SourceLine=92)]
        public virtual void DasSystemLiefertEineGrafikMitMengenProBelastungskategorieDesMandantenStrassennamen_ModusGIS_Modus_5()
        {
            this.DasSystemLiefertEineGrafikMitMengenProBelastungskategorieDesMandantenStrassennamen_ModusGIS_Modus("5", "W1.1_Gis_Mandant5", "Mandant_5", "", "0%", "2%", "3%", "27%", "44%", "23%", "0%", "0%", "0%", "23%", "47%", "30%", ((string[])(null)));
#line hidden
        }
        
        public virtual void DieGrafikKannUberEinenFilterAufDenStrasseneigentumerEingeschranktWerden(
                    string tF, 
                    string referenzAuswertung, 
                    string mandant, 
                    string strasseneigentumer, 
                    string mengenanteilIAFB, 
                    string mengenanteilIBFB, 
                    string mengenanteilICFB, 
                    string mengenanteilIIFB, 
                    string mengenanteilIIIFB, 
                    string mengenanteilIVFB, 
                    string mengenanteilIATR, 
                    string mengenanteilIBTR, 
                    string mengenanteilICTR, 
                    string mengenanteilIITR, 
                    string mengenanteilIIITR, 
                    string mengenanteilIVTR, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Automatisch"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Die Grafik kann über einen Filter auf den Strasseneigentümer eingeschränkt werden" +
                    "", @__tags);
#line 99
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mandant",
                        "Modus"});
            table11.AddRow(new string[] {
                        "Mandant_4",
                        "strassennamen"});
            table11.AddRow(new string[] {
                        "Mandant_5",
                        "GIS"});
#line 100
testRunner.Given("folgende Einstellungen existieren:", ((string)(null)), table11, "Gegeben sei ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Belastungskategorie",
                        "BreiteFahrbahn",
                        "Länge",
                        "Trottoir",
                        "BreiteTrottoirLinks",
                        "BreiteTrottoirRechts",
                        "Strasseneigentümer"});
            table12.AddRow(new string[] {
                        "II",
                        "19,56",
                        "1800",
                        "KeinTrottoir",
                        "0",
                        "0",
                        "Gemeinde"});
            table12.AddRow(new string[] {
                        "IV",
                        "19",
                        "5000",
                        "Links",
                        "2,32",
                        "0",
                        "Privat"});
            table12.AddRow(new string[] {
                        "III",
                        "20",
                        "2500",
                        "Rechts",
                        "0",
                        "2,90",
                        "Korporation"});
            table12.AddRow(new string[] {
                        "II",
                        "18",
                        "1300",
                        "BeideSeiten",
                        "1,40",
                        "3",
                        "Gemeinde"});
            table12.AddRow(new string[] {
                        "IC",
                        "8,45",
                        "800",
                        "NochNichtErfasst",
                        "-",
                        "-",
                        "Privat"});
            table12.AddRow(new string[] {
                        "IB",
                        "12,87",
                        "400",
                        "KeinTrottoir",
                        "0",
                        "0",
                        "Korporation"});
#line 104
testRunner.And("für Mandant \'Mandant_4\' existieren folgende Netzinformationen:", ((string)(null)), table12, "Und ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Belastungskategorie",
                        "BreiteFahrbahn",
                        "Länge",
                        "Trottoir",
                        "BreiteTrottoirLinks",
                        "BreiteTrottoirRechts",
                        "Strasseneigentümer"});
            table13.AddRow(new string[] {
                        "II",
                        "19,56",
                        "1800",
                        "KeinTrottoir",
                        "0",
                        "0",
                        "Gemeinde"});
            table13.AddRow(new string[] {
                        "III",
                        "19",
                        "5000",
                        "Links",
                        "2,32",
                        "0",
                        "Korporation"});
            table13.AddRow(new string[] {
                        "IV",
                        "20",
                        "2500",
                        "Rechts",
                        "0",
                        "2,90",
                        "Privat"});
            table13.AddRow(new string[] {
                        "II",
                        "18",
                        "1300",
                        "BeideSeiten",
                        "1,40",
                        "3",
                        "Gemeinde"});
            table13.AddRow(new string[] {
                        "IC",
                        "8,45",
                        "800",
                        "NochNichtErfasst",
                        "-",
                        "-",
                        "Privat"});
            table13.AddRow(new string[] {
                        "IB",
                        "12,87",
                        "400",
                        "KeinTrottoir",
                        "0",
                        "0",
                        "Korporation"});
#line 112
testRunner.And("für Mandant \'Mandant_5\' existieren folgende GIS Netzinformationen:", ((string)(null)), table13, "Und ");
#line 120
testRunner.And(string.Format("ich habe alle Rollen für \'{0}\'", mandant), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line 121
testRunner.And("ich einen Jahresabschluss für das Jahr \'2010\' durchführe", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Filter",
                        "Filter Wert"});
            table14.AddRow(new string[] {
                        "Erfassungsperiode",
                        "2010"});
            table14.AddRow(new string[] {
                        "Strasseneigentümer",
                        string.Format("{0}", strasseneigentumer)});
#line 122
testRunner.When("ich die Grafik mit Mengen pro Belastungskategorie generiere", ((string)(null)), table14, "Wenn ");
#line 126
testRunner.Then(string.Format("ist das Ergebnis das gleiche wie in der Referenz Auswertung \'{0}\'", referenzAuswertung), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mandant",
                        "Strasseneigentümer",
                        "Mengenanteil IA FB",
                        "Mengenanteil IB FB",
                        "Mengenanteil IC FB",
                        "Mengenanteil II FB",
                        "Mengenanteil III FB",
                        "Mengenanteil IV FB",
                        "Mengenanteil IA TR",
                        "Mengenanteil IB TR",
                        "Mengenanteil IC TR",
                        "Mengenanteil II TR",
                        "Mengenanteil III TR",
                        "Mengenanteil IV TR"});
            table15.AddRow(new string[] {
                        string.Format("{0}", mandant),
                        string.Format("{0}", strasseneigentumer),
                        string.Format("{0}", mengenanteilIAFB),
                        string.Format("{0}", mengenanteilIBFB),
                        string.Format("{0}", mengenanteilICFB),
                        string.Format("{0}", mengenanteilIIFB),
                        string.Format("{0}", mengenanteilIIIFB),
                        string.Format("{0}", mengenanteilIVFB),
                        string.Format("{0}", mengenanteilIATR),
                        string.Format("{0}", mengenanteilIBTR),
                        string.Format("{0}", mengenanteilICTR),
                        string.Format("{0}", mengenanteilIITR),
                        string.Format("{0}", mengenanteilIIITR),
                        string.Format("{0}", mengenanteilIVTR)});
#line 127
testRunner.Then("zeigt die Grafik folgende Verteilung: (manuell)", ((string)(null)), table15, "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Die Grafik kann über einen Filter auf den Strasseneigentümer eingeschränkt werden" +
            ", 1", new string[] {
                "Automatisch"}, SourceLine=132)]
        public virtual void DieGrafikKannUberEinenFilterAufDenStrasseneigentumerEingeschranktWerden_1()
        {
            this.DieGrafikKannUberEinenFilterAufDenStrasseneigentumerEingeschranktWerden("1", "W1.1_Strassennamen_Mandant4_Gemeinde", "Mandant_4", "Gemeinde", "0%", "0%", "0%", "100%", "0%", "0%", "0%", "0%", "0%", "100%", "0%", "0%", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Die Grafik kann über einen Filter auf den Strasseneigentümer eingeschränkt werden" +
            ", 2", new string[] {
                "Automatisch"}, SourceLine=132)]
        public virtual void DieGrafikKannUberEinenFilterAufDenStrasseneigentumerEingeschranktWerden_2()
        {
            this.DieGrafikKannUberEinenFilterAufDenStrasseneigentumerEingeschranktWerden("2", "W1.1_Strassennamen_Mandant4_Private", "Mandant_4", "Privat", "0%", "0%", "7%", "0%", "0%", "93%", "0%", "0%", "0%", "0%", "0%", "100%", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Die Grafik kann über einen Filter auf den Strasseneigentümer eingeschränkt werden" +
            ", 3", new string[] {
                "Automatisch"}, SourceLine=132)]
        public virtual void DieGrafikKannUberEinenFilterAufDenStrasseneigentumerEingeschranktWerden_3()
        {
            this.DieGrafikKannUberEinenFilterAufDenStrasseneigentumerEingeschranktWerden("3", "W1.1_Strassennamen_Mandant4_Korporation", "Mandant_4", "Korporation", "0%", "9%", "0%", "0%", "91%", "0%", "0%", "0%", "0%", "0%", "100%", "0%", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Die Grafik kann über einen Filter auf den Strasseneigentümer eingeschränkt werden" +
            ", 4", new string[] {
                "Automatisch"}, SourceLine=132)]
        public virtual void DieGrafikKannUberEinenFilterAufDenStrasseneigentumerEingeschranktWerden_4()
        {
            this.DieGrafikKannUberEinenFilterAufDenStrasseneigentumerEingeschranktWerden("4", "W1.1_Gis_Mandant5_Gemeinde", "Mandant_5", "Gemeinde", "0%", "0%", "0%", "100%", "0%", "0%", "0%", "0%", "0%", "100%", "0%", "0%", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Die Grafik kann über einen Filter auf den Strasseneigentümer eingeschränkt werden" +
            ", 5", new string[] {
                "Automatisch"}, SourceLine=132)]
        public virtual void DieGrafikKannUberEinenFilterAufDenStrasseneigentumerEingeschranktWerden_5()
        {
            this.DieGrafikKannUberEinenFilterAufDenStrasseneigentumerEingeschranktWerden("5", "W1.1_Gis_Mandant5_Private", "Mandant_5", "Privat", "0%", "0%", "12%", "0%", "0%", "88%", "0%", "0%", "0%", "0%", "0%", "100%", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Die Grafik kann über einen Filter auf den Strasseneigentümer eingeschränkt werden" +
            ", 6", new string[] {
                "Automatisch"}, SourceLine=132)]
        public virtual void DieGrafikKannUberEinenFilterAufDenStrasseneigentumerEingeschranktWerden_6()
        {
            this.DieGrafikKannUberEinenFilterAufDenStrasseneigentumerEingeschranktWerden("6", "W1.1_Gis_Mandant5_Korporation", "Mandant_5", "Korporation", "0%", "5%", "0%", "0%", "95%", "0%", "0%", "0%", "0%", "0%", "100%", "0%", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Reader kann die Grafik als PDF exportieren", new string[] {
                "Manuell"}, SourceLine=142)]
        public virtual void DerData_ReaderKannDieGrafikAlsPDFExportieren()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Data-Reader kann die Grafik als PDF exportieren", new string[] {
                        "Manuell"});
#line 143
this.ScenarioSetup(scenarioInfo);
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("W1.1 - Eine Grafik mit Mengen pro Belastungskategorie erhalten")]
    public partial class W1_1_EineGrafikMitMengenProBelastungskategorieErhaltenFeature_NUnit
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "W1.1.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("de-AT"), "W1.1 - Eine Grafik mit Mengen pro Belastungskategorie erhalten", "    Als Data-Reader\r\n    will ich eine Grafik mit Mengen pro Belastungskategorie " +
                    "erhalten\r\n    damit ich für Entscheidungsträger meiner Gemeinde eine Information" +
                    "sbasis habe und einen Überblick zu meinem Inventar erhalte", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Der Data-Reader kann die gewünschte Auswertung selektieren")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void DerData_ReaderKannDieGewunschteAuswertungSelektieren()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Data-Reader kann die gewünschte Auswertung selektieren", new string[] {
                        "Manuell"});
#line 9
this.ScenarioSetup(scenarioInfo);
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Der Data-Reader muss ein Jahr auswählen, für das vom System eine Inventarauswertu" +
            "ng generiert werden soll")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void DerData_ReaderMussEinJahrAuswahlenFurDasVomSystemEineInventarauswertungGeneriertWerdenSoll()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Data-Reader muss ein Jahr auswählen, für das vom System eine Inventarauswertu" +
                    "ng generiert werden soll", new string[] {
                        "Manuell"});
#line 14
this.ScenarioSetup(scenarioInfo);
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Vom System wird das Jahr des letzten Jahresabschlusses als default Wert vorselekt" +
            "iert")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void VomSystemWirdDasJahrDesLetztenJahresabschlussesAlsDefaultWertVorselektiert()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Vom System wird das Jahr des letzten Jahresabschlusses als default Wert vorselekt" +
                    "iert", new string[] {
                        "Manuell"});
#line 19
this.ScenarioSetup(scenarioInfo);
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Das System liefert eine Grafik mit Mengen pro Belastungskategorie des Mandanten (" +
            "summarischer Modus)")]
        [NUnit.Framework.CategoryAttribute("Automatisch")]
        [NUnit.Framework.TestCaseAttribute("1", "W1.1_Summarisch_Mandant1", "Mandant_1", "2%", "0%", "0%", "56%", "41%", "0%", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2", "W1.1_Summarisch_Mandant2", "Mandant_2", "0%", "0%", "2%", "41%", "56%", "0%", new string[0])]
        public virtual void DasSystemLiefertEineGrafikMitMengenProBelastungskategorieDesMandantenSummarischerModus(string tF, string referenzAuswertung, string mandant, string mengenanteilIA, string mengenanteilIB, string mengenanteilIC, string mengenanteilII, string mengenanteilIII, string mengenanteilIV, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Automatisch"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Das System liefert eine Grafik mit Mengen pro Belastungskategorie des Mandanten (" +
                    "summarischer Modus)", @__tags);
#line 24
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mandant",
                        "Modus",
                        "Mengentyp"});
            table1.AddRow(new string[] {
                        "Mandant_1",
                        "summarisch",
                        "Gesamtlänge"});
            table1.AddRow(new string[] {
                        "Mandant_2",
                        "summarisch",
                        "Gesamtfläche"});
#line 25
testRunner.Given("folgende Einstellungen existieren:", ((string)(null)), table1, "Gegeben sei ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Belastungskategorie",
                        "Menge Gesamtfläche"});
            table2.AddRow(new string[] {
                        "IA",
                        "107760"});
            table2.AddRow(new string[] {
                        "IB",
                        "5100"});
            table2.AddRow(new string[] {
                        "IC",
                        "795"});
            table2.AddRow(new string[] {
                        "II",
                        "2790000"});
            table2.AddRow(new string[] {
                        "III",
                        "2051200"});
            table2.AddRow(new string[] {
                        "IV",
                        "16200"});
#line 29
testRunner.And("für Mandant \'Mandant_1\' folgende summarische Zustands- und Netzinformationen exis" +
                    "tieren:", ((string)(null)), table2, "Und ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Belastungskategorie",
                        "Menge Gesamtfläche"});
            table3.AddRow(new string[] {
                        "IA",
                        "7950"});
            table3.AddRow(new string[] {
                        "IB",
                        "51000"});
            table3.AddRow(new string[] {
                        "IC",
                        "1077600"});
            table3.AddRow(new string[] {
                        "II",
                        "20512000"});
            table3.AddRow(new string[] {
                        "III",
                        "27900000"});
            table3.AddRow(new string[] {
                        "IV",
                        "162000"});
#line 37
testRunner.And("für Mandant \'Mandant_2\' folgende summarische Zustands- und Netzinformationen exis" +
                    "tieren:", ((string)(null)), table3, "Und ");
#line 45
testRunner.And(string.Format("ich habe alle Rollen für \'{0}\'", mandant), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line 46
testRunner.And("ich einen Jahresabschluss für das Jahr \'2010\' durchführe", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Filter",
                        "Filter Wert"});
            table4.AddRow(new string[] {
                        "Erfassungsperiode",
                        "2010"});
#line 47
testRunner.When("ich die Grafik mit Mengen pro Belastungskategorie generiere", ((string)(null)), table4, "Wenn ");
#line 50
testRunner.Then(string.Format("ist das Ergebnis das gleiche wie in der Referenz Auswertung \'{0}\'", referenzAuswertung), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mandant",
                        "Mengenanteil IA",
                        "Mengenanteil IB",
                        "Mengenanteil IC",
                        "Mengenanteil II",
                        "Mengenanteil III",
                        "Mengenanteil IV"});
            table5.AddRow(new string[] {
                        string.Format("{0}", mandant),
                        string.Format("{0}", mengenanteilIA),
                        string.Format("{0}", mengenanteilIB),
                        string.Format("{0}", mengenanteilIC),
                        string.Format("{0}", mengenanteilII),
                        string.Format("{0}", mengenanteilIII),
                        string.Format("{0}", mengenanteilIV)});
#line 51
testRunner.Then("zeigt die Grafik folgende Verteilung: (manuell)", ((string)(null)), table5, "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Das System liefert eine Grafik mit Mengen pro Belastungskategorie des Mandanten (" +
            "Strassennamen-Modus, GIS-Modus)")]
        [NUnit.Framework.CategoryAttribute("Automatisch")]
        [NUnit.Framework.TestCaseAttribute("4", "W1.1_Strassennamen_Mandant4", "Mandant_4", "", "0%", "2%", "3%", "27%", "23%", "44%", "0%", "0%", "0%", "23%", "30%", "47%", new string[0])]
        [NUnit.Framework.TestCaseAttribute("5", "W1.1_Gis_Mandant5", "Mandant_5", "", "0%", "2%", "3%", "27%", "44%", "23%", "0%", "0%", "0%", "23%", "47%", "30%", new string[0])]
        public virtual void DasSystemLiefertEineGrafikMitMengenProBelastungskategorieDesMandantenStrassennamen_ModusGIS_Modus(
                    string tF, 
                    string referenzAuswertung, 
                    string mandant, 
                    string strasseneigentumer, 
                    string mengenanteilIAFB, 
                    string mengenanteilIBFB, 
                    string mengenanteilICFB, 
                    string mengenanteilIIFB, 
                    string mengenanteilIIIFB, 
                    string mengenanteilIVFB, 
                    string mengenanteilIATR, 
                    string mengenanteilIBTR, 
                    string mengenanteilICTR, 
                    string mengenanteilIITR, 
                    string mengenanteilIIITR, 
                    string mengenanteilIVTR, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Automatisch"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Das System liefert eine Grafik mit Mengen pro Belastungskategorie des Mandanten (" +
                    "Strassennamen-Modus, GIS-Modus)", @__tags);
#line 60
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mandant",
                        "Modus"});
            table6.AddRow(new string[] {
                        "Mandant_4",
                        "strassennamen"});
            table6.AddRow(new string[] {
                        "Mandant_5",
                        "GIS"});
#line 61
testRunner.Given("folgende Einstellungen existieren:", ((string)(null)), table6, "Gegeben sei ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Belastungskategorie",
                        "BreiteFahrbahn",
                        "Länge",
                        "Trottoir",
                        "BreiteTrottoirLinks",
                        "BreiteTrottoirRechts"});
            table7.AddRow(new string[] {
                        "II",
                        "19,56",
                        "1800",
                        "KeinTrottoir",
                        "0",
                        "0"});
            table7.AddRow(new string[] {
                        "IV",
                        "19",
                        "5000",
                        "Links",
                        "2,32",
                        "0"});
            table7.AddRow(new string[] {
                        "III",
                        "20",
                        "2500",
                        "Rechts",
                        "0",
                        "2,90"});
            table7.AddRow(new string[] {
                        "II",
                        "18",
                        "1300",
                        "BeideSeiten",
                        "1,40",
                        "3"});
            table7.AddRow(new string[] {
                        "IC",
                        "8,45",
                        "800",
                        "NochNichtErfasst",
                        "-",
                        "-"});
            table7.AddRow(new string[] {
                        "IB",
                        "12,87",
                        "400",
                        "KeinTrottoir",
                        "0",
                        "0"});
#line 65
testRunner.And("für Mandant \'Mandant_4\' existieren folgende Netzinformationen:", ((string)(null)), table7, "Und ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Belastungskategorie",
                        "BreiteFahrbahn",
                        "Länge",
                        "Trottoir",
                        "BreiteTrottoirLinks",
                        "BreiteTrottoirRechts"});
            table8.AddRow(new string[] {
                        "II",
                        "19,56",
                        "1800",
                        "KeinTrottoir",
                        "0",
                        "0"});
            table8.AddRow(new string[] {
                        "III",
                        "19",
                        "5000",
                        "Links",
                        "2,32",
                        "0"});
            table8.AddRow(new string[] {
                        "IV",
                        "20",
                        "2500",
                        "Rechts",
                        "0",
                        "2,90"});
            table8.AddRow(new string[] {
                        "II",
                        "18",
                        "1300",
                        "BeideSeiten",
                        "1,40",
                        "3"});
            table8.AddRow(new string[] {
                        "IC",
                        "8,45",
                        "800",
                        "NochNichtErfasst",
                        "-",
                        "-"});
            table8.AddRow(new string[] {
                        "IB",
                        "12,87",
                        "400",
                        "KeinTrottoir",
                        "0",
                        "0"});
#line 73
testRunner.And("für Mandant \'Mandant_5\' existieren folgende GIS Netzinformationen:", ((string)(null)), table8, "Und ");
#line 81
testRunner.And(string.Format("ich habe alle Rollen für \'{0}\'", mandant), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line 82
testRunner.And("ich einen Jahresabschluss für das Jahr \'2010\' durchführe", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Filter",
                        "Filter Wert"});
            table9.AddRow(new string[] {
                        "Erfassungsperiode",
                        "2010"});
#line 83
testRunner.When("ich die Grafik mit Mengen pro Belastungskategorie generiere", ((string)(null)), table9, "Wenn ");
#line 86
testRunner.Then(string.Format("ist das Ergebnis das gleiche wie in der Referenz Auswertung \'{0}\'", referenzAuswertung), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mandant",
                        "Mengenanteil IA FB",
                        "Mengenanteil IB FB",
                        "Mengenanteil IC FB",
                        "Mengenanteil II FB",
                        "Mengenanteil III FB",
                        "Mengenanteil IV FB",
                        "Mengenanteil IA TR",
                        "Mengenanteil IB TR",
                        "Mengenanteil IC TR",
                        "Mengenanteil II TR",
                        "Mengenanteil III TR",
                        "Mengenanteil IV TR"});
            table10.AddRow(new string[] {
                        string.Format("{0}", mandant),
                        string.Format("{0}", mengenanteilIAFB),
                        string.Format("{0}", mengenanteilIBFB),
                        string.Format("{0}", mengenanteilICFB),
                        string.Format("{0}", mengenanteilIIFB),
                        string.Format("{0}", mengenanteilIIIFB),
                        string.Format("{0}", mengenanteilIVFB),
                        string.Format("{0}", mengenanteilIATR),
                        string.Format("{0}", mengenanteilIBTR),
                        string.Format("{0}", mengenanteilICTR),
                        string.Format("{0}", mengenanteilIITR),
                        string.Format("{0}", mengenanteilIIITR),
                        string.Format("{0}", mengenanteilIVTR)});
#line 87
testRunner.Then("zeigt die Grafik folgende Verteilung: (manuell)", ((string)(null)), table10, "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Die Grafik kann über einen Filter auf den Strasseneigentümer eingeschränkt werden" +
            "")]
        [NUnit.Framework.CategoryAttribute("Automatisch")]
        [NUnit.Framework.TestCaseAttribute("1", "W1.1_Strassennamen_Mandant4_Gemeinde", "Mandant_4", "Gemeinde", "0%", "0%", "0%", "100%", "0%", "0%", "0%", "0%", "0%", "100%", "0%", "0%", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2", "W1.1_Strassennamen_Mandant4_Private", "Mandant_4", "Privat", "0%", "0%", "7%", "0%", "0%", "93%", "0%", "0%", "0%", "0%", "0%", "100%", new string[0])]
        [NUnit.Framework.TestCaseAttribute("3", "W1.1_Strassennamen_Mandant4_Korporation", "Mandant_4", "Korporation", "0%", "9%", "0%", "0%", "91%", "0%", "0%", "0%", "0%", "0%", "100%", "0%", new string[0])]
        [NUnit.Framework.TestCaseAttribute("4", "W1.1_Gis_Mandant5_Gemeinde", "Mandant_5", "Gemeinde", "0%", "0%", "0%", "100%", "0%", "0%", "0%", "0%", "0%", "100%", "0%", "0%", new string[0])]
        [NUnit.Framework.TestCaseAttribute("5", "W1.1_Gis_Mandant5_Private", "Mandant_5", "Privat", "0%", "0%", "12%", "0%", "0%", "88%", "0%", "0%", "0%", "0%", "0%", "100%", new string[0])]
        [NUnit.Framework.TestCaseAttribute("6", "W1.1_Gis_Mandant5_Korporation", "Mandant_5", "Korporation", "0%", "5%", "0%", "0%", "95%", "0%", "0%", "0%", "0%", "0%", "100%", "0%", new string[0])]
        public virtual void DieGrafikKannUberEinenFilterAufDenStrasseneigentumerEingeschranktWerden(
                    string tF, 
                    string referenzAuswertung, 
                    string mandant, 
                    string strasseneigentumer, 
                    string mengenanteilIAFB, 
                    string mengenanteilIBFB, 
                    string mengenanteilICFB, 
                    string mengenanteilIIFB, 
                    string mengenanteilIIIFB, 
                    string mengenanteilIVFB, 
                    string mengenanteilIATR, 
                    string mengenanteilIBTR, 
                    string mengenanteilICTR, 
                    string mengenanteilIITR, 
                    string mengenanteilIIITR, 
                    string mengenanteilIVTR, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Automatisch"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Die Grafik kann über einen Filter auf den Strasseneigentümer eingeschränkt werden" +
                    "", @__tags);
#line 99
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mandant",
                        "Modus"});
            table11.AddRow(new string[] {
                        "Mandant_4",
                        "strassennamen"});
            table11.AddRow(new string[] {
                        "Mandant_5",
                        "GIS"});
#line 100
testRunner.Given("folgende Einstellungen existieren:", ((string)(null)), table11, "Gegeben sei ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Belastungskategorie",
                        "BreiteFahrbahn",
                        "Länge",
                        "Trottoir",
                        "BreiteTrottoirLinks",
                        "BreiteTrottoirRechts",
                        "Strasseneigentümer"});
            table12.AddRow(new string[] {
                        "II",
                        "19,56",
                        "1800",
                        "KeinTrottoir",
                        "0",
                        "0",
                        "Gemeinde"});
            table12.AddRow(new string[] {
                        "IV",
                        "19",
                        "5000",
                        "Links",
                        "2,32",
                        "0",
                        "Privat"});
            table12.AddRow(new string[] {
                        "III",
                        "20",
                        "2500",
                        "Rechts",
                        "0",
                        "2,90",
                        "Korporation"});
            table12.AddRow(new string[] {
                        "II",
                        "18",
                        "1300",
                        "BeideSeiten",
                        "1,40",
                        "3",
                        "Gemeinde"});
            table12.AddRow(new string[] {
                        "IC",
                        "8,45",
                        "800",
                        "NochNichtErfasst",
                        "-",
                        "-",
                        "Privat"});
            table12.AddRow(new string[] {
                        "IB",
                        "12,87",
                        "400",
                        "KeinTrottoir",
                        "0",
                        "0",
                        "Korporation"});
#line 104
testRunner.And("für Mandant \'Mandant_4\' existieren folgende Netzinformationen:", ((string)(null)), table12, "Und ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Belastungskategorie",
                        "BreiteFahrbahn",
                        "Länge",
                        "Trottoir",
                        "BreiteTrottoirLinks",
                        "BreiteTrottoirRechts",
                        "Strasseneigentümer"});
            table13.AddRow(new string[] {
                        "II",
                        "19,56",
                        "1800",
                        "KeinTrottoir",
                        "0",
                        "0",
                        "Gemeinde"});
            table13.AddRow(new string[] {
                        "III",
                        "19",
                        "5000",
                        "Links",
                        "2,32",
                        "0",
                        "Korporation"});
            table13.AddRow(new string[] {
                        "IV",
                        "20",
                        "2500",
                        "Rechts",
                        "0",
                        "2,90",
                        "Privat"});
            table13.AddRow(new string[] {
                        "II",
                        "18",
                        "1300",
                        "BeideSeiten",
                        "1,40",
                        "3",
                        "Gemeinde"});
            table13.AddRow(new string[] {
                        "IC",
                        "8,45",
                        "800",
                        "NochNichtErfasst",
                        "-",
                        "-",
                        "Privat"});
            table13.AddRow(new string[] {
                        "IB",
                        "12,87",
                        "400",
                        "KeinTrottoir",
                        "0",
                        "0",
                        "Korporation"});
#line 112
testRunner.And("für Mandant \'Mandant_5\' existieren folgende GIS Netzinformationen:", ((string)(null)), table13, "Und ");
#line 120
testRunner.And(string.Format("ich habe alle Rollen für \'{0}\'", mandant), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line 121
testRunner.And("ich einen Jahresabschluss für das Jahr \'2010\' durchführe", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Filter",
                        "Filter Wert"});
            table14.AddRow(new string[] {
                        "Erfassungsperiode",
                        "2010"});
            table14.AddRow(new string[] {
                        "Strasseneigentümer",
                        string.Format("{0}", strasseneigentumer)});
#line 122
testRunner.When("ich die Grafik mit Mengen pro Belastungskategorie generiere", ((string)(null)), table14, "Wenn ");
#line 126
testRunner.Then(string.Format("ist das Ergebnis das gleiche wie in der Referenz Auswertung \'{0}\'", referenzAuswertung), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mandant",
                        "Strasseneigentümer",
                        "Mengenanteil IA FB",
                        "Mengenanteil IB FB",
                        "Mengenanteil IC FB",
                        "Mengenanteil II FB",
                        "Mengenanteil III FB",
                        "Mengenanteil IV FB",
                        "Mengenanteil IA TR",
                        "Mengenanteil IB TR",
                        "Mengenanteil IC TR",
                        "Mengenanteil II TR",
                        "Mengenanteil III TR",
                        "Mengenanteil IV TR"});
            table15.AddRow(new string[] {
                        string.Format("{0}", mandant),
                        string.Format("{0}", strasseneigentumer),
                        string.Format("{0}", mengenanteilIAFB),
                        string.Format("{0}", mengenanteilIBFB),
                        string.Format("{0}", mengenanteilICFB),
                        string.Format("{0}", mengenanteilIIFB),
                        string.Format("{0}", mengenanteilIIIFB),
                        string.Format("{0}", mengenanteilIVFB),
                        string.Format("{0}", mengenanteilIATR),
                        string.Format("{0}", mengenanteilIBTR),
                        string.Format("{0}", mengenanteilICTR),
                        string.Format("{0}", mengenanteilIITR),
                        string.Format("{0}", mengenanteilIIITR),
                        string.Format("{0}", mengenanteilIVTR)});
#line 127
testRunner.Then("zeigt die Grafik folgende Verteilung: (manuell)", ((string)(null)), table15, "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Der Data-Reader kann die Grafik als PDF exportieren")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void DerData_ReaderKannDieGrafikAlsPDFExportieren()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Data-Reader kann die Grafik als PDF exportieren", new string[] {
                        "Manuell"});
#line 143
this.ScenarioSetup(scenarioInfo);
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
