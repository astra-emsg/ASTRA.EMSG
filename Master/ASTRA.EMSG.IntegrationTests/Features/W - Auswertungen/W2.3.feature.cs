// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ASTRA.EMSG.IntegrationTests.Features.W_Auswertungen
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("W2.3 - Eine Grafik zum Wiederbeschaffungswert und Wertverlust erhalten", Description=@"    Als Data-Reader,
	will ich eine Grafik zum Wiederbeschaffungswert und Wertverlust erhalten
	damit ich für Entscheidungsträger meiner Gemeinde eine Informationsbasis habe und einen Überblick zu meinem Wiederbeschaffungswert und jährlichen Wertverlust erhalte", SourceFile="Features\\W - Auswertungen\\W2.3.feature", SourceLine=0)]
    public partial class W2_3_EineGrafikZumWiederbeschaffungswertUndWertverlustErhaltenFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "W2.3.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("de-AT"), "W2.3 - Eine Grafik zum Wiederbeschaffungswert und Wertverlust erhalten", @"    Als Data-Reader,
	will ich eine Grafik zum Wiederbeschaffungswert und Wertverlust erhalten
	damit ich für Entscheidungsträger meiner Gemeinde eine Informationsbasis habe und einen Überblick zu meinem Wiederbeschaffungswert und jährlichen Wertverlust erhalte", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Reader kann ein Jahr auswählen, für das vom System die Auswertung generi" +
            "ert werden soll", new string[] {
                "Manuell"}, SourceLine=8)]
        public virtual void DerData_ReaderKannEinJahrAuswahlenFurDasVomSystemDieAuswertungGeneriertWerdenSoll()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Data-Reader kann ein Jahr auswählen, für das vom System die Auswertung generi" +
                    "ert werden soll", new string[] {
                        "Manuell"});
#line 9
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Jahr"});
            table1.AddRow(new string[] {
                        "2008"});
            table1.AddRow(new string[] {
                        "2009"});
#line 10
testRunner.Given("es gibt Jahresabschlüsse für folgende Jahre:", ((string)(null)), table1, "Gegeben sei ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Jahr"});
            table2.AddRow(new string[] {
                        "Aktuelles Erfassungsjahr"});
            table2.AddRow(new string[] {
                        "2009"});
            table2.AddRow(new string[] {
                        "2008"});
#line 14
testRunner.Then("kann ich folgende Jahre für ausgefüllte Erfassungsformulare auswählen:", ((string)(null)), table2, "Dann ");
#line 19
testRunner.And("der Eintrag \'Aktuelles Erfassungsjahr\' ist vorausgewählt", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Das System generiert eine Vorschau der Auswertung am UI", new string[] {
                "Manuell"}, SourceLine=23)]
        public virtual void DasSystemGeneriertEineVorschauDerAuswertungAmUI()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Das System generiert eine Vorschau der Auswertung am UI", new string[] {
                        "Manuell"});
#line 24
this.ScenarioSetup(scenarioInfo);
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Das System liefert eine Grafik zum Wiederbeschaffungswert und jährlichen Wertverl" +
            "ust des Strassennetzes des Mandanten", new string[] {
                "Manuell"}, SourceLine=29)]
        public virtual void DasSystemLiefertEineGrafikZumWiederbeschaffungswertUndJahrlichenWertverlustDesStrassennetzesDesMandanten()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Das System liefert eine Grafik zum Wiederbeschaffungswert und jährlichen Wertverl" +
                    "ust des Strassennetzes des Mandanten", new string[] {
                        "Manuell"});
#line 30
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mandant",
                        "Modus"});
            table3.AddRow(new string[] {
                        "Mandant_1",
                        "strassennamen"});
#line 31
testRunner.Given("folgende Einstellungen existieren:", ((string)(null)), table3, "Gegeben sei ");
#line 34
testRunner.And("ich bin Data-Manager von \'Mandant_1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Strassenname",
                        "BezeichnungVon",
                        "BezeichnungBis",
                        "Belastungskategorie",
                        "BreiteFahrbahn",
                        "Länge",
                        "Trottoir",
                        "BreiteTrottoirLinks",
                        "BreiteTrottoirRechts",
                        "Belag"});
            table4.AddRow(new string[] {
                        "1",
                        "AsphaltII",
                        "Bahnhof",
                        "Spital",
                        "II",
                        "19,56",
                        "1800",
                        "KeinTrottoir",
                        "0",
                        "0",
                        "Asphalt"});
            table4.AddRow(new string[] {
                        "2",
                        "AsphaltIV",
                        "",
                        "",
                        "IV",
                        "19",
                        "5000",
                        "Links",
                        "2,32",
                        "0",
                        "Asphalt"});
            table4.AddRow(new string[] {
                        "3",
                        "AsphaltIII",
                        "",
                        "",
                        "III",
                        "20",
                        "2500",
                        "Rechts",
                        "0",
                        "2,90",
                        "Asphalt"});
            table4.AddRow(new string[] {
                        "4",
                        "BetonII",
                        "",
                        "",
                        "II",
                        "18",
                        "1300",
                        "BeideSeiten",
                        "1,40",
                        "3",
                        "Beton"});
            table4.AddRow(new string[] {
                        "5",
                        "BetonIC",
                        "",
                        "",
                        "IC",
                        "8,45",
                        "800",
                        "NochNichtErfasst",
                        "-",
                        "-",
                        "Beton"});
            table4.AddRow(new string[] {
                        "6",
                        "BetonIB",
                        "",
                        "",
                        "IB",
                        "12,87",
                        "400",
                        "KeinTrottoir",
                        "0",
                        "0",
                        "Beton"});
#line 35
testRunner.And("für Mandant \'Mandant_1\' existieren folgende Netzinformationen:", ((string)(null)), table4, "Und ");
#line 43
testRunner.And("ich habe alle Rollen für \'<Mandant>\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line 44
testRunner.And("es wurden vom Benutzeradministrator keine mandantenspezifische Wiederbeschaffungs" +
                    "werte definiert", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line 45
testRunner.And("es wurden vom Benutzeradministrator keine mandantenspezifische Alterungsbeiwerte " +
                    "definiert", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line 46
testRunner.When("ich einen Jahresabschluss für das Jahr \'2010\' durchführe", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Filter",
                        "Filter Wert"});
            table5.AddRow(new string[] {
                        "Erfassungsperiode",
                        "2010"});
#line 47
testRunner.And("ich die Grafik zum Wiederbeschaffungswert und jährlichen Wertverlust des Strassen" +
                    "netzes generiere", ((string)(null)), table5, "Und ");
#line 50
testRunner.Then("ist das Ergebnis das gleiche wie in der Referenz Auswertung \'W2.3_Strassennamen_M" +
                    "andant1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Belastungskategorie",
                        "Wiederbeschaffungswert",
                        "WertverlustI",
                        "Wertverlust II"});
            table6.AddRow(new string[] {
                        "IA",
                        "0%",
                        "0%",
                        "0"});
            table6.AddRow(new string[] {
                        "IB",
                        "1,7%",
                        "1,7%",
                        "1,6%"});
            table6.AddRow(new string[] {
                        "IC",
                        "0,9%",
                        "0,9%",
                        "0,6%"});
            table6.AddRow(new string[] {
                        "II",
                        "21,9%",
                        "21,9%",
                        "24,2%"});
            table6.AddRow(new string[] {
                        "III",
                        "25,4%",
                        "25,4%",
                        "25,9%"});
            table6.AddRow(new string[] {
                        "IV",
                        "50,1%",
                        "50,1%",
                        "47,6%"});
#line 51
testRunner.Then("zeigt die Grafik folgende Verteilung: (manuell)", ((string)(null)), table6, "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Reader kann die Grafik auf den Strasseneigentümer filtern", new string[] {
                "Manuell"}, SourceLine=62)]
        public virtual void DerData_ReaderKannDieGrafikAufDenStrasseneigentumerFiltern()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Data-Reader kann die Grafik auf den Strasseneigentümer filtern", new string[] {
                        "Manuell"});
#line 63
this.ScenarioSetup(scenarioInfo);
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Reader kann die Vorschau als PDF exportieren", new string[] {
                "Manuell"}, SourceLine=67)]
        public virtual void DerData_ReaderKannDieVorschauAlsPDFExportieren()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Data-Reader kann die Vorschau als PDF exportieren", new string[] {
                        "Manuell"});
#line 68
this.ScenarioSetup(scenarioInfo);
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("W2.3 - Eine Grafik zum Wiederbeschaffungswert und Wertverlust erhalten")]
    public partial class W2_3_EineGrafikZumWiederbeschaffungswertUndWertverlustErhaltenFeature_NUnit
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "W2.3.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("de-AT"), "W2.3 - Eine Grafik zum Wiederbeschaffungswert und Wertverlust erhalten", @"    Als Data-Reader,
	will ich eine Grafik zum Wiederbeschaffungswert und Wertverlust erhalten
	damit ich für Entscheidungsträger meiner Gemeinde eine Informationsbasis habe und einen Überblick zu meinem Wiederbeschaffungswert und jährlichen Wertverlust erhalte", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Der Data-Reader kann ein Jahr auswählen, für das vom System die Auswertung generi" +
            "ert werden soll")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void DerData_ReaderKannEinJahrAuswahlenFurDasVomSystemDieAuswertungGeneriertWerdenSoll()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Data-Reader kann ein Jahr auswählen, für das vom System die Auswertung generi" +
                    "ert werden soll", new string[] {
                        "Manuell"});
#line 9
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Jahr"});
            table1.AddRow(new string[] {
                        "2008"});
            table1.AddRow(new string[] {
                        "2009"});
#line 10
testRunner.Given("es gibt Jahresabschlüsse für folgende Jahre:", ((string)(null)), table1, "Gegeben sei ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Jahr"});
            table2.AddRow(new string[] {
                        "Aktuelles Erfassungsjahr"});
            table2.AddRow(new string[] {
                        "2009"});
            table2.AddRow(new string[] {
                        "2008"});
#line 14
testRunner.Then("kann ich folgende Jahre für ausgefüllte Erfassungsformulare auswählen:", ((string)(null)), table2, "Dann ");
#line 19
testRunner.And("der Eintrag \'Aktuelles Erfassungsjahr\' ist vorausgewählt", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Das System generiert eine Vorschau der Auswertung am UI")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void DasSystemGeneriertEineVorschauDerAuswertungAmUI()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Das System generiert eine Vorschau der Auswertung am UI", new string[] {
                        "Manuell"});
#line 24
this.ScenarioSetup(scenarioInfo);
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Das System liefert eine Grafik zum Wiederbeschaffungswert und jährlichen Wertverl" +
            "ust des Strassennetzes des Mandanten")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void DasSystemLiefertEineGrafikZumWiederbeschaffungswertUndJahrlichenWertverlustDesStrassennetzesDesMandanten()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Das System liefert eine Grafik zum Wiederbeschaffungswert und jährlichen Wertverl" +
                    "ust des Strassennetzes des Mandanten", new string[] {
                        "Manuell"});
#line 30
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mandant",
                        "Modus"});
            table3.AddRow(new string[] {
                        "Mandant_1",
                        "strassennamen"});
#line 31
testRunner.Given("folgende Einstellungen existieren:", ((string)(null)), table3, "Gegeben sei ");
#line 34
testRunner.And("ich bin Data-Manager von \'Mandant_1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Strassenname",
                        "BezeichnungVon",
                        "BezeichnungBis",
                        "Belastungskategorie",
                        "BreiteFahrbahn",
                        "Länge",
                        "Trottoir",
                        "BreiteTrottoirLinks",
                        "BreiteTrottoirRechts",
                        "Belag"});
            table4.AddRow(new string[] {
                        "1",
                        "AsphaltII",
                        "Bahnhof",
                        "Spital",
                        "II",
                        "19,56",
                        "1800",
                        "KeinTrottoir",
                        "0",
                        "0",
                        "Asphalt"});
            table4.AddRow(new string[] {
                        "2",
                        "AsphaltIV",
                        "",
                        "",
                        "IV",
                        "19",
                        "5000",
                        "Links",
                        "2,32",
                        "0",
                        "Asphalt"});
            table4.AddRow(new string[] {
                        "3",
                        "AsphaltIII",
                        "",
                        "",
                        "III",
                        "20",
                        "2500",
                        "Rechts",
                        "0",
                        "2,90",
                        "Asphalt"});
            table4.AddRow(new string[] {
                        "4",
                        "BetonII",
                        "",
                        "",
                        "II",
                        "18",
                        "1300",
                        "BeideSeiten",
                        "1,40",
                        "3",
                        "Beton"});
            table4.AddRow(new string[] {
                        "5",
                        "BetonIC",
                        "",
                        "",
                        "IC",
                        "8,45",
                        "800",
                        "NochNichtErfasst",
                        "-",
                        "-",
                        "Beton"});
            table4.AddRow(new string[] {
                        "6",
                        "BetonIB",
                        "",
                        "",
                        "IB",
                        "12,87",
                        "400",
                        "KeinTrottoir",
                        "0",
                        "0",
                        "Beton"});
#line 35
testRunner.And("für Mandant \'Mandant_1\' existieren folgende Netzinformationen:", ((string)(null)), table4, "Und ");
#line 43
testRunner.And("ich habe alle Rollen für \'<Mandant>\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line 44
testRunner.And("es wurden vom Benutzeradministrator keine mandantenspezifische Wiederbeschaffungs" +
                    "werte definiert", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line 45
testRunner.And("es wurden vom Benutzeradministrator keine mandantenspezifische Alterungsbeiwerte " +
                    "definiert", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line 46
testRunner.When("ich einen Jahresabschluss für das Jahr \'2010\' durchführe", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Filter",
                        "Filter Wert"});
            table5.AddRow(new string[] {
                        "Erfassungsperiode",
                        "2010"});
#line 47
testRunner.And("ich die Grafik zum Wiederbeschaffungswert und jährlichen Wertverlust des Strassen" +
                    "netzes generiere", ((string)(null)), table5, "Und ");
#line 50
testRunner.Then("ist das Ergebnis das gleiche wie in der Referenz Auswertung \'W2.3_Strassennamen_M" +
                    "andant1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Belastungskategorie",
                        "Wiederbeschaffungswert",
                        "WertverlustI",
                        "Wertverlust II"});
            table6.AddRow(new string[] {
                        "IA",
                        "0%",
                        "0%",
                        "0"});
            table6.AddRow(new string[] {
                        "IB",
                        "1,7%",
                        "1,7%",
                        "1,6%"});
            table6.AddRow(new string[] {
                        "IC",
                        "0,9%",
                        "0,9%",
                        "0,6%"});
            table6.AddRow(new string[] {
                        "II",
                        "21,9%",
                        "21,9%",
                        "24,2%"});
            table6.AddRow(new string[] {
                        "III",
                        "25,4%",
                        "25,4%",
                        "25,9%"});
            table6.AddRow(new string[] {
                        "IV",
                        "50,1%",
                        "50,1%",
                        "47,6%"});
#line 51
testRunner.Then("zeigt die Grafik folgende Verteilung: (manuell)", ((string)(null)), table6, "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Der Data-Reader kann die Grafik auf den Strasseneigentümer filtern")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void DerData_ReaderKannDieGrafikAufDenStrasseneigentumerFiltern()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Data-Reader kann die Grafik auf den Strasseneigentümer filtern", new string[] {
                        "Manuell"});
#line 63
this.ScenarioSetup(scenarioInfo);
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Der Data-Reader kann die Vorschau als PDF exportieren")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void DerData_ReaderKannDieVorschauAlsPDFExportieren()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Data-Reader kann die Vorschau als PDF exportieren", new string[] {
                        "Manuell"});
#line 68
this.ScenarioSetup(scenarioInfo);
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
