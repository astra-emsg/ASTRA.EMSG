// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ASTRA.EMSG.IntegrationTests.Features.N_Netzverwaltung
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("N1 - Strassenmengen pro Belastungskategorie verwalten; Z1 - Zustand summarisch er" +
        "fassen", Description="\tAls Data-Manager\r\n\twill ich Strassenmengen pro Belastungskategorie verwalten\r\n\td" +
        "amit ich Auswertungen des Grundmodells Werterhaltung durchführen kann", SourceFile="Features\\N - Netzverwaltung\\N1Z1.feature", SourceLine=0)]
    public partial class N1_StrassenmengenProBelastungskategorieVerwaltenZ1_ZustandSummarischErfassenFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "N1Z1.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("de-AT"), "N1 - Strassenmengen pro Belastungskategorie verwalten; Z1 - Zustand summarisch er" +
                    "fassen", "\tAls Data-Manager\r\n\twill ich Strassenmengen pro Belastungskategorie verwalten\r\n\td" +
                    "amit ich Auswertungen des Grundmodells Werterhaltung durchführen kann", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Es gibt 6 Belastungskategorien", new string[] {
                "Manuell"}, SourceLine=8)]
        public virtual void EsGibt6Belastungskategorien()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Es gibt 6 Belastungskategorien", new string[] {
                        "Manuell"});
#line 9
this.ScenarioSetup(scenarioInfo);
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void DerData_ManagerKannEntwederGesamtlangeUndGesamtflacheDerFahrbahnenJeBelastungskategorieErfassen(string tF, string mengentyp, string belastungskategorie, string mengeGesamtlange, string mengeGesamtflache, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Automatisch"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Data-Manager kann entweder ‚Gesamtlänge‘ und ‚Gesamtfläche der Fahrbahnen‘ je" +
                    " Belastungskategorie erfassen", @__tags);
#line 14
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mandant",
                        "Modus"});
            table1.AddRow(new string[] {
                        "Mandant_1",
                        "summarisch"});
#line 15
 testRunner.Given("folgende Einstellungen existieren:", ((string)(null)), table1, "Gegeben sei ");
#line 19
 testRunner.And("ich bin Data-Manager von \'Mandant_1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Belastungskategorie",
                        "Mittlerer Zustand",
                        "Menge",
                        "Fahrbahnlaenge"});
            table2.AddRow(new string[] {
                        string.Format("{0}", belastungskategorie),
                        "2,1",
                        "20",
                        "30"});
#line 21
 testRunner.When("ich folgende summarische Zustands- und Netzinformationen eingebe:", ((string)(null)), table2, "Wenn ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mandant",
                        "Belastungskategorie",
                        "Mittlerer Zustand",
                        "Menge Gesamtlänge",
                        "Menge Gesamtfläche"});
            table3.AddRow(new string[] {
                        "Mandant_1",
                        string.Format("{0}", belastungskategorie),
                        "2,1",
                        string.Format("{0}", mengeGesamtlange),
                        string.Format("{0}", mengeGesamtflache)});
#line 25
 testRunner.Then("sind folgende summarische Zustands- und Netzinformationen im System:", ((string)(null)), table3, "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Manager kann entweder ‚Gesamtlänge‘ und ‚Gesamtfläche der Fahrbahnen‘ je" +
            " Belastungskategorie erfassen, 1", new string[] {
                "Automatisch"}, SourceLine=30)]
        public virtual void DerData_ManagerKannEntwederGesamtlangeUndGesamtflacheDerFahrbahnenJeBelastungskategorieErfassen_1()
        {
            this.DerData_ManagerKannEntwederGesamtlangeUndGesamtflacheDerFahrbahnenJeBelastungskategorieErfassen("1", "Gesamtlänge", "IA", "30", "20", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Manager kann entweder ‚Gesamtlänge‘ und ‚Gesamtfläche der Fahrbahnen‘ je" +
            " Belastungskategorie erfassen, 3", new string[] {
                "Automatisch"}, SourceLine=30)]
        public virtual void DerData_ManagerKannEntwederGesamtlangeUndGesamtflacheDerFahrbahnenJeBelastungskategorieErfassen_3()
        {
            this.DerData_ManagerKannEntwederGesamtlangeUndGesamtflacheDerFahrbahnenJeBelastungskategorieErfassen("3", "Gesamtlänge", "IB", "30", "20", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Manager kann entweder ‚Gesamtlänge‘ und ‚Gesamtfläche der Fahrbahnen‘ je" +
            " Belastungskategorie erfassen, 5", new string[] {
                "Automatisch"}, SourceLine=30)]
        public virtual void DerData_ManagerKannEntwederGesamtlangeUndGesamtflacheDerFahrbahnenJeBelastungskategorieErfassen_5()
        {
            this.DerData_ManagerKannEntwederGesamtlangeUndGesamtflacheDerFahrbahnenJeBelastungskategorieErfassen("5", "Gesamtlänge", "IC", "30", "20", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Manager kann entweder ‚Gesamtlänge‘ und ‚Gesamtfläche der Fahrbahnen‘ je" +
            " Belastungskategorie erfassen, 7", new string[] {
                "Automatisch"}, SourceLine=30)]
        public virtual void DerData_ManagerKannEntwederGesamtlangeUndGesamtflacheDerFahrbahnenJeBelastungskategorieErfassen_7()
        {
            this.DerData_ManagerKannEntwederGesamtlangeUndGesamtflacheDerFahrbahnenJeBelastungskategorieErfassen("7", "Gesamtlänge", "II", "30", "20", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Manager kann entweder ‚Gesamtlänge‘ und ‚Gesamtfläche der Fahrbahnen‘ je" +
            " Belastungskategorie erfassen, 9", new string[] {
                "Automatisch"}, SourceLine=30)]
        public virtual void DerData_ManagerKannEntwederGesamtlangeUndGesamtflacheDerFahrbahnenJeBelastungskategorieErfassen_9()
        {
            this.DerData_ManagerKannEntwederGesamtlangeUndGesamtflacheDerFahrbahnenJeBelastungskategorieErfassen("9", "Gesamtlänge", "III", "30", "20", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Manager kann entweder ‚Gesamtlänge‘ und ‚Gesamtfläche der Fahrbahnen‘ je" +
            " Belastungskategorie erfassen, 11", new string[] {
                "Automatisch"}, SourceLine=30)]
        public virtual void DerData_ManagerKannEntwederGesamtlangeUndGesamtflacheDerFahrbahnenJeBelastungskategorieErfassen_11()
        {
            this.DerData_ManagerKannEntwederGesamtlangeUndGesamtflacheDerFahrbahnenJeBelastungskategorieErfassen("11", "Gesamtlänge", "IV", "30", "20", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Manager kann entweder ‚Gesamtlänge‘ und ‚Gesamtfläche der Fahrbahnen‘ je" +
            " Belastungskategorie erfassen, 12", new string[] {
                "Automatisch"}, SourceLine=30)]
        public virtual void DerData_ManagerKannEntwederGesamtlangeUndGesamtflacheDerFahrbahnenJeBelastungskategorieErfassen_12()
        {
            this.DerData_ManagerKannEntwederGesamtlangeUndGesamtflacheDerFahrbahnenJeBelastungskategorieErfassen("12", "Gesamtfläche", "IV", "30", "20", ((string[])(null)));
#line hidden
        }
        
        public virtual void DerData_ManagerKannErfassteMengenBearbeiten(string tF, string mengentyp, string belastungskategorie, string mengeGesamtlange, string mengeGesamtflache, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Automatisch"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Data-Manager kann erfasste Mengen bearbeiten", @__tags);
#line 42
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mandant",
                        "Modus"});
            table4.AddRow(new string[] {
                        "Mandant_1",
                        "summarisch"});
#line 43
 testRunner.Given("folgende Einstellungen existieren:", ((string)(null)), table4, "Gegeben sei ");
#line 47
 testRunner.And("ich bin Data-Manager von \'Mandant_1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Belastungskategorie",
                        "Mittlerer Zustand",
                        "Menge Gesamtlänge",
                        "Menge Gesamtfläche"});
            table5.AddRow(new string[] {
                        string.Format("{0}", belastungskategorie),
                        "3,4",
                        "100,5",
                        "200"});
#line 49
 testRunner.And("für Mandant \'Mandant_1\' folgende summarische Zustands- und Netzinformationen exis" +
                    "tieren:", ((string)(null)), table5, "Und ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Belastungskategorie",
                        "Mengentyp",
                        "Mittlerer Zustand",
                        "Menge",
                        "Fahrbahnlaenge"});
            table6.AddRow(new string[] {
                        string.Format("{0}", belastungskategorie),
                        string.Format("{0}", mengentyp),
                        "2,1",
                        "20",
                        "30"});
#line 53
 testRunner.When("ich folgende summarische Zustands- und Netzinformationen eingebe:", ((string)(null)), table6, "Wenn ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mandant",
                        "Belastungskategorie",
                        "Mittlerer Zustand",
                        "Menge Gesamtlänge",
                        "Menge Gesamtfläche"});
            table7.AddRow(new string[] {
                        "Mandant_1",
                        string.Format("{0}", belastungskategorie),
                        "2,1",
                        string.Format("{0}", mengeGesamtlange),
                        string.Format("{0}", mengeGesamtflache)});
#line 57
 testRunner.Then("sind folgende summarische Zustands- und Netzinformationen im System:", ((string)(null)), table7, "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Manager kann erfasste Mengen bearbeiten, 1", new string[] {
                "Automatisch"}, SourceLine=62)]
        public virtual void DerData_ManagerKannErfassteMengenBearbeiten_1()
        {
            this.DerData_ManagerKannErfassteMengenBearbeiten("1", "Gesamtlänge", "IA", "30", "20", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Manager kann erfasste Mengen bearbeiten, 3", new string[] {
                "Automatisch"}, SourceLine=62)]
        public virtual void DerData_ManagerKannErfassteMengenBearbeiten_3()
        {
            this.DerData_ManagerKannErfassteMengenBearbeiten("3", "Gesamtlänge", "IB", "30", "20", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Manager kann erfasste Mengen bearbeiten, 5", new string[] {
                "Automatisch"}, SourceLine=62)]
        public virtual void DerData_ManagerKannErfassteMengenBearbeiten_5()
        {
            this.DerData_ManagerKannErfassteMengenBearbeiten("5", "Gesamtlänge", "IC", "30", "20", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Manager kann erfasste Mengen bearbeiten, 7", new string[] {
                "Automatisch"}, SourceLine=62)]
        public virtual void DerData_ManagerKannErfassteMengenBearbeiten_7()
        {
            this.DerData_ManagerKannErfassteMengenBearbeiten("7", "Gesamtlänge", "II", "30", "20", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Manager kann erfasste Mengen bearbeiten, 9", new string[] {
                "Automatisch"}, SourceLine=62)]
        public virtual void DerData_ManagerKannErfassteMengenBearbeiten_9()
        {
            this.DerData_ManagerKannErfassteMengenBearbeiten("9", "Gesamtlänge", "III", "30", "20", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Manager kann erfasste Mengen bearbeiten, 11", new string[] {
                "Automatisch"}, SourceLine=62)]
        public virtual void DerData_ManagerKannErfassteMengenBearbeiten_11()
        {
            this.DerData_ManagerKannErfassteMengenBearbeiten("11", "Gesamtlänge", "IV", "30", "20", ((string[])(null)));
#line hidden
        }
        
        public virtual void AlleFelderMengenSindNumerischeWerte(string tF, string mengentyp, string mengeFeldname, string fahrbahnlaenge, string menge, string validationfehler, string kommentar, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Automatisch"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Alle Felder (Mengen) sind numerische Werte", @__tags);
#line 73
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mandant",
                        "Modus"});
            table8.AddRow(new string[] {
                        "Mandant_1",
                        "summarisch"});
#line 74
 testRunner.Given("folgende Einstellungen existieren:", ((string)(null)), table8, "Gegeben sei ");
#line 78
 testRunner.And("ich bin Data-Manager von \'Mandant_1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Belastungskategorie",
                        "Mengentyp",
                        "Mittlerer Zustand",
                        "Menge",
                        "Fahrbahnlaenge"});
            table9.AddRow(new string[] {
                        "IA",
                        string.Format("{0}", mengentyp),
                        "2,1",
                        string.Format("{0}", menge),
                        string.Format("{0}", fahrbahnlaenge)});
#line 80
 testRunner.When("ich folgende summarische Zustands- und Netzinformationen eingebe:", ((string)(null)), table9, "Wenn ");
#line 84
 testRunner.Then(string.Format("\'{0}\' liefert einen Validationsfehler \'{1}\'", mengeFeldname, validationfehler), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Alle Felder (Mengen) sind numerische Werte, Examples 1, 1", new string[] {
                "Automatisch"}, SourceLine=87)]
        public virtual void AlleFelderMengenSindNumerischeWerte_ExampleSet0_1()
        {
            this.AlleFelderMengenSindNumerischeWerte("1", "Gesamtlänge", "Gesamtlänge Menge", "0", "20", "Nein", "Gutfall untere Schranke", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Alle Felder (Mengen) sind numerische Werte, Examples 1, 2", new string[] {
                "Automatisch"}, SourceLine=87)]
        public virtual void AlleFelderMengenSindNumerischeWerte_ExampleSet0_2()
        {
            this.AlleFelderMengenSindNumerischeWerte("2", "Gesamtlänge", "Gesamtlänge Menge", "2147483647", "20", "Nein", "Gutfall obere Schranke", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Alle Felder (Mengen) sind numerische Werte, Examples 1, 3", new string[] {
                "Automatisch"}, SourceLine=87)]
        public virtual void AlleFelderMengenSindNumerischeWerte_ExampleSet0_3()
        {
            this.AlleFelderMengenSindNumerischeWerte("3", "Gesamtlänge", "Gesamtlänge Menge", "200,5", "20", "Nein", "Gutfall Kommastelle", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Alle Felder (Mengen) sind numerische Werte, Examples 1, 5", new string[] {
                "Automatisch"}, SourceLine=87)]
        public virtual void AlleFelderMengenSindNumerischeWerte_ExampleSet0_5()
        {
            this.AlleFelderMengenSindNumerischeWerte("5", "Gesamtlänge", "Gesamtlänge Menge", "-1", "20", "Ja", "Ungültige Menge < 0", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Alle Felder (Mengen) sind numerische Werte, Examples 1, 6", new string[] {
                "Automatisch"}, SourceLine=87)]
        public virtual void AlleFelderMengenSindNumerischeWerte_ExampleSet0_6()
        {
            this.AlleFelderMengenSindNumerischeWerte("6", "Gesamtlänge", "Gesamtlänge Menge", "-0,1", "20", "Ja", "Ungültige Menge < 0", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Alle Felder (Mengen) sind numerische Werte, Examples 1, 11", new string[] {
                "Automatisch"}, SourceLine=87)]
        public virtual void AlleFelderMengenSindNumerischeWerte_ExampleSet0_11()
        {
            this.AlleFelderMengenSindNumerischeWerte("11", "Gesamtfläche", "Gesamtfläche Menge", "20", "0", "Nein", "Gutfall untere Schranke", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Alle Felder (Mengen) sind numerische Werte, Examples 1, 12", new string[] {
                "Automatisch"}, SourceLine=87)]
        public virtual void AlleFelderMengenSindNumerischeWerte_ExampleSet0_12()
        {
            this.AlleFelderMengenSindNumerischeWerte("12", "Gesamtfläche", "Gesamtfläche Menge", "20", "2147483647", "Nein", "Gutfall obere Schranke", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Alle Felder (Mengen) sind numerische Werte, Examples 1, 13", new string[] {
                "Automatisch"}, SourceLine=87)]
        public virtual void AlleFelderMengenSindNumerischeWerte_ExampleSet0_13()
        {
            this.AlleFelderMengenSindNumerischeWerte("13", "Gesamtfläche", "Gesamtfläche Menge", "20", "200", "Nein", "Gutfall", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Alle Felder (Mengen) sind numerische Werte, Examples 1, 15", new string[] {
                "Automatisch"}, SourceLine=87)]
        public virtual void AlleFelderMengenSindNumerischeWerte_ExampleSet0_15()
        {
            this.AlleFelderMengenSindNumerischeWerte("15", "Gesamtfläche", "Gesamtfläche Menge", "20", "-1", "Ja", "Ungültige Menge < 0", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Alle Felder (Mengen) sind numerische Werte, Examples 1, 7", new string[] {
                "Automatisch",
                "Manuell"}, SourceLine=87)]
        public virtual void AlleFelderMengenSindNumerischeWerte_ExampleSet1_7()
        {
            this.AlleFelderMengenSindNumerischeWerte("7", "Gesamtlänge", "Gesamtlänge Menge", "ABCD", "ABCD", "Ja", "Ungültiger Menge string", new string[] {
                        "Manuell"});
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Alle Felder (Mengen) sind numerische Werte, Examples 1, 8", new string[] {
                "Automatisch",
                "Manuell"}, SourceLine=87)]
        public virtual void AlleFelderMengenSindNumerischeWerte_ExampleSet1_8()
        {
            this.AlleFelderMengenSindNumerischeWerte("8", "Gesamtlänge", "Gesamtlänge Menge", "1ABCD1", "1ABCD1", "Ja", "Ungültiger Menge string", new string[] {
                        "Manuell"});
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Alle Felder (Mengen) sind numerische Werte, Examples 1, 9", new string[] {
                "Automatisch",
                "Manuell"}, SourceLine=87)]
        public virtual void AlleFelderMengenSindNumerischeWerte_ExampleSet1_9()
        {
            this.AlleFelderMengenSindNumerischeWerte("9", "Gesamtlänge", "Gesamtlänge Menge", "2147483648", "2147483648", "Ja", "Ungültige Menge > Maximalwert", new string[] {
                        "Manuell"});
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Alle Felder (Mengen) sind numerische Werte, Examples 1, 16", new string[] {
                "Automatisch",
                "Manuell"}, SourceLine=87)]
        public virtual void AlleFelderMengenSindNumerischeWerte_ExampleSet1_16()
        {
            this.AlleFelderMengenSindNumerischeWerte("16", "Gesamtfläche", "Gesamtfläche Menge", "-0,1", "-0,1", "Ja", "Ungültige Menge < 0 + Kommastelle", new string[] {
                        "Manuell"});
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Alle Felder (Mengen) sind numerische Werte, Examples 1, 17", new string[] {
                "Automatisch",
                "Manuell"}, SourceLine=87)]
        public virtual void AlleFelderMengenSindNumerischeWerte_ExampleSet1_17()
        {
            this.AlleFelderMengenSindNumerischeWerte("17", "Gesamtfläche", "Gesamtfläche Menge", "ABCD", "ABCD", "Ja", "Ungültiger Menge string", new string[] {
                        "Manuell"});
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Alle Felder (Mengen) sind numerische Werte, Examples 1, 18", new string[] {
                "Automatisch",
                "Manuell"}, SourceLine=87)]
        public virtual void AlleFelderMengenSindNumerischeWerte_ExampleSet1_18()
        {
            this.AlleFelderMengenSindNumerischeWerte("18", "Gesamtfläche", "Gesamtfläche Menge", "1ABCD1", "1ABCD1", "Ja", "Ungültiger Menge string", new string[] {
                        "Manuell"});
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Alle Felder (Mengen) sind numerische Werte, Examples 1, 19", new string[] {
                "Automatisch",
                "Manuell"}, SourceLine=87)]
        public virtual void AlleFelderMengenSindNumerischeWerte_ExampleSet1_19()
        {
            this.AlleFelderMengenSindNumerischeWerte("19", "Gesamtfläche", "Gesamtfläche Menge", "2147483648", "2147483648", "Ja", "Ungültige Menge > Maximalwert", new string[] {
                        "Manuell"});
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Alle Felder (Mengen) sind numerische Werte, Examples 1, 20", new string[] {
                "Automatisch",
                "Manuell"}, SourceLine=87)]
        public virtual void AlleFelderMengenSindNumerischeWerte_ExampleSet1_20()
        {
            this.AlleFelderMengenSindNumerischeWerte("20", "Gesamtfläche", "Gesamtfläche Menge", "250,1", "250,1", "Ja", "Ungültige Menge keine Kommastelle", new string[] {
                        "Manuell"});
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Bei Änderung des Mengentyps bleiben vorhandene Eingaben von anderen Mengen gespei" +
            "chert", new string[] {
                "Manuell"}, SourceLine=112)]
        public virtual void BeiAnderungDesMengentypsBleibenVorhandeneEingabenVonAnderenMengenGespeichert()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Bei Änderung des Mengentyps bleiben vorhandene Eingaben von anderen Mengen gespei" +
                    "chert", new string[] {
                        "Manuell"});
#line 113
this.ScenarioSetup(scenarioInfo);
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void DerData_ManagerKannEinenMittlerenZustandDerFahrbahnProBelastungskategorieErfassen(string tF, string mittlererZustand, string mittlererZustandErgebnis, string validationfehler, string kommentar, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Automatisch"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Data-Manager kann einen mittleren Zustand der Fahrbahn pro Belastungskategori" +
                    "e erfassen", @__tags);
#line 118
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mandant",
                        "Modus",
                        "Mengentyp"});
            table10.AddRow(new string[] {
                        "Mandant_1",
                        "summarisch",
                        "Gesamtfläche"});
#line 119
 testRunner.Given("folgende Einstellungen existieren:", ((string)(null)), table10, "Gegeben sei ");
#line 123
 testRunner.And("ich bin Data-Manager von \'Mandant_1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Belastungskategorie",
                        "Mengentyp",
                        "Mittlerer Zustand",
                        "Menge"});
            table11.AddRow(new string[] {
                        "IA",
                        "Gesamtfläche",
                        string.Format("{0}", mittlererZustand),
                        "20"});
#line 125
 testRunner.When("ich folgende summarische Zustands- und Netzinformationen eingebe:", ((string)(null)), table11, "Wenn ");
#line 129
 testRunner.Then(string.Format("\'Mittlerer Zustand\' liefert einen Validationsfehler \'{0}\'", validationfehler), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mandant",
                        "Belastungskategorie",
                        "Mittlerer Zustand"});
            table12.AddRow(new string[] {
                        "Mandant_1",
                        "IA",
                        string.Format("{0}", mittlererZustandErgebnis)});
#line 131
    testRunner.Then("sind folgende summarische Zustands- und Netzinformationen im System:", ((string)(null)), table12, "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Manager kann einen mittleren Zustand der Fahrbahn pro Belastungskategori" +
            "e erfassen, Examples 1, 1", new string[] {
                "Automatisch"}, SourceLine=136)]
        public virtual void DerData_ManagerKannEinenMittlerenZustandDerFahrbahnProBelastungskategorieErfassen_ExampleSet0_1()
        {
            this.DerData_ManagerKannEinenMittlerenZustandDerFahrbahnProBelastungskategorieErfassen("1", "0", "0", "Nein", "Gutfall untere Schranke", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Manager kann einen mittleren Zustand der Fahrbahn pro Belastungskategori" +
            "e erfassen, Examples 1, 2", new string[] {
                "Automatisch"}, SourceLine=136)]
        public virtual void DerData_ManagerKannEinenMittlerenZustandDerFahrbahnProBelastungskategorieErfassen_ExampleSet0_2()
        {
            this.DerData_ManagerKannEinenMittlerenZustandDerFahrbahnProBelastungskategorieErfassen("2", "5", "5", "Nein", "Gutfall obere Schranke", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Manager kann einen mittleren Zustand der Fahrbahn pro Belastungskategori" +
            "e erfassen, Examples 1, 3", new string[] {
                "Automatisch"}, SourceLine=136)]
        public virtual void DerData_ManagerKannEinenMittlerenZustandDerFahrbahnProBelastungskategorieErfassen_ExampleSet0_3()
        {
            this.DerData_ManagerKannEinenMittlerenZustandDerFahrbahnProBelastungskategorieErfassen("3", "3,3", "3,3", "Nein", "Gutfall Kommazahl", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Manager kann einen mittleren Zustand der Fahrbahn pro Belastungskategori" +
            "e erfassen, Examples 1, 4", new string[] {
                "Automatisch"}, SourceLine=136)]
        public virtual void DerData_ManagerKannEinenMittlerenZustandDerFahrbahnProBelastungskategorieErfassen_ExampleSet0_4()
        {
            this.DerData_ManagerKannEinenMittlerenZustandDerFahrbahnProBelastungskategorieErfassen("4", "-", "-", "Nein", "Gutfall Leereintrag", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Manager kann einen mittleren Zustand der Fahrbahn pro Belastungskategori" +
            "e erfassen, Examples 1, 5", new string[] {
                "Automatisch"}, SourceLine=136)]
        public virtual void DerData_ManagerKannEinenMittlerenZustandDerFahrbahnProBelastungskategorieErfassen_ExampleSet0_5()
        {
            this.DerData_ManagerKannEinenMittlerenZustandDerFahrbahnProBelastungskategorieErfassen("5", "5,1", "-", "Ja", "Ungültiger Mittlerer Zustand > 5", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Manager kann einen mittleren Zustand der Fahrbahn pro Belastungskategori" +
            "e erfassen, Examples 1, 6", new string[] {
                "Automatisch"}, SourceLine=136)]
        public virtual void DerData_ManagerKannEinenMittlerenZustandDerFahrbahnProBelastungskategorieErfassen_ExampleSet0_6()
        {
            this.DerData_ManagerKannEinenMittlerenZustandDerFahrbahnProBelastungskategorieErfassen("6", "6", "-", "Ja", "Ungültiger Mittlerer Zustand > 5", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Manager kann einen mittleren Zustand der Fahrbahn pro Belastungskategori" +
            "e erfassen, Examples 1, 7", new string[] {
                "Automatisch"}, SourceLine=136)]
        public virtual void DerData_ManagerKannEinenMittlerenZustandDerFahrbahnProBelastungskategorieErfassen_ExampleSet0_7()
        {
            this.DerData_ManagerKannEinenMittlerenZustandDerFahrbahnProBelastungskategorieErfassen("7", "-1", "-", "Ja", "Ungültiger Mittlerer Zustand < 0", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Manager kann einen mittleren Zustand der Fahrbahn pro Belastungskategori" +
            "e erfassen, Examples 1, 8", new string[] {
                "Automatisch"}, SourceLine=136)]
        public virtual void DerData_ManagerKannEinenMittlerenZustandDerFahrbahnProBelastungskategorieErfassen_ExampleSet0_8()
        {
            this.DerData_ManagerKannEinenMittlerenZustandDerFahrbahnProBelastungskategorieErfassen("8", "-0,1", "-", "Ja", "Ungültiger Mittlerer Zustand < 0", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Manager kann einen mittleren Zustand der Fahrbahn pro Belastungskategori" +
            "e erfassen, Examples 1, 9", new string[] {
                "Automatisch"}, SourceLine=136)]
        public virtual void DerData_ManagerKannEinenMittlerenZustandDerFahrbahnProBelastungskategorieErfassen_ExampleSet0_9()
        {
            this.DerData_ManagerKannEinenMittlerenZustandDerFahrbahnProBelastungskategorieErfassen("9", "3,33", "-", "Ja", "Ungültiger Mittlerer Zustand max 1 Kommastelle", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Manager kann einen mittleren Zustand der Fahrbahn pro Belastungskategori" +
            "e erfassen, Examples 1, 10", new string[] {
                "Automatisch",
                "Manuell"}, SourceLine=136)]
        public virtual void DerData_ManagerKannEinenMittlerenZustandDerFahrbahnProBelastungskategorieErfassen_ExampleSet1_10()
        {
            this.DerData_ManagerKannEinenMittlerenZustandDerFahrbahnProBelastungskategorieErfassen("10", "ABCD", "Nein", "0", "Ungültiger Mittlerer Zustand string", new string[] {
                        "Manuell"});
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Manager kann einen mittleren Zustand der Fahrbahn pro Belastungskategori" +
            "e erfassen, Examples 1, 11", new string[] {
                "Automatisch",
                "Manuell"}, SourceLine=136)]
        public virtual void DerData_ManagerKannEinenMittlerenZustandDerFahrbahnProBelastungskategorieErfassen_ExampleSet1_11()
        {
            this.DerData_ManagerKannEinenMittlerenZustandDerFahrbahnProBelastungskategorieErfassen("11", "1abc1", "Nein", "0", "Ungültiger Mittlerer Zustand string", new string[] {
                        "Manuell"});
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Manager kann den mittleren Zustand der Fahrbahn bearbeiten", new string[] {
                "Manuell"}, SourceLine=155)]
        public virtual void DerData_ManagerKannDenMittlerenZustandDerFahrbahnBearbeiten()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Data-Manager kann den mittleren Zustand der Fahrbahn bearbeiten", new string[] {
                        "Manuell"});
#line 156
this.ScenarioSetup(scenarioInfo);
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void DerData_ManagerKannDenZurAktuellenJahresperiodeErfassenZustandsdatenEinMittleresErhebungsdatumAlterZuweisen(string tF, string mittleresAlter, string validationfehler, string mittleresAlterErgebnis, string kommentar, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Automatisch"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Data-Manager kann den zur aktuellen Jahresperiode erfassen Zustandsdaten ein " +
                    "mittleres Erhebungsdatum (Alter) zuweisen", @__tags);
#line 161
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mandant",
                        "Modus",
                        "Mengentyp"});
            table13.AddRow(new string[] {
                        "Mandant_1",
                        "summarisch",
                        "Gesamtlänge"});
#line 162
 testRunner.Given("folgende Einstellungen existieren:", ((string)(null)), table13, "Gegeben sei ");
#line 166
 testRunner.And("ich bin Data-Manager von \'Mandant_1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line 168
    testRunner.And("ich öffne die Seite \'Zustands- und Netzinformationen im Summarischen Modus\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line 170
 testRunner.When(string.Format("ich Mittleres Alter \'{0}\' eingebe", mittleresAlter), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line 172
 testRunner.Then(string.Format("Mittleres Alter hat einen Validationsfehler \'{0}\'", validationfehler), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mandant",
                        "Mittleres Alter"});
            table14.AddRow(new string[] {
                        "Mandant_1",
                        string.Format("{0}", mittleresAlterErgebnis)});
#line 174
    testRunner.Then("sind folgende Mittlere Alter im System:", ((string)(null)), table14, "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Manager kann den zur aktuellen Jahresperiode erfassen Zustandsdaten ein " +
            "mittleres Erhebungsdatum (Alter) zuweisen, Examples 1, 1", new string[] {
                "Automatisch"}, SourceLine=179)]
        public virtual void DerData_ManagerKannDenZurAktuellenJahresperiodeErfassenZustandsdatenEinMittleresErhebungsdatumAlterZuweisen_ExampleSet0_1()
        {
            this.DerData_ManagerKannDenZurAktuellenJahresperiodeErfassenZustandsdatenEinMittleresErhebungsdatumAlterZuweisen("1", "01.01.1900", "Nein", "01.01.1900", "Gutfall untere Schranke", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Manager kann den zur aktuellen Jahresperiode erfassen Zustandsdaten ein " +
            "mittleres Erhebungsdatum (Alter) zuweisen, Examples 1, 2", new string[] {
                "Automatisch"}, SourceLine=179)]
        public virtual void DerData_ManagerKannDenZurAktuellenJahresperiodeErfassenZustandsdatenEinMittleresErhebungsdatumAlterZuweisen_ExampleSet0_2()
        {
            this.DerData_ManagerKannDenZurAktuellenJahresperiodeErfassenZustandsdatenEinMittleresErhebungsdatumAlterZuweisen("2", "31.10.2009", "Nein", "31.10.2009", "Gutfall", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Manager kann den zur aktuellen Jahresperiode erfassen Zustandsdaten ein " +
            "mittleres Erhebungsdatum (Alter) zuweisen, Examples 1, 3", new string[] {
                "Automatisch"}, SourceLine=179)]
        public virtual void DerData_ManagerKannDenZurAktuellenJahresperiodeErfassenZustandsdatenEinMittleresErhebungsdatumAlterZuweisen_ExampleSet0_3()
        {
            this.DerData_ManagerKannDenZurAktuellenJahresperiodeErfassenZustandsdatenEinMittleresErhebungsdatumAlterZuweisen("3", "31.12.9999", "Nein", "31.12.9999", "Gutfall obere Schranke", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Manager kann den zur aktuellen Jahresperiode erfassen Zustandsdaten ein " +
            "mittleres Erhebungsdatum (Alter) zuweisen, Examples 1, 4", new string[] {
                "Automatisch"}, SourceLine=179)]
        public virtual void DerData_ManagerKannDenZurAktuellenJahresperiodeErfassenZustandsdatenEinMittleresErhebungsdatumAlterZuweisen_ExampleSet0_4()
        {
            this.DerData_ManagerKannDenZurAktuellenJahresperiodeErfassenZustandsdatenEinMittleresErhebungsdatumAlterZuweisen("4", "-", "Nein", "-", "Gutfall Leereintrag", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Manager kann den zur aktuellen Jahresperiode erfassen Zustandsdaten ein " +
            "mittleres Erhebungsdatum (Alter) zuweisen, Examples 1, 6", new string[] {
                "Automatisch",
                "Manuell"}, SourceLine=179)]
        public virtual void DerData_ManagerKannDenZurAktuellenJahresperiodeErfassenZustandsdatenEinMittleresErhebungsdatumAlterZuweisen_ExampleSet1_6()
        {
            this.DerData_ManagerKannDenZurAktuellenJahresperiodeErfassenZustandsdatenEinMittleresErhebungsdatumAlterZuweisen("6", "abcd", "Nein", "abcd", "Ungültiges Mittleres Alter string", new string[] {
                        "Manuell"});
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Manager kann den zur aktuellen Jahresperiode erfassen Zustandsdaten ein " +
            "mittleres Erhebungsdatum (Alter) zuweisen, Examples 1, 7", new string[] {
                "Automatisch",
                "Manuell"}, SourceLine=179)]
        public virtual void DerData_ManagerKannDenZurAktuellenJahresperiodeErfassenZustandsdatenEinMittleresErhebungsdatumAlterZuweisen_ExampleSet1_7()
        {
            this.DerData_ManagerKannDenZurAktuellenJahresperiodeErfassenZustandsdatenEinMittleresErhebungsdatumAlterZuweisen("7", "19xy", "Nein", "19xy", "Ungültiges Mittleres Alter string", new string[] {
                        "Manuell"});
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Manager kann den zur aktuellen Jahresperiode erfassen Zustandsdaten ein " +
            "mittleres Erhebungsdatum (Alter) zuweisen, Examples 1, 8", new string[] {
                "Automatisch",
                "Manuell"}, SourceLine=179)]
        public virtual void DerData_ManagerKannDenZurAktuellenJahresperiodeErfassenZustandsdatenEinMittleresErhebungsdatumAlterZuweisen_ExampleSet1_8()
        {
            this.DerData_ManagerKannDenZurAktuellenJahresperiodeErfassenZustandsdatenEinMittleresErhebungsdatumAlterZuweisen("8", "2009,1", "Ja", "-", "Ungültiges Mittleres Alter Kommastelle", new string[] {
                        "Manuell"});
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Manager kann den zur aktuellen Jahresperiode erfassen Zustandsdaten ein " +
            "mittleres Erhebungsdatum (Alter) zuweisen, Examples 1, 9", new string[] {
                "Automatisch",
                "Manuell"}, SourceLine=179)]
        public virtual void DerData_ManagerKannDenZurAktuellenJahresperiodeErfassenZustandsdatenEinMittleresErhebungsdatumAlterZuweisen_ExampleSet1_9()
        {
            this.DerData_ManagerKannDenZurAktuellenJahresperiodeErfassenZustandsdatenEinMittleresErhebungsdatumAlterZuweisen("9", "!^\'~", "Nein", "!^\'~", "Ungültiges Mittleres Alter Sonderzeichen", new string[] {
                        "Manuell"});
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Archivierte Daten können nicht verändert werden", new string[] {
                "Manuell"}, SourceLine=195)]
        public virtual void ArchivierteDatenKonnenNichtVerandertWerden()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Archivierte Daten können nicht verändert werden", new string[] {
                        "Manuell"});
#line 196
this.ScenarioSetup(scenarioInfo);
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Am UI wird nur der Mengentyp angezeigt, der aktuell für den Mandanten konfigurier" +
            "t ist", new string[] {
                "Manuell"}, SourceLine=200)]
        public virtual void AmUIWirdNurDerMengentypAngezeigtDerAktuellFurDenMandantenKonfiguriertIst()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Am UI wird nur der Mengentyp angezeigt, der aktuell für den Mandanten konfigurier" +
                    "t ist", new string[] {
                        "Manuell"});
#line 201
this.ScenarioSetup(scenarioInfo);
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("N1 - Strassenmengen pro Belastungskategorie verwalten; Z1 - Zustand summarisch er" +
        "fassen")]
    public partial class N1_StrassenmengenProBelastungskategorieVerwaltenZ1_ZustandSummarischErfassenFeature_NUnit
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "N1Z1.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("de-AT"), "N1 - Strassenmengen pro Belastungskategorie verwalten; Z1 - Zustand summarisch er" +
                    "fassen", "\tAls Data-Manager\r\n\twill ich Strassenmengen pro Belastungskategorie verwalten\r\n\td" +
                    "amit ich Auswertungen des Grundmodells Werterhaltung durchführen kann", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Es gibt 6 Belastungskategorien")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void EsGibt6Belastungskategorien()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Es gibt 6 Belastungskategorien", new string[] {
                        "Manuell"});
#line 9
this.ScenarioSetup(scenarioInfo);
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Der Data-Manager kann entweder ‚Gesamtlänge‘ und ‚Gesamtfläche der Fahrbahnen‘ je" +
            " Belastungskategorie erfassen")]
        [NUnit.Framework.CategoryAttribute("Automatisch")]
        [NUnit.Framework.TestCaseAttribute("1", "Gesamtlänge", "IA", "30", "20", new string[0])]
        [NUnit.Framework.TestCaseAttribute("3", "Gesamtlänge", "IB", "30", "20", new string[0])]
        [NUnit.Framework.TestCaseAttribute("5", "Gesamtlänge", "IC", "30", "20", new string[0])]
        [NUnit.Framework.TestCaseAttribute("7", "Gesamtlänge", "II", "30", "20", new string[0])]
        [NUnit.Framework.TestCaseAttribute("9", "Gesamtlänge", "III", "30", "20", new string[0])]
        [NUnit.Framework.TestCaseAttribute("11", "Gesamtlänge", "IV", "30", "20", new string[0])]
        [NUnit.Framework.TestCaseAttribute("12", "Gesamtfläche", "IV", "30", "20", new string[0])]
        public virtual void DerData_ManagerKannEntwederGesamtlangeUndGesamtflacheDerFahrbahnenJeBelastungskategorieErfassen(string tF, string mengentyp, string belastungskategorie, string mengeGesamtlange, string mengeGesamtflache, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Automatisch"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Data-Manager kann entweder ‚Gesamtlänge‘ und ‚Gesamtfläche der Fahrbahnen‘ je" +
                    " Belastungskategorie erfassen", @__tags);
#line 14
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mandant",
                        "Modus"});
            table1.AddRow(new string[] {
                        "Mandant_1",
                        "summarisch"});
#line 15
 testRunner.Given("folgende Einstellungen existieren:", ((string)(null)), table1, "Gegeben sei ");
#line 19
 testRunner.And("ich bin Data-Manager von \'Mandant_1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Belastungskategorie",
                        "Mittlerer Zustand",
                        "Menge",
                        "Fahrbahnlaenge"});
            table2.AddRow(new string[] {
                        string.Format("{0}", belastungskategorie),
                        "2,1",
                        "20",
                        "30"});
#line 21
 testRunner.When("ich folgende summarische Zustands- und Netzinformationen eingebe:", ((string)(null)), table2, "Wenn ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mandant",
                        "Belastungskategorie",
                        "Mittlerer Zustand",
                        "Menge Gesamtlänge",
                        "Menge Gesamtfläche"});
            table3.AddRow(new string[] {
                        "Mandant_1",
                        string.Format("{0}", belastungskategorie),
                        "2,1",
                        string.Format("{0}", mengeGesamtlange),
                        string.Format("{0}", mengeGesamtflache)});
#line 25
 testRunner.Then("sind folgende summarische Zustands- und Netzinformationen im System:", ((string)(null)), table3, "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Der Data-Manager kann erfasste Mengen bearbeiten")]
        [NUnit.Framework.CategoryAttribute("Automatisch")]
        [NUnit.Framework.TestCaseAttribute("1", "Gesamtlänge", "IA", "30", "20", new string[0])]
        [NUnit.Framework.TestCaseAttribute("3", "Gesamtlänge", "IB", "30", "20", new string[0])]
        [NUnit.Framework.TestCaseAttribute("5", "Gesamtlänge", "IC", "30", "20", new string[0])]
        [NUnit.Framework.TestCaseAttribute("7", "Gesamtlänge", "II", "30", "20", new string[0])]
        [NUnit.Framework.TestCaseAttribute("9", "Gesamtlänge", "III", "30", "20", new string[0])]
        [NUnit.Framework.TestCaseAttribute("11", "Gesamtlänge", "IV", "30", "20", new string[0])]
        public virtual void DerData_ManagerKannErfassteMengenBearbeiten(string tF, string mengentyp, string belastungskategorie, string mengeGesamtlange, string mengeGesamtflache, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Automatisch"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Data-Manager kann erfasste Mengen bearbeiten", @__tags);
#line 42
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mandant",
                        "Modus"});
            table4.AddRow(new string[] {
                        "Mandant_1",
                        "summarisch"});
#line 43
 testRunner.Given("folgende Einstellungen existieren:", ((string)(null)), table4, "Gegeben sei ");
#line 47
 testRunner.And("ich bin Data-Manager von \'Mandant_1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Belastungskategorie",
                        "Mittlerer Zustand",
                        "Menge Gesamtlänge",
                        "Menge Gesamtfläche"});
            table5.AddRow(new string[] {
                        string.Format("{0}", belastungskategorie),
                        "3,4",
                        "100,5",
                        "200"});
#line 49
 testRunner.And("für Mandant \'Mandant_1\' folgende summarische Zustands- und Netzinformationen exis" +
                    "tieren:", ((string)(null)), table5, "Und ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Belastungskategorie",
                        "Mengentyp",
                        "Mittlerer Zustand",
                        "Menge",
                        "Fahrbahnlaenge"});
            table6.AddRow(new string[] {
                        string.Format("{0}", belastungskategorie),
                        string.Format("{0}", mengentyp),
                        "2,1",
                        "20",
                        "30"});
#line 53
 testRunner.When("ich folgende summarische Zustands- und Netzinformationen eingebe:", ((string)(null)), table6, "Wenn ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mandant",
                        "Belastungskategorie",
                        "Mittlerer Zustand",
                        "Menge Gesamtlänge",
                        "Menge Gesamtfläche"});
            table7.AddRow(new string[] {
                        "Mandant_1",
                        string.Format("{0}", belastungskategorie),
                        "2,1",
                        string.Format("{0}", mengeGesamtlange),
                        string.Format("{0}", mengeGesamtflache)});
#line 57
 testRunner.Then("sind folgende summarische Zustands- und Netzinformationen im System:", ((string)(null)), table7, "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Alle Felder (Mengen) sind numerische Werte")]
        [NUnit.Framework.CategoryAttribute("Automatisch")]
        [NUnit.Framework.TestCaseAttribute("1", "Gesamtlänge", "Gesamtlänge Menge", "0", "20", "Nein", "Gutfall untere Schranke", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2", "Gesamtlänge", "Gesamtlänge Menge", "2147483647", "20", "Nein", "Gutfall obere Schranke", new string[0])]
        [NUnit.Framework.TestCaseAttribute("3", "Gesamtlänge", "Gesamtlänge Menge", "200,5", "20", "Nein", "Gutfall Kommastelle", new string[0])]
        [NUnit.Framework.TestCaseAttribute("5", "Gesamtlänge", "Gesamtlänge Menge", "-1", "20", "Ja", "Ungültige Menge < 0", new string[0])]
        [NUnit.Framework.TestCaseAttribute("6", "Gesamtlänge", "Gesamtlänge Menge", "-0,1", "20", "Ja", "Ungültige Menge < 0", new string[0])]
        [NUnit.Framework.TestCaseAttribute("11", "Gesamtfläche", "Gesamtfläche Menge", "20", "0", "Nein", "Gutfall untere Schranke", new string[0])]
        [NUnit.Framework.TestCaseAttribute("12", "Gesamtfläche", "Gesamtfläche Menge", "20", "2147483647", "Nein", "Gutfall obere Schranke", new string[0])]
        [NUnit.Framework.TestCaseAttribute("13", "Gesamtfläche", "Gesamtfläche Menge", "20", "200", "Nein", "Gutfall", new string[0])]
        [NUnit.Framework.TestCaseAttribute("15", "Gesamtfläche", "Gesamtfläche Menge", "20", "-1", "Ja", "Ungültige Menge < 0", new string[0])]
        [NUnit.Framework.TestCaseAttribute("7", "Gesamtlänge", "Gesamtlänge Menge", "ABCD", "ABCD", "Ja", "Ungültiger Menge string", null, Category="Manuell")]
        [NUnit.Framework.TestCaseAttribute("8", "Gesamtlänge", "Gesamtlänge Menge", "1ABCD1", "1ABCD1", "Ja", "Ungültiger Menge string", null, Category="Manuell")]
        [NUnit.Framework.TestCaseAttribute("9", "Gesamtlänge", "Gesamtlänge Menge", "2147483648", "2147483648", "Ja", "Ungültige Menge > Maximalwert", null, Category="Manuell")]
        [NUnit.Framework.TestCaseAttribute("16", "Gesamtfläche", "Gesamtfläche Menge", "-0,1", "-0,1", "Ja", "Ungültige Menge < 0 + Kommastelle", null, Category="Manuell")]
        [NUnit.Framework.TestCaseAttribute("17", "Gesamtfläche", "Gesamtfläche Menge", "ABCD", "ABCD", "Ja", "Ungültiger Menge string", null, Category="Manuell")]
        [NUnit.Framework.TestCaseAttribute("18", "Gesamtfläche", "Gesamtfläche Menge", "1ABCD1", "1ABCD1", "Ja", "Ungültiger Menge string", null, Category="Manuell")]
        [NUnit.Framework.TestCaseAttribute("19", "Gesamtfläche", "Gesamtfläche Menge", "2147483648", "2147483648", "Ja", "Ungültige Menge > Maximalwert", null, Category="Manuell")]
        [NUnit.Framework.TestCaseAttribute("20", "Gesamtfläche", "Gesamtfläche Menge", "250,1", "250,1", "Ja", "Ungültige Menge keine Kommastelle", null, Category="Manuell")]
        public virtual void AlleFelderMengenSindNumerischeWerte(string tF, string mengentyp, string mengeFeldname, string fahrbahnlaenge, string menge, string validationfehler, string kommentar, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Automatisch"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Alle Felder (Mengen) sind numerische Werte", @__tags);
#line 73
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mandant",
                        "Modus"});
            table8.AddRow(new string[] {
                        "Mandant_1",
                        "summarisch"});
#line 74
 testRunner.Given("folgende Einstellungen existieren:", ((string)(null)), table8, "Gegeben sei ");
#line 78
 testRunner.And("ich bin Data-Manager von \'Mandant_1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Belastungskategorie",
                        "Mengentyp",
                        "Mittlerer Zustand",
                        "Menge",
                        "Fahrbahnlaenge"});
            table9.AddRow(new string[] {
                        "IA",
                        string.Format("{0}", mengentyp),
                        "2,1",
                        string.Format("{0}", menge),
                        string.Format("{0}", fahrbahnlaenge)});
#line 80
 testRunner.When("ich folgende summarische Zustands- und Netzinformationen eingebe:", ((string)(null)), table9, "Wenn ");
#line 84
 testRunner.Then(string.Format("\'{0}\' liefert einen Validationsfehler \'{1}\'", mengeFeldname, validationfehler), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Bei Änderung des Mengentyps bleiben vorhandene Eingaben von anderen Mengen gespei" +
            "chert")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void BeiAnderungDesMengentypsBleibenVorhandeneEingabenVonAnderenMengenGespeichert()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Bei Änderung des Mengentyps bleiben vorhandene Eingaben von anderen Mengen gespei" +
                    "chert", new string[] {
                        "Manuell"});
#line 113
this.ScenarioSetup(scenarioInfo);
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Der Data-Manager kann einen mittleren Zustand der Fahrbahn pro Belastungskategori" +
            "e erfassen")]
        [NUnit.Framework.CategoryAttribute("Automatisch")]
        [NUnit.Framework.TestCaseAttribute("1", "0", "0", "Nein", "Gutfall untere Schranke", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2", "5", "5", "Nein", "Gutfall obere Schranke", new string[0])]
        [NUnit.Framework.TestCaseAttribute("3", "3,3", "3,3", "Nein", "Gutfall Kommazahl", new string[0])]
        [NUnit.Framework.TestCaseAttribute("4", "-", "-", "Nein", "Gutfall Leereintrag", new string[0])]
        [NUnit.Framework.TestCaseAttribute("5", "5,1", "-", "Ja", "Ungültiger Mittlerer Zustand > 5", new string[0])]
        [NUnit.Framework.TestCaseAttribute("6", "6", "-", "Ja", "Ungültiger Mittlerer Zustand > 5", new string[0])]
        [NUnit.Framework.TestCaseAttribute("7", "-1", "-", "Ja", "Ungültiger Mittlerer Zustand < 0", new string[0])]
        [NUnit.Framework.TestCaseAttribute("8", "-0,1", "-", "Ja", "Ungültiger Mittlerer Zustand < 0", new string[0])]
        [NUnit.Framework.TestCaseAttribute("9", "3,33", "-", "Ja", "Ungültiger Mittlerer Zustand max 1 Kommastelle", new string[0])]
        [NUnit.Framework.TestCaseAttribute("10", "ABCD", "Nein", "0", "Ungültiger Mittlerer Zustand string", null, Category="Manuell")]
        [NUnit.Framework.TestCaseAttribute("11", "1abc1", "Nein", "0", "Ungültiger Mittlerer Zustand string", null, Category="Manuell")]
        public virtual void DerData_ManagerKannEinenMittlerenZustandDerFahrbahnProBelastungskategorieErfassen(string tF, string mittlererZustand, string mittlererZustandErgebnis, string validationfehler, string kommentar, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Automatisch"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Data-Manager kann einen mittleren Zustand der Fahrbahn pro Belastungskategori" +
                    "e erfassen", @__tags);
#line 118
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mandant",
                        "Modus",
                        "Mengentyp"});
            table10.AddRow(new string[] {
                        "Mandant_1",
                        "summarisch",
                        "Gesamtfläche"});
#line 119
 testRunner.Given("folgende Einstellungen existieren:", ((string)(null)), table10, "Gegeben sei ");
#line 123
 testRunner.And("ich bin Data-Manager von \'Mandant_1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Belastungskategorie",
                        "Mengentyp",
                        "Mittlerer Zustand",
                        "Menge"});
            table11.AddRow(new string[] {
                        "IA",
                        "Gesamtfläche",
                        string.Format("{0}", mittlererZustand),
                        "20"});
#line 125
 testRunner.When("ich folgende summarische Zustands- und Netzinformationen eingebe:", ((string)(null)), table11, "Wenn ");
#line 129
 testRunner.Then(string.Format("\'Mittlerer Zustand\' liefert einen Validationsfehler \'{0}\'", validationfehler), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mandant",
                        "Belastungskategorie",
                        "Mittlerer Zustand"});
            table12.AddRow(new string[] {
                        "Mandant_1",
                        "IA",
                        string.Format("{0}", mittlererZustandErgebnis)});
#line 131
    testRunner.Then("sind folgende summarische Zustands- und Netzinformationen im System:", ((string)(null)), table12, "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Der Data-Manager kann den mittleren Zustand der Fahrbahn bearbeiten")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void DerData_ManagerKannDenMittlerenZustandDerFahrbahnBearbeiten()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Data-Manager kann den mittleren Zustand der Fahrbahn bearbeiten", new string[] {
                        "Manuell"});
#line 156
this.ScenarioSetup(scenarioInfo);
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Der Data-Manager kann den zur aktuellen Jahresperiode erfassen Zustandsdaten ein " +
            "mittleres Erhebungsdatum (Alter) zuweisen")]
        [NUnit.Framework.CategoryAttribute("Automatisch")]
        [NUnit.Framework.TestCaseAttribute("1", "01.01.1900", "Nein", "01.01.1900", "Gutfall untere Schranke", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2", "31.10.2009", "Nein", "31.10.2009", "Gutfall", new string[0])]
        [NUnit.Framework.TestCaseAttribute("3", "31.12.9999", "Nein", "31.12.9999", "Gutfall obere Schranke", new string[0])]
        [NUnit.Framework.TestCaseAttribute("4", "-", "Nein", "-", "Gutfall Leereintrag", new string[0])]
        [NUnit.Framework.TestCaseAttribute("6", "abcd", "Nein", "abcd", "Ungültiges Mittleres Alter string", null, Category="Manuell")]
        [NUnit.Framework.TestCaseAttribute("7", "19xy", "Nein", "19xy", "Ungültiges Mittleres Alter string", null, Category="Manuell")]
        [NUnit.Framework.TestCaseAttribute("8", "2009,1", "Ja", "-", "Ungültiges Mittleres Alter Kommastelle", null, Category="Manuell")]
        [NUnit.Framework.TestCaseAttribute("9", "!^\'~", "Nein", "!^\'~", "Ungültiges Mittleres Alter Sonderzeichen", null, Category="Manuell")]
        public virtual void DerData_ManagerKannDenZurAktuellenJahresperiodeErfassenZustandsdatenEinMittleresErhebungsdatumAlterZuweisen(string tF, string mittleresAlter, string validationfehler, string mittleresAlterErgebnis, string kommentar, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Automatisch"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Data-Manager kann den zur aktuellen Jahresperiode erfassen Zustandsdaten ein " +
                    "mittleres Erhebungsdatum (Alter) zuweisen", @__tags);
#line 161
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mandant",
                        "Modus",
                        "Mengentyp"});
            table13.AddRow(new string[] {
                        "Mandant_1",
                        "summarisch",
                        "Gesamtlänge"});
#line 162
 testRunner.Given("folgende Einstellungen existieren:", ((string)(null)), table13, "Gegeben sei ");
#line 166
 testRunner.And("ich bin Data-Manager von \'Mandant_1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line 168
    testRunner.And("ich öffne die Seite \'Zustands- und Netzinformationen im Summarischen Modus\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line 170
 testRunner.When(string.Format("ich Mittleres Alter \'{0}\' eingebe", mittleresAlter), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line 172
 testRunner.Then(string.Format("Mittleres Alter hat einen Validationsfehler \'{0}\'", validationfehler), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mandant",
                        "Mittleres Alter"});
            table14.AddRow(new string[] {
                        "Mandant_1",
                        string.Format("{0}", mittleresAlterErgebnis)});
#line 174
    testRunner.Then("sind folgende Mittlere Alter im System:", ((string)(null)), table14, "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Archivierte Daten können nicht verändert werden")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void ArchivierteDatenKonnenNichtVerandertWerden()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Archivierte Daten können nicht verändert werden", new string[] {
                        "Manuell"});
#line 196
this.ScenarioSetup(scenarioInfo);
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Am UI wird nur der Mengentyp angezeigt, der aktuell für den Mandanten konfigurier" +
            "t ist")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void AmUIWirdNurDerMengentypAngezeigtDerAktuellFurDenMandantenKonfiguriertIst()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Am UI wird nur der Mengentyp angezeigt, der aktuell für den Mandanten konfigurier" +
                    "t ist", new string[] {
                        "Manuell"});
#line 201
this.ScenarioSetup(scenarioInfo);
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
