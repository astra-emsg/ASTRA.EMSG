// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ASTRA.EMSG.IntegrationTests.Features.Security
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("Security", new string[] {
            "Automatisch"}, Description="\tAls EMSG-Benutzer\r\n\twill ich Zugriff auf die Bereiche der Fachapplikation haben," +
        " die ich gemäss meiner Rolle bearbeiten darf\r\n\tdamit ich meine Aufgaben mittels " +
        "EMSG erfüllen kann", SourceFile="Features\\Security\\Security.feature", SourceLine=1)]
    public partial class SecurityFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Security.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("de-AT"), "Security", "\tAls EMSG-Benutzer\r\n\twill ich Zugriff auf die Bereiche der Fachapplikation haben," +
                    " die ich gemäss meiner Rolle bearbeiten darf\r\n\tdamit ich meine Aufgaben mittels " +
                    "EMSG erfüllen kann", ProgrammingLanguage.CSharp, new string[] {
                        "Automatisch"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void Security(string tF, string seite, string data_Manager, string data_Reader, string benutzeradministrator, string benchmarkteilnehmer, string applikationsadministrator, string applikationssupporter, string modus, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Security", exampleTags);
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("ich bin Benutzer von EMSG", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Gegeben sei ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mandant",
                        "Modus",
                        "Mengentyp"});
            table1.AddRow(new string[] {
                        "Mandant",
                        string.Format("{0}", modus),
                        "Gesamtlänge"});
#line 9
        testRunner.And("folgende Einstellungen existieren:", ((string)(null)), table1, "Und ");
#line 13
     testRunner.And("ich bin Data-Manager von \'Mandant\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line 15
 testRunner.When(string.Format("ich die Seite \'{0}\' öffne", seite), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "DataManager",
                        "DataReader",
                        "Benutzeradministrator",
                        "Benchmarkteilnehmer",
                        "Applikationsadministrator",
                        "Applikationssupporter"});
            table2.AddRow(new string[] {
                        string.Format("{0}", data_Manager),
                        string.Format("{0}", data_Reader),
                        string.Format("{0}", benutzeradministrator),
                        string.Format("{0}", benchmarkteilnehmer),
                        string.Format("{0}", applikationsadministrator),
                        string.Format("{0}", applikationssupporter)});
#line 17
 testRunner.Then("habe ich Zugriff als:", ((string)(null)), table2, "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Security, 1", SourceLine=22)]
        public virtual void Security_1()
        {
            this.Security("1", "Strassenmenge und Zustand", "ja", "nein", "nein", "nein", "nein", "nein", "summarisch", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Security, 3", SourceLine=22)]
        public virtual void Security_3()
        {
            this.Security("3", "Netzdefinition (strassennamen)", "ja", "nein", "nein", "nein", "nein", "nein", "strassennamen", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Security, 4", SourceLine=22)]
        public virtual void Security_4()
        {
            this.Security("4", "Netzdefinition (gis)", "ja", "nein", "nein", "nein", "nein", "nein", "gis", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Security, 5", SourceLine=22)]
        public virtual void Security_5()
        {
            this.Security("5", "Zustände und Massnahmenvorschläge (strassennamen)", "ja", "nein", "nein", "nein", "nein", "nein", "strassennamen", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Security, 6", SourceLine=22)]
        public virtual void Security_6()
        {
            this.Security("6", "Zustände und Massnahmenvorschläge (gis)", "ja", "nein", "nein", "nein", "nein", "nein", "gis", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Security, 7", SourceLine=22)]
        public virtual void Security_7()
        {
            this.Security("7", "Inspektionsrouten", "ja", "nein", "nein", "nein", "nein", "nein", "gis", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Security, 8", SourceLine=22)]
        public virtual void Security_8()
        {
            this.Security("8", "Massnahmenvorschläge anderer Teilsysteme", "ja", "nein", "nein", "nein", "nein", "nein", "gis", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Security, 9", SourceLine=22)]
        public virtual void Security_9()
        {
            this.Security("9", "Koordinierte Massnahmen", "ja", "nein", "nein", "nein", "nein", "nein", "gis", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Security, 10", SourceLine=22)]
        public virtual void Security_10()
        {
            this.Security("10", "Realisierte Massnehmen (summarisch)", "ja", "nein", "nein", "nein", "nein", "nein", "summarisch", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Security, 11", SourceLine=22)]
        public virtual void Security_11()
        {
            this.Security("11", "Realisierte Massnehmen (strassennamen)", "ja", "nein", "nein", "nein", "nein", "nein", "strassennamen", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Security, 12", SourceLine=22)]
        public virtual void Security_12()
        {
            this.Security("12", "Realisierte Massnehmen (gis)", "ja", "nein", "nein", "nein", "nein", "nein", "gis", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Security, 13", SourceLine=22)]
        public virtual void Security_13()
        {
            this.Security("13", "Kenngrössen früherer Jahre (summarisch)", "ja", "nein", "nein", "nein", "nein", "nein", "summarisch", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Security, 14", SourceLine=22)]
        public virtual void Security_14()
        {
            this.Security("14", "Kenngrössen früherer Jahre (strassennamen)", "ja", "nein", "nein", "nein", "nein", "nein", "strassennamen", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Security, 15", SourceLine=22)]
        public virtual void Security_15()
        {
            this.Security("15", "Kenngrössen früherer Jahre (gis)", "ja", "nein", "nein", "nein", "nein", "nein", "gis", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Security")]
    [NUnit.Framework.CategoryAttribute("Automatisch")]
    public partial class SecurityFeature_NUnit
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Security.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("de-AT"), "Security", "\tAls EMSG-Benutzer\r\n\twill ich Zugriff auf die Bereiche der Fachapplikation haben," +
                    " die ich gemäss meiner Rolle bearbeiten darf\r\n\tdamit ich meine Aufgaben mittels " +
                    "EMSG erfüllen kann", ProgrammingLanguage.CSharp, new string[] {
                        "Automatisch"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Security")]
        [NUnit.Framework.TestCaseAttribute("1", "Strassenmenge und Zustand", "ja", "nein", "nein", "nein", "nein", "nein", "summarisch", new string[0])]
        [NUnit.Framework.TestCaseAttribute("3", "Netzdefinition (strassennamen)", "ja", "nein", "nein", "nein", "nein", "nein", "strassennamen", new string[0])]
        [NUnit.Framework.TestCaseAttribute("4", "Netzdefinition (gis)", "ja", "nein", "nein", "nein", "nein", "nein", "gis", new string[0])]
        [NUnit.Framework.TestCaseAttribute("5", "Zustände und Massnahmenvorschläge (strassennamen)", "ja", "nein", "nein", "nein", "nein", "nein", "strassennamen", new string[0])]
        [NUnit.Framework.TestCaseAttribute("6", "Zustände und Massnahmenvorschläge (gis)", "ja", "nein", "nein", "nein", "nein", "nein", "gis", new string[0])]
        [NUnit.Framework.TestCaseAttribute("7", "Inspektionsrouten", "ja", "nein", "nein", "nein", "nein", "nein", "gis", new string[0])]
        [NUnit.Framework.TestCaseAttribute("8", "Massnahmenvorschläge anderer Teilsysteme", "ja", "nein", "nein", "nein", "nein", "nein", "gis", new string[0])]
        [NUnit.Framework.TestCaseAttribute("9", "Koordinierte Massnahmen", "ja", "nein", "nein", "nein", "nein", "nein", "gis", new string[0])]
        [NUnit.Framework.TestCaseAttribute("10", "Realisierte Massnehmen (summarisch)", "ja", "nein", "nein", "nein", "nein", "nein", "summarisch", new string[0])]
        [NUnit.Framework.TestCaseAttribute("11", "Realisierte Massnehmen (strassennamen)", "ja", "nein", "nein", "nein", "nein", "nein", "strassennamen", new string[0])]
        [NUnit.Framework.TestCaseAttribute("12", "Realisierte Massnehmen (gis)", "ja", "nein", "nein", "nein", "nein", "nein", "gis", new string[0])]
        [NUnit.Framework.TestCaseAttribute("13", "Kenngrössen früherer Jahre (summarisch)", "ja", "nein", "nein", "nein", "nein", "nein", "summarisch", new string[0])]
        [NUnit.Framework.TestCaseAttribute("14", "Kenngrössen früherer Jahre (strassennamen)", "ja", "nein", "nein", "nein", "nein", "nein", "strassennamen", new string[0])]
        [NUnit.Framework.TestCaseAttribute("15", "Kenngrössen früherer Jahre (gis)", "ja", "nein", "nein", "nein", "nein", "nein", "gis", new string[0])]
        public virtual void Security(string tF, string seite, string data_Manager, string data_Reader, string benutzeradministrator, string benchmarkteilnehmer, string applikationsadministrator, string applikationssupporter, string modus, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Security", exampleTags);
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("ich bin Benutzer von EMSG", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Gegeben sei ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mandant",
                        "Modus",
                        "Mengentyp"});
            table1.AddRow(new string[] {
                        "Mandant",
                        string.Format("{0}", modus),
                        "Gesamtlänge"});
#line 9
        testRunner.And("folgende Einstellungen existieren:", ((string)(null)), table1, "Und ");
#line 13
     testRunner.And("ich bin Data-Manager von \'Mandant\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line 15
 testRunner.When(string.Format("ich die Seite \'{0}\' öffne", seite), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "DataManager",
                        "DataReader",
                        "Benutzeradministrator",
                        "Benchmarkteilnehmer",
                        "Applikationsadministrator",
                        "Applikationssupporter"});
            table2.AddRow(new string[] {
                        string.Format("{0}", data_Manager),
                        string.Format("{0}", data_Reader),
                        string.Format("{0}", benutzeradministrator),
                        string.Format("{0}", benchmarkteilnehmer),
                        string.Format("{0}", applikationsadministrator),
                        string.Format("{0}", applikationssupporter)});
#line 17
 testRunner.Then("habe ich Zugriff als:", ((string)(null)), table2, "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
