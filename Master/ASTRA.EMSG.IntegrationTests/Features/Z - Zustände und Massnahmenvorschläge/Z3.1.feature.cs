// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ASTRA.EMSG.IntegrationTests.Features.Z_ZustandeUndMassnahmenvorschlage
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("Z3.1 - Mit EMSG-Mobile Schäden und Massnahmenvorschläge für Strassenabschnitte be" +
        "arbeiten", Description="\tAls Data-Manager,\r\n\twill ich mit EMSG-Mobile Schäden und Massnahmenvorschläge fü" +
        "r Strassenabschnitte erfassen\r\n\tdamit ich meine Inspektionsergebnisse im Feld oh" +
        "ne die Notwendigkeit einer Internet-Verbindung erfassen kann", SourceFile="Features\\Z - Zustände und Massnahmenvorschläge\\Z3.1.feature", SourceLine=0)]
    public partial class Z3_1_MitEMSG_MobileSchadenUndMassnahmenvorschlageFurStrassenabschnitteBearbeitenFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Z3.1.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("de-AT"), "Z3.1 - Mit EMSG-Mobile Schäden und Massnahmenvorschläge für Strassenabschnitte be" +
                    "arbeiten", "\tAls Data-Manager,\r\n\twill ich mit EMSG-Mobile Schäden und Massnahmenvorschläge fü" +
                    "r Strassenabschnitte erfassen\r\n\tdamit ich meine Inspektionsergebnisse im Feld oh" +
                    "ne die Notwendigkeit einer Internet-Verbindung erfassen kann", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mandant",
                        "Modus"});
            table1.AddRow(new string[] {
                        "Mandant_1",
                        "gis"});
#line 7
testRunner.Given("folgende Einstellungen existieren:", ((string)(null)), table1, "Gegeben sei ");
#line 11
 testRunner.And("ich bin Data-Manager von \'Mandant_1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Strassenname",
                        "BezeichnungVon",
                        "BezeichnungBis",
                        "Belagsart",
                        "BreiteFahrbahn",
                        "Trottoir",
                        "BreiteTrottoirLinks",
                        "BreiteTrottoirRechtss"});
            table2.AddRow(new string[] {
                        "1",
                        "Kantonsstrasse",
                        "Abschnitt A Anfang",
                        "Abschnitt A Ende",
                        "Asphalt",
                        "4,5",
                        "beide Seiten",
                        "2,5",
                        "3"});
            table2.AddRow(new string[] {
                        "2",
                        "Kantonsstrasse",
                        "Abschnitt B Anfang",
                        "Abschnitt B Ende",
                        "Asphalt",
                        "5,5",
                        "beide Seiten",
                        "2,5",
                        "3"});
            table2.AddRow(new string[] {
                        "3",
                        "Landstrasse",
                        "Abschnitt A Anfang",
                        "Abschnitt A Ende",
                        "Beton",
                        "5,75",
                        "beide Seiten",
                        "2,5",
                        "3"});
            table2.AddRow(new string[] {
                        "4",
                        "Hauptstrasse",
                        "Abschnitt A Anfang",
                        "Abschnitt A Ende",
                        "Beton",
                        "7",
                        "beide Seiten",
                        "2,5",
                        "3"});
            table2.AddRow(new string[] {
                        "5",
                        "Hauptstrasse",
                        "Abschnitt B Anfang",
                        "Abschnitt B Ende",
                        "Asphalt",
                        "7",
                        "beide Seiten",
                        "2,5",
                        "3"});
            table2.AddRow(new string[] {
                        "6",
                        "Hauptstrasse",
                        "Abschnitt C Anfang",
                        "Abschnitt C Ende",
                        "Asphalt",
                        "14",
                        "beide Seiten",
                        "2,5",
                        "3"});
#line 12
 testRunner.And("folgende Netzinformationen existieren:", ((string)(null)), table2, "Und ");
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Manager kann einen Zustandsabschnitt auf der Karte digitalisieren", new string[] {
                "Manuell"}, SourceLine=21)]
        public virtual void DerData_ManagerKannEinenZustandsabschnittAufDerKarteDigitalisieren()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Data-Manager kann einen Zustandsabschnitt auf der Karte digitalisieren", new string[] {
                        "Manuell"});
#line 22
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Manager kann Anfangs- und Endpunkt eines Zustandsabschnitts auf der Kart" +
            "e festlegen", new string[] {
                "Manuell"}, SourceLine=26)]
        public virtual void DerData_ManagerKannAnfangs_UndEndpunktEinesZustandsabschnittsAufDerKarteFestlegen()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Data-Manager kann Anfangs- und Endpunkt eines Zustandsabschnitts auf der Kart" +
                    "e festlegen", new string[] {
                        "Manuell"});
#line 27
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 28
testRunner.Given("ich öffne die Seite \'Netzverwaltung\\Zustände und Massnahmenvorschläge\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Gegeben sei ");
#line 29
 testRunner.And("ich wähle einen beliebigen Zustandsabschnitt aus", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line 30
 testRunner.And("ich aktiviere das Tool \'Zustandsabschnitts Geometrie bearbeiten\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line 31
 testRunner.When("ich einen Anfangs oder Endpunkt  entlang des darunterliegendem Strassenabschnitt " +
                    "bewege", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line 32
 testRunner.Then("wird der Zustandsabschnitt entsprechend verlängert oder verkürzt", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Zustandsabschnitte dürfen sich nicht überlappen", new string[] {
                "Manuell"}, SourceLine=36)]
        public virtual void ZustandsabschnitteDurfenSichNichtUberlappen()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Zustandsabschnitte dürfen sich nicht überlappen", new string[] {
                        "Manuell"});
#line 37
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 38
testRunner.When("ich versuche eine den Endpunkt eines Zustandabschnittes über die räumliche Defini" +
                    "tion eines für den selben Strassenabschnitt vorliegenden Zustandabschnittes  auf" +
                    " der Karte zu ziehen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line 39
testRunner.Then("stoppt der Punkt am Ende, bzw. Anfang des Zustandabschnittes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Zustandsabschnitt muss immer einem Strassenabschnitt zugeordnet sein", new string[] {
                "Manuell"}, SourceLine=43)]
        public virtual void DerZustandsabschnittMussImmerEinemStrassenabschnittZugeordnetSein()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Zustandsabschnitt muss immer einem Strassenabschnitt zugeordnet sein", new string[] {
                        "Manuell"});
#line 44
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 45
testRunner.When("ich versuche einen End- oder Anfangspunkt über das Segment des darunterliegenden " +
                    "Strassenabschnittes hinauszuziehen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line 46
testRunner.Then("stoppt der Punkt am Ende des Segments des Strassenabschnitts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Zustandsabschnitt erbt ‚Strassenname‘, ‚Belagsart‘, ‚Breite Fahrbahn‘, ‚Trott" +
            "oir‘, ‚Breite Trottoir links‘ und ‚Breite Trottoir rechts‘ vom Strassenabschnitt" +
            "", new string[] {
                "Manuell"}, SourceLine=50)]
        public virtual void DerZustandsabschnittErbtStrassennameBelagsartBreiteFahrbahnTrottoirBreiteTrottoirLinksUndBreiteTrottoirRechtsVomStrassenabschnitt()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Zustandsabschnitt erbt ‚Strassenname‘, ‚Belagsart‘, ‚Breite Fahrbahn‘, ‚Trott" +
                    "oir‘, ‚Breite Trottoir links‘ und ‚Breite Trottoir rechts‘ vom Strassenabschnitt" +
                    "", new string[] {
                        "Manuell"});
#line 51
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Angaben zum Trottoir wie Zustandsindex, Erneuerung usw. können nur erfasst werden" +
            ", sofern der Strassenabschnitt auch einen entsprechenden Trottoir(typ) aufweist", new string[] {
                "Manuell"}, SourceLine=55)]
        public virtual void AngabenZumTrottoirWieZustandsindexErneuerungUsw_KonnenNurErfasstWerdenSofernDerStrassenabschnittAuchEinenEntsprechendenTrottoirTypAufweist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Angaben zum Trottoir wie Zustandsindex, Erneuerung usw. können nur erfasst werden" +
                    ", sofern der Strassenabschnitt auch einen entsprechenden Trottoir(typ) aufweist", new string[] {
                        "Manuell"});
#line 56
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Das System stellt sicher, dass die Summe der Längen der Zustandsabschnitte nicht " +
            "grösser ist, als die Länge des Strassenabschnitts", new string[] {
                "Manuell"}, SourceLine=60)]
        public virtual void DasSystemStelltSicherDassDieSummeDerLangenDerZustandsabschnitteNichtGrosserIstAlsDieLangeDesStrassenabschnitts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Das System stellt sicher, dass die Summe der Längen der Zustandsabschnitte nicht " +
                    "grösser ist, als die Länge des Strassenabschnitts", new string[] {
                        "Manuell"});
#line 61
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void DerData_ManagerKannAttributeVonZustandsabschnittenErfassen(
                    string tF, 
                    string strassenname, 
                    string bezeichnungVonStrasse, 
                    string bezeichnungBisStrasse, 
                    string bezeichnungVon, 
                    string bezeichnungBis, 
                    string lange, 
                    string aufnahmedatum, 
                    string aufnahmeteam, 
                    string wetter, 
                    string zustandsIndexFahrbahn, 
                    string zustandsindexTrottoirLinks, 
                    string zustandsindexTrottoirRechts, 
                    string massnahmenvorschlagFahrbahn, 
                    string dringlichkeitMassnahmenvorschlagFahrbahn, 
                    string trottoirLinksErneuerung, 
                    string dringlichkeitTrottoirLinksErneuerung, 
                    string trottoirRechtsErneuerung, 
                    string dringlichkeitTrottoirRechtsErneuerung, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Manuell"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Data-Manager kann Attribute von Zustandsabschnitten erfassen", @__tags);
#line 66
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Strassenname",
                        "BezeichnungVonStrasse",
                        "BezeichnungBisStrasse",
                        "BezeichnungVon",
                        "BezeichnungBis",
                        "Länge",
                        "Aufnahmedatum",
                        "Aufnahmeteam",
                        "Wetter",
                        "ZustandsIndexFahrbahn",
                        "ZustandsindexTrottoirLinks",
                        "ZustandsindexTrottoirRechts",
                        "MassnahmenvorschlagFahrbahn",
                        "DringlichkeitMassnahmenvorschlagFahrbahn",
                        "TrottoirLinksErneuerung",
                        "DringlichkeitTrottoirLinksErneuerung",
                        "TrottoirRechtsErneuerung",
                        "DringlichkeitTrottoirRechtsErneuerung"});
            table3.AddRow(new string[] {
                        string.Format("{0}", strassenname),
                        string.Format("{0}", bezeichnungVonStrasse),
                        string.Format("{0}", bezeichnungBisStrasse),
                        string.Format("{0}", bezeichnungVon),
                        string.Format("{0}", bezeichnungBis),
                        string.Format("{0}", lange),
                        string.Format("{0}", aufnahmedatum),
                        string.Format("{0}", aufnahmeteam),
                        string.Format("{0}", wetter),
                        string.Format("{0}", zustandsIndexFahrbahn),
                        string.Format("{0}", zustandsindexTrottoirLinks),
                        string.Format("{0}", zustandsindexTrottoirRechts),
                        string.Format("{0}", massnahmenvorschlagFahrbahn),
                        string.Format("{0}", dringlichkeitMassnahmenvorschlagFahrbahn),
                        string.Format("{0}", trottoirLinksErneuerung),
                        string.Format("{0}", dringlichkeitTrottoirLinksErneuerung),
                        string.Format("{0}", trottoirRechtsErneuerung),
                        string.Format("{0}", dringlichkeitTrottoirRechtsErneuerung)});
#line 67
testRunner.When("ich folgende GIS-Netzinformationen eingebe:", ((string)(null)), table3, "Wenn ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Strassenname",
                        "BezeichnungVonStrasse",
                        "BezeichnungBisStrasse",
                        "BezeichnungVon",
                        "BezeichnungBis",
                        "Länge",
                        "Aufnahmedatum",
                        "Aufnahmeteam",
                        "Wetter",
                        "ZustandsIndexFahrbahn",
                        "ZustandsindexTrottoirLinks",
                        "ZustandsindexTrottoirRechts",
                        "MassnahmenvorschlagFahrbahn",
                        "DringlichkeitMassnahmenvorschlagFahrbahn",
                        "TrottoirLinksErneuerung",
                        "DringlichkeitTrottoirLinksErneuerung",
                        "TrottoirRechtsErneuerung",
                        "DringlichkeitTrottoirRechtsErneuerung"});
            table4.AddRow(new string[] {
                        string.Format("{0}", strassenname),
                        string.Format("{0}", bezeichnungVonStrasse),
                        string.Format("{0}", bezeichnungBisStrasse),
                        string.Format("{0}", bezeichnungVon),
                        string.Format("{0}", bezeichnungBis),
                        string.Format("{0}", lange),
                        string.Format("{0}", aufnahmedatum),
                        string.Format("{0}", aufnahmeteam),
                        string.Format("{0}", wetter),
                        string.Format("{0}", zustandsIndexFahrbahn),
                        string.Format("{0}", zustandsindexTrottoirLinks),
                        string.Format("{0}", zustandsindexTrottoirRechts),
                        string.Format("{0}", massnahmenvorschlagFahrbahn),
                        string.Format("{0}", dringlichkeitMassnahmenvorschlagFahrbahn),
                        string.Format("{0}", trottoirLinksErneuerung),
                        string.Format("{0}", dringlichkeitTrottoirLinksErneuerung),
                        string.Format("{0}", trottoirRechtsErneuerung),
                        string.Format("{0}", dringlichkeitTrottoirRechtsErneuerung)});
#line 71
 testRunner.Then("sind folgende GIS-Netzinformationen im System:", ((string)(null)), table4, "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Manager kann Attribute von Zustandsabschnitten erfassen, 1", new string[] {
                "Manuell"}, SourceLine=76)]
        public virtual void DerData_ManagerKannAttributeVonZustandsabschnittenErfassen_1()
        {
            this.DerData_ManagerKannAttributeVonZustandsabschnittenErfassen("1", "Kantonsstrasse", "Abschnitt A Anfang", "Abschnitt A Ende", "0.2", "1.2", "1000", "12.14.2009", "Drei", "Nass", "2,3", "", "", "Instandsetzung", "dringlich", "", "", "", "", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Manager kann Attribute von Zustandsabschnitten erfassen, 2", new string[] {
                "Manuell"}, SourceLine=76)]
        public virtual void DerData_ManagerKannAttributeVonZustandsabschnittenErfassen_2()
        {
            this.DerData_ManagerKannAttributeVonZustandsabschnittenErfassen("2", "Kantonsstrasse", "Abschnitt A Anfang", "Abschnitt A Ende", "1.2", "2.0", "800", "12.14.2009", "Drei", "Nass", "2,3", "", "", "Instandsetzung", "dringlich", "", "", "", "", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Manager kann Attribute von Zustandsabschnitten erfassen, 3", new string[] {
                "Manuell"}, SourceLine=76)]
        public virtual void DerData_ManagerKannAttributeVonZustandsabschnittenErfassen_3()
        {
            this.DerData_ManagerKannAttributeVonZustandsabschnittenErfassen("3", "Kantonsstrasse", "Abschnitt B Anfang", "Abschnitt B Ende", "2.0", "7.0", "5000", "23.03.2009", "A", "Trocken", "1,2", "Gut", "", "Instandsetzung", "mittelfristig", "", "", "", "", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Manager kann Attribute von Zustandsabschnitten erfassen, 4", new string[] {
                "Manuell"}, SourceLine=76)]
        public virtual void DerData_ManagerKannAttributeVonZustandsabschnittenErfassen_4()
        {
            this.DerData_ManagerKannAttributeVonZustandsabschnittenErfassen("4", "Landstrasse", "Abschnitt A Anfang", "Abschnitt A Ende", "0.0", "2.1", "2100", "21.05.2009", "B", "Trocken", "1,1", "", "Kritisch", "Ersatz", "langfristig", "", "", "ja", "dringend", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Manager kann Attribute von Zustandsabschnitten erfassen, 5", new string[] {
                "Manuell"}, SourceLine=76)]
        public virtual void DerData_ManagerKannAttributeVonZustandsabschnittenErfassen_5()
        {
            this.DerData_ManagerKannAttributeVonZustandsabschnittenErfassen("5", "Landstrasse", "Abschnitt A Anfang", "Abschnitt A Ende", "2.1", "2.4", "300", "21.05.2009", "B", "Trocken", "1,1", "", "Kritisch", "Ersatz", "langfristig", "", "", "ja", "dringend", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Manager kann Attribute von Zustandsabschnitten erfassen, 6", new string[] {
                "Manuell"}, SourceLine=76)]
        public virtual void DerData_ManagerKannAttributeVonZustandsabschnittenErfassen_6()
        {
            this.DerData_ManagerKannAttributeVonZustandsabschnittenErfassen("6", "Landstrasse", "Abschnitt A Anfang", "Abschnitt A Ende", "2.4", "2.5", "100", "21.05.2009", "B", "Trocken", "2,1", "", "Ausreichend", "Ersatz", "langfristig", "", "", "ja", "mittelfristig", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Manager kann Attribute von Zustandsabschnitten erfassen, 7", new string[] {
                "Manuell"}, SourceLine=76)]
        public virtual void DerData_ManagerKannAttributeVonZustandsabschnittenErfassen_7()
        {
            this.DerData_ManagerKannAttributeVonZustandsabschnittenErfassen("7", "Hauptstrasse", "Abschnitt A Anfang", "Abschnitt A Ende", "1.2", "2.5", "1300", "21.10.2009", "Meyer", "Trocken", "3,4", "Mittel", "Gut", "", "", "ja", "langfristig", "", "", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Manager kann Attribute von Zustandsabschnitten erfassen, 8", new string[] {
                "Manuell"}, SourceLine=76)]
        public virtual void DerData_ManagerKannAttributeVonZustandsabschnittenErfassen_8()
        {
            this.DerData_ManagerKannAttributeVonZustandsabschnittenErfassen("8", "Hauptstrasse", "Abschnitt B Anfang", "Abschnitt B Ende", "0.4", "0.8", "400", "13.09.2009", "A", "Trocken", "2,3", "", "", "", "", "", "", "", "", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Manager kann Attribute von Zustandsabschnitten erfassen, 9", new string[] {
                "Manuell"}, SourceLine=76)]
        public virtual void DerData_ManagerKannAttributeVonZustandsabschnittenErfassen_9()
        {
            this.DerData_ManagerKannAttributeVonZustandsabschnittenErfassen("9", "Hauptstrasse", "Abschnitt B Anfang", "Abschnitt B Ende", "0.8", "1.2", "400", "13.09.2009", "A", "Trocken", "2,3", "", "", "", "", "", "", "", "", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Manager kann Attribute von Zustandsabschnitten erfassen, 10", new string[] {
                "Manuell"}, SourceLine=76)]
        public virtual void DerData_ManagerKannAttributeVonZustandsabschnittenErfassen_10()
        {
            this.DerData_ManagerKannAttributeVonZustandsabschnittenErfassen("10", "Hauptstrasse", "Abschnitt C Anfang", "Abschnitt C Ende", "0.0", "0.1", "100", "24.07.2009", "B", "Trocken", "3,3", "", "", "", "", "", "", "", "", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Manager kann Attribute von Zustandsabschnitten erfassen, 11", new string[] {
                "Manuell"}, SourceLine=76)]
        public virtual void DerData_ManagerKannAttributeVonZustandsabschnittenErfassen_11()
        {
            this.DerData_ManagerKannAttributeVonZustandsabschnittenErfassen("11", "Hauptstrasse", "Abschnitt C Anfang", "Abschnitt C Ende", "0.1", "0.2", "100", "24.07.2009", "B", "Trocken", "4,3", "", "", "", "", "", "", "", "", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Manager kann Attribute von Zustandsabschnitten erfassen, 12", new string[] {
                "Manuell"}, SourceLine=76)]
        public virtual void DerData_ManagerKannAttributeVonZustandsabschnittenErfassen_12()
        {
            this.DerData_ManagerKannAttributeVonZustandsabschnittenErfassen("12", "Hauptstrasse", "Abschnitt C Anfang", "Abschnitt C Ende", "0.2", "0.4", "200", "24.07.2009", "B", "Trocken", "4,8", "", "", "", "", "", "", "", "", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Manager kann das Zustandserfassungsformular (Erfassungsformular für Ober" +
            "flächenschäden) ausfüllen", new string[] {
                "Manuell"}, SourceLine=92)]
        public virtual void DerData_ManagerKannDasZustandserfassungsformularErfassungsformularFurOberflachenschadenAusfullen()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Data-Manager kann das Zustandserfassungsformular (Erfassungsformular für Ober" +
                    "flächenschäden) ausfüllen", new string[] {
                        "Manuell"});
#line 93
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Das System stellt bei grober und detaillierter Erfassung das Formular entsprechen" +
            "d der Belagsart des Strassenabschnitts dar", new string[] {
                "Manuell"}, SourceLine=97)]
        public virtual void DasSystemStelltBeiGroberUndDetaillierterErfassungDasFormularEntsprechendDerBelagsartDesStrassenabschnittsDar()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Das System stellt bei grober und detaillierter Erfassung das Formular entsprechen" +
                    "d der Belagsart des Strassenabschnitts dar", new string[] {
                        "Manuell"});
#line 98
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Erfassungsformular Oberflächenschäden Betonbelag (Beton) - detailliert", new string[] {
                "Manuell"}, SourceLine=102)]
        public virtual void ErfassungsformularOberflachenschadenBetonbelagBeton_Detailliert()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Erfassungsformular Oberflächenschäden Betonbelag (Beton) - detailliert", new string[] {
                        "Manuell"});
#line 103
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 104
testRunner.When("ich das Erfassungsformular für Oberflächenschäden für den Zustandsabschnitt mit d" +
                    "er Id \'2\' öffne", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Kategorie",
                        "Schaden"});
            table5.AddRow(new string[] {
                        "Oberflächenglätte",
                        "Polieren"});
            table5.AddRow(new string[] {
                        "Materialverluste",
                        "Abrieb"});
            table5.AddRow(new string[] {
                        "Materialverluste",
                        "Abblätterung"});
            table5.AddRow(new string[] {
                        "Materialverluste",
                        "Abplatzungen"});
            table5.AddRow(new string[] {
                        "Fugen- und Kantenschäden",
                        "Kantenschäden, Absplitterung"});
            table5.AddRow(new string[] {
                        "Fugen- und Kantenschäden",
                        "Fehlender oder spröder Fugenverguss"});
            table5.AddRow(new string[] {
                        "Vertikalverschiebung",
                        "Setzungen, Frosthebungen"});
            table5.AddRow(new string[] {
                        "Vertikalverschiebung",
                        "Stufenbildung"});
            table5.AddRow(new string[] {
                        "Vertikalverschiebung",
                        "Pumpen"});
            table5.AddRow(new string[] {
                        "Vertikalverschiebung",
                        "Blow-up"});
            table5.AddRow(new string[] {
                        "Risse, Brüche",
                        "Risse"});
            table5.AddRow(new string[] {
                        "Risse, Brüche",
                        "Zerstörte Platten"});
            table5.AddRow(new string[] {
                        "Flicke",
                        "Flicke"});
#line 105
testRunner.Then("sehe ich das Schadenerfassungsformular mit folgenden Möglichkeiten:", ((string)(null)), table5, "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Erfassungsformular Oberflächenschäden bitumenhaltiger Belag (Asphalt) - detaillie" +
            "rt", new string[] {
                "Manuell"}, SourceLine=123)]
        public virtual void ErfassungsformularOberflachenschadenBitumenhaltigerBelagAsphalt_Detailliert()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Erfassungsformular Oberflächenschäden bitumenhaltiger Belag (Asphalt) - detaillie" +
                    "rt", new string[] {
                        "Manuell"});
#line 124
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 125
testRunner.When("ich das Erfassungsformular für Oberflächenschäden für den Zustandsabschnitt mit d" +
                    "er Id \'1\' öffne", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Kategorie",
                        "Schaden"});
            table6.AddRow(new string[] {
                        "Oberflächenglätte",
                        "Polieren"});
            table6.AddRow(new string[] {
                        "Oberflächenglätte",
                        "Schwitzen"});
            table6.AddRow(new string[] {
                        "Belagschäden",
                        "Abrieb"});
            table6.AddRow(new string[] {
                        "Belagschäden",
                        "Ausmagerung, Absanden"});
            table6.AddRow(new string[] {
                        "Belagschäden",
                        "Kornausbrüche"});
            table6.AddRow(new string[] {
                        "Belagschäden",
                        "Ablösungen"});
            table6.AddRow(new string[] {
                        "Belagschäden",
                        "Schlaglöcher"});
            table6.AddRow(new string[] {
                        "Belagschäden",
                        "Offene Nähte"});
            table6.AddRow(new string[] {
                        "Belagschäden",
                        "Querrisse"});
            table6.AddRow(new string[] {
                        "Belagschäden",
                        "Wilde Risse"});
            table6.AddRow(new string[] {
                        "Belagsverformungen",
                        "Spurrinnen"});
            table6.AddRow(new string[] {
                        "Belagsverformungen",
                        "Aufwölbungen"});
            table6.AddRow(new string[] {
                        "Belagsverformungen",
                        "Wellblechverformungen"});
            table6.AddRow(new string[] {
                        "Belagsverformungen",
                        "Schubverformungen"});
            table6.AddRow(new string[] {
                        "Strukturelle Schäden",
                        "Anrisse von Setzungen"});
            table6.AddRow(new string[] {
                        "Strukturelle Schäden",
                        "Setzungen, Einsenkungen"});
            table6.AddRow(new string[] {
                        "Strukturelle Schäden",
                        "Abgedrückte Ränder"});
            table6.AddRow(new string[] {
                        "Strukturelle Schäden",
                        "Frosthebungen"});
            table6.AddRow(new string[] {
                        "Strukturelle Schäden",
                        "Längsrisse"});
            table6.AddRow(new string[] {
                        "Strukturelle Schäden",
                        "Netzrisse"});
            table6.AddRow(new string[] {
                        "Strukturelle Schäden",
                        "Belagsrandrisse"});
            table6.AddRow(new string[] {
                        "Flicke",
                        "Flicke"});
#line 126
testRunner.Then("sehe ich das Schadenerfassungsformular mit folgenden Möglichkeiten:", ((string)(null)), table6, "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Manager kann die Schadenschwere erfassen", new string[] {
                "Manuell"}, SourceLine=153)]
        public virtual void DerData_ManagerKannDieSchadenschwereErfassen()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Data-Manager kann die Schadenschwere erfassen", new string[] {
                        "Manuell"});
#line 154
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Manager kann das Schadenausmass erfassen", new string[] {
                "Manuell"}, SourceLine=158)]
        public virtual void DerData_ManagerKannDasSchadenausmassErfassen()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Data-Manager kann das Schadenausmass erfassen", new string[] {
                        "Manuell"});
#line 159
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Das System errechnet die Matrixwerte", new string[] {
                "Manuell"}, SourceLine=163)]
        public virtual void DasSystemErrechnetDieMatrixwerte()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Das System errechnet die Matrixwerte", new string[] {
                        "Manuell"});
#line 164
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Das System berechnet die Schadenbewertung", new string[] {
                "Manuell"}, SourceLine=168)]
        public virtual void DasSystemBerechnetDieSchadenbewertung()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Das System berechnet die Schadenbewertung", new string[] {
                        "Manuell"});
#line 169
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Das System berechnet die Schadensumme bei grober und detaillierter Erfassung", new string[] {
                "Manuell"}, SourceLine=173)]
        public virtual void DasSystemBerechnetDieSchadensummeBeiGroberUndDetaillierterErfassung()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Das System berechnet die Schadensumme bei grober und detaillierter Erfassung", new string[] {
                        "Manuell"});
#line 174
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 175
testRunner.When("ich das Erfassungsformular für Oberflächenschäden für den Zustandsabschnitt mit d" +
                    "er Id \'2\' öffne", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Kategorie",
                        "Schaden",
                        "Schwere",
                        "Schadenausmass"});
            table7.AddRow(new string[] {
                        "Oberflächenglätte",
                        "Polieren",
                        "S0",
                        "A1"});
            table7.AddRow(new string[] {
                        "Materialverluste",
                        "Abrieb",
                        "S1",
                        "A1"});
            table7.AddRow(new string[] {
                        "Materialverluste",
                        "Abblätterung",
                        "S2",
                        "A1"});
            table7.AddRow(new string[] {
                        "Materialverluste",
                        "Abplatzungen",
                        "S3",
                        "A1"});
            table7.AddRow(new string[] {
                        "Fugen- und Kantenschäden",
                        "Kantenschäden, Absplitterung",
                        "S0",
                        "A2"});
            table7.AddRow(new string[] {
                        "Fugen- und Kantenschäden",
                        "Fehlender oder spröder Fugenverguss",
                        "S1",
                        "A2"});
            table7.AddRow(new string[] {
                        "Vertikalverschiebung",
                        "Setzungen, Frosthebungen",
                        "S2",
                        "A2"});
            table7.AddRow(new string[] {
                        "Vertikalverschiebung",
                        "Stufenbildung",
                        "S3",
                        "A2"});
            table7.AddRow(new string[] {
                        "Vertikalverschiebung",
                        "Pumpen",
                        "S0",
                        "A3"});
            table7.AddRow(new string[] {
                        "Vertikalverschiebung",
                        "Blow-up",
                        "S1",
                        "A3"});
            table7.AddRow(new string[] {
                        "Risse, Brüche",
                        "Risse",
                        "S2",
                        "A3"});
            table7.AddRow(new string[] {
                        "Risse, Brüche",
                        "Zerstörte Platten",
                        "S3",
                        "A3"});
            table7.AddRow(new string[] {
                        "Flicke",
                        "Flicke",
                        "S0",
                        "A1"});
#line 176
testRunner.And("ich folgende Schäden erfasse:", ((string)(null)), table7, "Und ");
#line 191
testRunner.And("ich die Schäden speichere", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line 192
testRunner.Then("sehe ich die Schadenssumme \'44\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Das System berechnet den Zustandsindex (I1) bei grober und detaillierter Erfassun" +
            "g", new string[] {
                "Manuell"}, SourceLine=196)]
        public virtual void DasSystemBerechnetDenZustandsindexI1BeiGroberUndDetaillierterErfassung()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Das System berechnet den Zustandsindex (I1) bei grober und detaillierter Erfassun" +
                    "g", new string[] {
                        "Manuell"});
#line 197
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 198
testRunner.When("ich das Erfassungsformular für Oberflächenschäden für den Zustandsabschnitt mit d" +
                    "er Id \'2\' öffne", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Kategorie",
                        "Schaden",
                        "Schwere",
                        "Schadenausmass"});
            table8.AddRow(new string[] {
                        "Oberflächenglätte",
                        "Polieren",
                        "S0",
                        "A1"});
            table8.AddRow(new string[] {
                        "Materialverluste",
                        "Abrieb",
                        "S1",
                        "A1"});
            table8.AddRow(new string[] {
                        "Materialverluste",
                        "Abblätterung",
                        "S2",
                        "A1"});
            table8.AddRow(new string[] {
                        "Materialverluste",
                        "Abplatzungen",
                        "S3",
                        "A1"});
            table8.AddRow(new string[] {
                        "Fugen- und Kantenschäden",
                        "Kantenschäden, Absplitterung",
                        "S0",
                        "A2"});
            table8.AddRow(new string[] {
                        "Fugen- und Kantenschäden",
                        "Fehlender oder spröder Fugenverguss",
                        "S1",
                        "A2"});
            table8.AddRow(new string[] {
                        "Vertikalverschiebung",
                        "Setzungen, Frosthebungen",
                        "S2",
                        "A2"});
            table8.AddRow(new string[] {
                        "Vertikalverschiebung",
                        "Stufenbildung",
                        "S3",
                        "A2"});
            table8.AddRow(new string[] {
                        "Vertikalverschiebung",
                        "Pumpen",
                        "S0",
                        "A3"});
            table8.AddRow(new string[] {
                        "Vertikalverschiebung",
                        "Blow-up",
                        "S1",
                        "A3"});
            table8.AddRow(new string[] {
                        "Risse, Brüche",
                        "Risse",
                        "S2",
                        "A3"});
            table8.AddRow(new string[] {
                        "Risse, Brüche",
                        "Zerstörte Platten",
                        "S3",
                        "A3"});
            table8.AddRow(new string[] {
                        "Flicke",
                        "Flicke",
                        "S0",
                        "A1"});
#line 199
testRunner.And("ich folgende Schäden erfasse:", ((string)(null)), table8, "Und ");
#line 214
testRunner.And("ich die Schäden speichere", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line 215
testRunner.And("ich das Formular schliesse", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line 216
testRunner.Then("sehe ich für den Zustandsabschnitt mit der Id \'2\' den Zustandsindex \'4.4\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Manager kann Zustandsabschnitte über die Übersichtstabelle löschen", new string[] {
                "Manuell"}, SourceLine=220)]
        public virtual void DerData_ManagerKannZustandsabschnitteUberDieUbersichtstabelleLoschen()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Data-Manager kann Zustandsabschnitte über die Übersichtstabelle löschen", new string[] {
                        "Manuell"});
#line 221
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 222
 testRunner.When("ich den Zustandsabschnitt Id 7 lösche", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id"});
            table9.AddRow(new string[] {
                        "5"});
            table9.AddRow(new string[] {
                        "6"});
            table9.AddRow(new string[] {
                        "8"});
            table9.AddRow(new string[] {
                        "9"});
            table9.AddRow(new string[] {
                        "10"});
            table9.AddRow(new string[] {
                        "11"});
            table9.AddRow(new string[] {
                        "12"});
#line 223
 testRunner.Then("sind folgende Zustandsabschnitte im System:", ((string)(null)), table9, "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Manager kann Zustandsabschnitte über die Karte löschen", new string[] {
                "Manuell"}, SourceLine=236)]
        public virtual void DerData_ManagerKannZustandsabschnitteUberDieKarteLoschen()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Data-Manager kann Zustandsabschnitte über die Karte löschen", new string[] {
                        "Manuell"});
#line 237
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "ID",
                        "Strassenname",
                        "BezeichnungVonStrasse",
                        "BezeichnungBisStrasse",
                        "BezeichnungVon",
                        "BezeichnungBis",
                        "Länge",
                        "Aufnahmedatum",
                        "Aufnahmeteam",
                        "Wetter",
                        "ZustandsIndexFahrbahn",
                        "ZustandsindexTrottoirLinks",
                        "ZustandsindexTrottoirRechts",
                        "MassnahmenvorschlagFahrbahn",
                        "DringlichkeitMassnahmenvorschlagFahrbahn",
                        "TrottoirLinksErneuerung",
                        "DringlichkeitTrottoirLinksErneuerung",
                        "TrottoirRechtsErneuerung",
                        "DringlichkeitTrottoirRechtsErneuerung"});
            table10.AddRow(new string[] {
                        "1",
                        "Kantonsstrasse",
                        "Abschnitt A Anfang",
                        "Abschnitt A Ende",
                        "0.2",
                        "1.2",
                        "1000",
                        "12.14.2009",
                        "Drei",
                        "Nass",
                        "2,3",
                        "",
                        "",
                        "Instandsetzung",
                        "dringlich",
                        "",
                        "",
                        "",
                        ""});
            table10.AddRow(new string[] {
                        "2",
                        "Kantonsstrasse",
                        "Abschnitt A Anfang",
                        "Abschnitt A Ende",
                        "1.2",
                        "2.0",
                        "800",
                        "12.14.2009",
                        "Drei",
                        "Nass",
                        "2,3",
                        "",
                        "",
                        "Instandsetzung",
                        "dringlich",
                        "",
                        "",
                        "",
                        ""});
            table10.AddRow(new string[] {
                        "3",
                        "Kantonsstrasse",
                        "Abschnitt B Anfang",
                        "Abschnitt B Ende",
                        "2.0",
                        "7.0",
                        "5000",
                        "23.03.2009",
                        "A",
                        "Trocken",
                        "1,2",
                        "Gut",
                        "",
                        "Instandsetzung",
                        "mittelfristig",
                        "",
                        "",
                        "",
                        ""});
            table10.AddRow(new string[] {
                        "4",
                        "Landstrasse",
                        "Abschnitt A Anfang",
                        "Abschnitt A Ende",
                        "0.0",
                        "2.1",
                        "2100",
                        "21.05.2009",
                        "B",
                        "Trocken",
                        "1,1",
                        "",
                        "Kritisch",
                        "Ersatz",
                        "langfristig",
                        "",
                        "",
                        "ja",
                        "dringend"});
            table10.AddRow(new string[] {
                        "5",
                        "Landstrasse",
                        "Abschnitt A Anfang",
                        "Abschnitt A Ende",
                        "2.1",
                        "2.4",
                        "300",
                        "21.05.2009",
                        "B",
                        "Trocken",
                        "1,1",
                        "",
                        "Kritisch",
                        "Ersatz",
                        "langfristig",
                        "",
                        "",
                        "ja",
                        "dringend"});
#line 238
testRunner.Given("für Mandant \'Mandant_1\' existieren folgende Netzinformationen:", ((string)(null)), table10, "Gegeben sei ");
#line 245
testRunner.When("ich den Graphen mit der ID \'3\' auf der Karte auswähle", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line 246
testRunner.And("ich Zustandsinformation für ID \'3\' lösche", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "ID",
                        "Strassenname",
                        "BezeichnungVonStrasse",
                        "BezeichnungBisStrasse",
                        "BezeichnungVon",
                        "BezeichnungBis",
                        "Länge",
                        "Aufnahmedatum",
                        "Aufnahmeteam",
                        "Wetter",
                        "ZustandsIndexFahrbahn",
                        "ZustandsindexTrottoirLinks",
                        "ZustandsindexTrottoirRechts",
                        "MassnahmenvorschlagFahrbahn",
                        "DringlichkeitMassnahmenvorschlagFahrbahn",
                        "TrottoirLinksErneuerung",
                        "DringlichkeitTrottoirLinksErneuerung",
                        "TrottoirRechtsErneuerung",
                        "DringlichkeitTrottoirRechtsErneuerung"});
            table11.AddRow(new string[] {
                        "1",
                        "Kantonsstrasse",
                        "Abschnitt A Anfang",
                        "Abschnitt A Ende",
                        "0.2",
                        "1.2",
                        "1000",
                        "12.14.2009",
                        "Drei",
                        "Nass",
                        "2,3",
                        "",
                        "",
                        "Instandsetzung",
                        "dringlich",
                        "",
                        "",
                        "",
                        ""});
            table11.AddRow(new string[] {
                        "2",
                        "Kantonsstrasse",
                        "Abschnitt A Anfang",
                        "Abschnitt A Ende",
                        "1.2",
                        "2.0",
                        "800",
                        "12.14.2009",
                        "Drei",
                        "Nass",
                        "2,3",
                        "",
                        "",
                        "Instandsetzung",
                        "dringlich",
                        "",
                        "",
                        "",
                        ""});
            table11.AddRow(new string[] {
                        "4",
                        "Landstrasse",
                        "Abschnitt A Anfang",
                        "Abschnitt A Ende",
                        "0.0",
                        "2.1",
                        "2100",
                        "21.05.2009",
                        "B",
                        "Trocken",
                        "1,1",
                        "",
                        "Kritisch",
                        "Ersatz",
                        "langfristig",
                        "",
                        "",
                        "ja",
                        "dringend"});
            table11.AddRow(new string[] {
                        "5",
                        "Landstrasse",
                        "Abschnitt A Anfang",
                        "Abschnitt A Ende",
                        "2.1",
                        "2.4",
                        "300",
                        "21.05.2009",
                        "B",
                        "Trocken",
                        "1,1",
                        "",
                        "Kritisch",
                        "Ersatz",
                        "langfristig",
                        "",
                        "",
                        "ja",
                        "dringend"});
#line 247
testRunner.Then("sind folgende Zustandsinformationen im System:", ((string)(null)), table11, "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Das System berechnet die Fläche Fahrbahn (m²) nachdem der Data-Manager den Zustan" +
            "dsabschnitt gespeichert hat", new string[] {
                "Manuell"}, SourceLine=256)]
        public virtual void DasSystemBerechnetDieFlacheFahrbahnMNachdemDerData_ManagerDenZustandsabschnittGespeichertHat()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Das System berechnet die Fläche Fahrbahn (m²) nachdem der Data-Manager den Zustan" +
                    "dsabschnitt gespeichert hat", new string[] {
                        "Manuell"});
#line 257
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Das System berechnet die Fläche Trottoir links (m²) nachdem der Data-Manager den " +
            "Zustandsabschnitt gespeichert hat", new string[] {
                "Manuell"}, SourceLine=261)]
        public virtual void DasSystemBerechnetDieFlacheTrottoirLinksMNachdemDerData_ManagerDenZustandsabschnittGespeichertHat()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Das System berechnet die Fläche Trottoir links (m²) nachdem der Data-Manager den " +
                    "Zustandsabschnitt gespeichert hat", new string[] {
                        "Manuell"});
#line 262
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Das System berechnet die Fläche Trottoir rechts (m²) nachdem der Data-Manager den" +
            " Zustandsabschnitt gespeichert hat", new string[] {
                "Manuell"}, SourceLine=266)]
        public virtual void DasSystemBerechnetDieFlacheTrottoirRechtsMNachdemDerData_ManagerDenZustandsabschnittGespeichertHat()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Das System berechnet die Fläche Trottoir rechts (m²) nachdem der Data-Manager den" +
                    " Zustandsabschnitt gespeichert hat", new string[] {
                        "Manuell"});
#line 267
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Manager kann zu jedem Zustandsabschnitt einen Massnahmenvorschlag erfass" +
            "en", new string[] {
                "Manuell"}, SourceLine=271)]
        public virtual void DerData_ManagerKannZuJedemZustandsabschnittEinenMassnahmenvorschlagErfassen()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Data-Manager kann zu jedem Zustandsabschnitt einen Massnahmenvorschlag erfass" +
                    "en", new string[] {
                        "Manuell"});
#line 272
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void DasSystemBerechnetDieKostenFurDenGewahltenMassnahmenvorschlag(string id, string massnahme, string kosten, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Manuell"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Das System berechnet die Kosten für den gewählten Massnahmenvorschlag", @__tags);
#line 277
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Massnahme",
                        "Kosten"});
            table12.AddRow(new string[] {
                        "Oberflächenverbesserung",
                        "50"});
            table12.AddRow(new string[] {
                        "Deckbelagserneuerung",
                        "100"});
            table12.AddRow(new string[] {
                        "Belagserneuerung mit teilweiser Verstärkung",
                        "200"});
            table12.AddRow(new string[] {
                        "Erneuerung Oberbau",
                        "300"});
            table12.AddRow(new string[] {
                        "Trottoir",
                        "50"});
#line 278
 testRunner.When("folgende Kosten pro m² für \'Mandant_1\' gelten:", ((string)(null)), table12, "Wenn ");
#line 285
 testRunner.And(string.Format("ich für den Zustandsabschnitt mit der Id \'{0}\' die Massnahme \'{1}\' vorschlage", id, massnahme), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line 286
 testRunner.And("ich die Schäden speichere", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line 287
 testRunner.Then(string.Format("werden folgende \'{0}\' für den Massnahmenvorschlag angezeigt", kosten), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Das System berechnet die Kosten für den gewählten Massnahmenvorschlag, 1", new string[] {
                "Manuell"}, SourceLine=290)]
        public virtual void DasSystemBerechnetDieKostenFurDenGewahltenMassnahmenvorschlag_1()
        {
            this.DasSystemBerechnetDieKostenFurDenGewahltenMassnahmenvorschlag("1", "Oberflächenverbesserung", "CHF 225000", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Das System berechnet die Kosten für den gewählten Massnahmenvorschlag, 2", new string[] {
                "Manuell"}, SourceLine=290)]
        public virtual void DasSystemBerechnetDieKostenFurDenGewahltenMassnahmenvorschlag_2()
        {
            this.DasSystemBerechnetDieKostenFurDenGewahltenMassnahmenvorschlag("2", "Deckbelagserneuerung", "CHF 360000", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Das System berechnet die Kosten für den gewählten Massnahmenvorschlag, 3", new string[] {
                "Manuell"}, SourceLine=290)]
        public virtual void DasSystemBerechnetDieKostenFurDenGewahltenMassnahmenvorschlag_3()
        {
            this.DasSystemBerechnetDieKostenFurDenGewahltenMassnahmenvorschlag("3", "Belagserneuerung mit teilweiser Verstärkung", "CHF 5500000", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Das System berechnet die Kosten für den gewählten Massnahmenvorschlag, 4", new string[] {
                "Manuell"}, SourceLine=290)]
        public virtual void DasSystemBerechnetDieKostenFurDenGewahltenMassnahmenvorschlag_4()
        {
            this.DasSystemBerechnetDieKostenFurDenGewahltenMassnahmenvorschlag("4", "Erneuerung Oberbau", "CHF 3622500", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Das System berechnet die Kosten für den gewählten Massnahmenvorschlag, 7", new string[] {
                "Manuell"}, SourceLine=290)]
        public virtual void DasSystemBerechnetDieKostenFurDenGewahltenMassnahmenvorschlag_7()
        {
            this.DasSystemBerechnetDieKostenFurDenGewahltenMassnahmenvorschlag("7", "Erneuerung Trottoir links", "CHF 162500", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Das System berechnet die Kosten für den gewählten Massnahmenvorschlag, 6", new string[] {
                "Manuell"}, SourceLine=290)]
        public virtual void DasSystemBerechnetDieKostenFurDenGewahltenMassnahmenvorschlag_6()
        {
            this.DasSystemBerechnetDieKostenFurDenGewahltenMassnahmenvorschlag("6", "Erneuerung Trottoir rechts", "CHF 15000", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Archivierte Daten können nicht verändert werden", new string[] {
                "Manuell"}, SourceLine=300)]
        public virtual void ArchivierteDatenKonnenNichtVerandertWerden()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Archivierte Daten können nicht verändert werden", new string[] {
                        "Manuell"});
#line 301
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Werden Zustandsabschnitte gelöscht, hat das keine Auswirkungen auf historische Da" +
            "ten", new string[] {
                "Manuell"}, SourceLine=305)]
        public virtual void WerdenZustandsabschnitteGeloschtHatDasKeineAuswirkungenAufHistorischeDaten()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Werden Zustandsabschnitte gelöscht, hat das keine Auswirkungen auf historische Da" +
                    "ten", new string[] {
                        "Manuell"});
#line 306
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Das System führt alle Berechnungen on the fly durch", new string[] {
                "Manuell"}, SourceLine=310)]
        public virtual void DasSystemFuhrtAlleBerechnungenOnTheFlyDurch()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Das System führt alle Berechnungen on the fly durch", new string[] {
                        "Manuell"});
#line 311
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Z3.1 - Mit EMSG-Mobile Schäden und Massnahmenvorschläge für Strassenabschnitte be" +
        "arbeiten")]
    public partial class Z3_1_MitEMSG_MobileSchadenUndMassnahmenvorschlageFurStrassenabschnitteBearbeitenFeature_NUnit
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Z3.1.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("de-AT"), "Z3.1 - Mit EMSG-Mobile Schäden und Massnahmenvorschläge für Strassenabschnitte be" +
                    "arbeiten", "\tAls Data-Manager,\r\n\twill ich mit EMSG-Mobile Schäden und Massnahmenvorschläge fü" +
                    "r Strassenabschnitte erfassen\r\n\tdamit ich meine Inspektionsergebnisse im Feld oh" +
                    "ne die Notwendigkeit einer Internet-Verbindung erfassen kann", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mandant",
                        "Modus"});
            table1.AddRow(new string[] {
                        "Mandant_1",
                        "gis"});
#line 7
testRunner.Given("folgende Einstellungen existieren:", ((string)(null)), table1, "Gegeben sei ");
#line 11
 testRunner.And("ich bin Data-Manager von \'Mandant_1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Strassenname",
                        "BezeichnungVon",
                        "BezeichnungBis",
                        "Belagsart",
                        "BreiteFahrbahn",
                        "Trottoir",
                        "BreiteTrottoirLinks",
                        "BreiteTrottoirRechtss"});
            table2.AddRow(new string[] {
                        "1",
                        "Kantonsstrasse",
                        "Abschnitt A Anfang",
                        "Abschnitt A Ende",
                        "Asphalt",
                        "4,5",
                        "beide Seiten",
                        "2,5",
                        "3"});
            table2.AddRow(new string[] {
                        "2",
                        "Kantonsstrasse",
                        "Abschnitt B Anfang",
                        "Abschnitt B Ende",
                        "Asphalt",
                        "5,5",
                        "beide Seiten",
                        "2,5",
                        "3"});
            table2.AddRow(new string[] {
                        "3",
                        "Landstrasse",
                        "Abschnitt A Anfang",
                        "Abschnitt A Ende",
                        "Beton",
                        "5,75",
                        "beide Seiten",
                        "2,5",
                        "3"});
            table2.AddRow(new string[] {
                        "4",
                        "Hauptstrasse",
                        "Abschnitt A Anfang",
                        "Abschnitt A Ende",
                        "Beton",
                        "7",
                        "beide Seiten",
                        "2,5",
                        "3"});
            table2.AddRow(new string[] {
                        "5",
                        "Hauptstrasse",
                        "Abschnitt B Anfang",
                        "Abschnitt B Ende",
                        "Asphalt",
                        "7",
                        "beide Seiten",
                        "2,5",
                        "3"});
            table2.AddRow(new string[] {
                        "6",
                        "Hauptstrasse",
                        "Abschnitt C Anfang",
                        "Abschnitt C Ende",
                        "Asphalt",
                        "14",
                        "beide Seiten",
                        "2,5",
                        "3"});
#line 12
 testRunner.And("folgende Netzinformationen existieren:", ((string)(null)), table2, "Und ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Der Data-Manager kann einen Zustandsabschnitt auf der Karte digitalisieren")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void DerData_ManagerKannEinenZustandsabschnittAufDerKarteDigitalisieren()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Data-Manager kann einen Zustandsabschnitt auf der Karte digitalisieren", new string[] {
                        "Manuell"});
#line 22
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Der Data-Manager kann Anfangs- und Endpunkt eines Zustandsabschnitts auf der Kart" +
            "e festlegen")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void DerData_ManagerKannAnfangs_UndEndpunktEinesZustandsabschnittsAufDerKarteFestlegen()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Data-Manager kann Anfangs- und Endpunkt eines Zustandsabschnitts auf der Kart" +
                    "e festlegen", new string[] {
                        "Manuell"});
#line 27
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 28
testRunner.Given("ich öffne die Seite \'Netzverwaltung\\Zustände und Massnahmenvorschläge\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Gegeben sei ");
#line 29
 testRunner.And("ich wähle einen beliebigen Zustandsabschnitt aus", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line 30
 testRunner.And("ich aktiviere das Tool \'Zustandsabschnitts Geometrie bearbeiten\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line 31
 testRunner.When("ich einen Anfangs oder Endpunkt  entlang des darunterliegendem Strassenabschnitt " +
                    "bewege", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line 32
 testRunner.Then("wird der Zustandsabschnitt entsprechend verlängert oder verkürzt", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Zustandsabschnitte dürfen sich nicht überlappen")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void ZustandsabschnitteDurfenSichNichtUberlappen()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Zustandsabschnitte dürfen sich nicht überlappen", new string[] {
                        "Manuell"});
#line 37
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 38
testRunner.When("ich versuche eine den Endpunkt eines Zustandabschnittes über die räumliche Defini" +
                    "tion eines für den selben Strassenabschnitt vorliegenden Zustandabschnittes  auf" +
                    " der Karte zu ziehen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line 39
testRunner.Then("stoppt der Punkt am Ende, bzw. Anfang des Zustandabschnittes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Der Zustandsabschnitt muss immer einem Strassenabschnitt zugeordnet sein")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void DerZustandsabschnittMussImmerEinemStrassenabschnittZugeordnetSein()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Zustandsabschnitt muss immer einem Strassenabschnitt zugeordnet sein", new string[] {
                        "Manuell"});
#line 44
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 45
testRunner.When("ich versuche einen End- oder Anfangspunkt über das Segment des darunterliegenden " +
                    "Strassenabschnittes hinauszuziehen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line 46
testRunner.Then("stoppt der Punkt am Ende des Segments des Strassenabschnitts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Der Zustandsabschnitt erbt ‚Strassenname‘, ‚Belagsart‘, ‚Breite Fahrbahn‘, ‚Trott" +
            "oir‘, ‚Breite Trottoir links‘ und ‚Breite Trottoir rechts‘ vom Strassenabschnitt" +
            "")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void DerZustandsabschnittErbtStrassennameBelagsartBreiteFahrbahnTrottoirBreiteTrottoirLinksUndBreiteTrottoirRechtsVomStrassenabschnitt()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Zustandsabschnitt erbt ‚Strassenname‘, ‚Belagsart‘, ‚Breite Fahrbahn‘, ‚Trott" +
                    "oir‘, ‚Breite Trottoir links‘ und ‚Breite Trottoir rechts‘ vom Strassenabschnitt" +
                    "", new string[] {
                        "Manuell"});
#line 51
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Angaben zum Trottoir wie Zustandsindex, Erneuerung usw. können nur erfasst werden" +
            ", sofern der Strassenabschnitt auch einen entsprechenden Trottoir(typ) aufweist")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void AngabenZumTrottoirWieZustandsindexErneuerungUsw_KonnenNurErfasstWerdenSofernDerStrassenabschnittAuchEinenEntsprechendenTrottoirTypAufweist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Angaben zum Trottoir wie Zustandsindex, Erneuerung usw. können nur erfasst werden" +
                    ", sofern der Strassenabschnitt auch einen entsprechenden Trottoir(typ) aufweist", new string[] {
                        "Manuell"});
#line 56
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Das System stellt sicher, dass die Summe der Längen der Zustandsabschnitte nicht " +
            "grösser ist, als die Länge des Strassenabschnitts")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void DasSystemStelltSicherDassDieSummeDerLangenDerZustandsabschnitteNichtGrosserIstAlsDieLangeDesStrassenabschnitts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Das System stellt sicher, dass die Summe der Längen der Zustandsabschnitte nicht " +
                    "grösser ist, als die Länge des Strassenabschnitts", new string[] {
                        "Manuell"});
#line 61
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Der Data-Manager kann Attribute von Zustandsabschnitten erfassen")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        [NUnit.Framework.TestCaseAttribute("1", "Kantonsstrasse", "Abschnitt A Anfang", "Abschnitt A Ende", "0.2", "1.2", "1000", "12.14.2009", "Drei", "Nass", "2,3", "", "", "Instandsetzung", "dringlich", "", "", "", "", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2", "Kantonsstrasse", "Abschnitt A Anfang", "Abschnitt A Ende", "1.2", "2.0", "800", "12.14.2009", "Drei", "Nass", "2,3", "", "", "Instandsetzung", "dringlich", "", "", "", "", new string[0])]
        [NUnit.Framework.TestCaseAttribute("3", "Kantonsstrasse", "Abschnitt B Anfang", "Abschnitt B Ende", "2.0", "7.0", "5000", "23.03.2009", "A", "Trocken", "1,2", "Gut", "", "Instandsetzung", "mittelfristig", "", "", "", "", new string[0])]
        [NUnit.Framework.TestCaseAttribute("4", "Landstrasse", "Abschnitt A Anfang", "Abschnitt A Ende", "0.0", "2.1", "2100", "21.05.2009", "B", "Trocken", "1,1", "", "Kritisch", "Ersatz", "langfristig", "", "", "ja", "dringend", new string[0])]
        [NUnit.Framework.TestCaseAttribute("5", "Landstrasse", "Abschnitt A Anfang", "Abschnitt A Ende", "2.1", "2.4", "300", "21.05.2009", "B", "Trocken", "1,1", "", "Kritisch", "Ersatz", "langfristig", "", "", "ja", "dringend", new string[0])]
        [NUnit.Framework.TestCaseAttribute("6", "Landstrasse", "Abschnitt A Anfang", "Abschnitt A Ende", "2.4", "2.5", "100", "21.05.2009", "B", "Trocken", "2,1", "", "Ausreichend", "Ersatz", "langfristig", "", "", "ja", "mittelfristig", new string[0])]
        [NUnit.Framework.TestCaseAttribute("7", "Hauptstrasse", "Abschnitt A Anfang", "Abschnitt A Ende", "1.2", "2.5", "1300", "21.10.2009", "Meyer", "Trocken", "3,4", "Mittel", "Gut", "", "", "ja", "langfristig", "", "", new string[0])]
        [NUnit.Framework.TestCaseAttribute("8", "Hauptstrasse", "Abschnitt B Anfang", "Abschnitt B Ende", "0.4", "0.8", "400", "13.09.2009", "A", "Trocken", "2,3", "", "", "", "", "", "", "", "", new string[0])]
        [NUnit.Framework.TestCaseAttribute("9", "Hauptstrasse", "Abschnitt B Anfang", "Abschnitt B Ende", "0.8", "1.2", "400", "13.09.2009", "A", "Trocken", "2,3", "", "", "", "", "", "", "", "", new string[0])]
        [NUnit.Framework.TestCaseAttribute("10", "Hauptstrasse", "Abschnitt C Anfang", "Abschnitt C Ende", "0.0", "0.1", "100", "24.07.2009", "B", "Trocken", "3,3", "", "", "", "", "", "", "", "", new string[0])]
        [NUnit.Framework.TestCaseAttribute("11", "Hauptstrasse", "Abschnitt C Anfang", "Abschnitt C Ende", "0.1", "0.2", "100", "24.07.2009", "B", "Trocken", "4,3", "", "", "", "", "", "", "", "", new string[0])]
        [NUnit.Framework.TestCaseAttribute("12", "Hauptstrasse", "Abschnitt C Anfang", "Abschnitt C Ende", "0.2", "0.4", "200", "24.07.2009", "B", "Trocken", "4,8", "", "", "", "", "", "", "", "", new string[0])]
        public virtual void DerData_ManagerKannAttributeVonZustandsabschnittenErfassen(
                    string tF, 
                    string strassenname, 
                    string bezeichnungVonStrasse, 
                    string bezeichnungBisStrasse, 
                    string bezeichnungVon, 
                    string bezeichnungBis, 
                    string lange, 
                    string aufnahmedatum, 
                    string aufnahmeteam, 
                    string wetter, 
                    string zustandsIndexFahrbahn, 
                    string zustandsindexTrottoirLinks, 
                    string zustandsindexTrottoirRechts, 
                    string massnahmenvorschlagFahrbahn, 
                    string dringlichkeitMassnahmenvorschlagFahrbahn, 
                    string trottoirLinksErneuerung, 
                    string dringlichkeitTrottoirLinksErneuerung, 
                    string trottoirRechtsErneuerung, 
                    string dringlichkeitTrottoirRechtsErneuerung, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Manuell"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Data-Manager kann Attribute von Zustandsabschnitten erfassen", @__tags);
#line 66
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Strassenname",
                        "BezeichnungVonStrasse",
                        "BezeichnungBisStrasse",
                        "BezeichnungVon",
                        "BezeichnungBis",
                        "Länge",
                        "Aufnahmedatum",
                        "Aufnahmeteam",
                        "Wetter",
                        "ZustandsIndexFahrbahn",
                        "ZustandsindexTrottoirLinks",
                        "ZustandsindexTrottoirRechts",
                        "MassnahmenvorschlagFahrbahn",
                        "DringlichkeitMassnahmenvorschlagFahrbahn",
                        "TrottoirLinksErneuerung",
                        "DringlichkeitTrottoirLinksErneuerung",
                        "TrottoirRechtsErneuerung",
                        "DringlichkeitTrottoirRechtsErneuerung"});
            table3.AddRow(new string[] {
                        string.Format("{0}", strassenname),
                        string.Format("{0}", bezeichnungVonStrasse),
                        string.Format("{0}", bezeichnungBisStrasse),
                        string.Format("{0}", bezeichnungVon),
                        string.Format("{0}", bezeichnungBis),
                        string.Format("{0}", lange),
                        string.Format("{0}", aufnahmedatum),
                        string.Format("{0}", aufnahmeteam),
                        string.Format("{0}", wetter),
                        string.Format("{0}", zustandsIndexFahrbahn),
                        string.Format("{0}", zustandsindexTrottoirLinks),
                        string.Format("{0}", zustandsindexTrottoirRechts),
                        string.Format("{0}", massnahmenvorschlagFahrbahn),
                        string.Format("{0}", dringlichkeitMassnahmenvorschlagFahrbahn),
                        string.Format("{0}", trottoirLinksErneuerung),
                        string.Format("{0}", dringlichkeitTrottoirLinksErneuerung),
                        string.Format("{0}", trottoirRechtsErneuerung),
                        string.Format("{0}", dringlichkeitTrottoirRechtsErneuerung)});
#line 67
testRunner.When("ich folgende GIS-Netzinformationen eingebe:", ((string)(null)), table3, "Wenn ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Strassenname",
                        "BezeichnungVonStrasse",
                        "BezeichnungBisStrasse",
                        "BezeichnungVon",
                        "BezeichnungBis",
                        "Länge",
                        "Aufnahmedatum",
                        "Aufnahmeteam",
                        "Wetter",
                        "ZustandsIndexFahrbahn",
                        "ZustandsindexTrottoirLinks",
                        "ZustandsindexTrottoirRechts",
                        "MassnahmenvorschlagFahrbahn",
                        "DringlichkeitMassnahmenvorschlagFahrbahn",
                        "TrottoirLinksErneuerung",
                        "DringlichkeitTrottoirLinksErneuerung",
                        "TrottoirRechtsErneuerung",
                        "DringlichkeitTrottoirRechtsErneuerung"});
            table4.AddRow(new string[] {
                        string.Format("{0}", strassenname),
                        string.Format("{0}", bezeichnungVonStrasse),
                        string.Format("{0}", bezeichnungBisStrasse),
                        string.Format("{0}", bezeichnungVon),
                        string.Format("{0}", bezeichnungBis),
                        string.Format("{0}", lange),
                        string.Format("{0}", aufnahmedatum),
                        string.Format("{0}", aufnahmeteam),
                        string.Format("{0}", wetter),
                        string.Format("{0}", zustandsIndexFahrbahn),
                        string.Format("{0}", zustandsindexTrottoirLinks),
                        string.Format("{0}", zustandsindexTrottoirRechts),
                        string.Format("{0}", massnahmenvorschlagFahrbahn),
                        string.Format("{0}", dringlichkeitMassnahmenvorschlagFahrbahn),
                        string.Format("{0}", trottoirLinksErneuerung),
                        string.Format("{0}", dringlichkeitTrottoirLinksErneuerung),
                        string.Format("{0}", trottoirRechtsErneuerung),
                        string.Format("{0}", dringlichkeitTrottoirRechtsErneuerung)});
#line 71
 testRunner.Then("sind folgende GIS-Netzinformationen im System:", ((string)(null)), table4, "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Der Data-Manager kann das Zustandserfassungsformular (Erfassungsformular für Ober" +
            "flächenschäden) ausfüllen")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void DerData_ManagerKannDasZustandserfassungsformularErfassungsformularFurOberflachenschadenAusfullen()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Data-Manager kann das Zustandserfassungsformular (Erfassungsformular für Ober" +
                    "flächenschäden) ausfüllen", new string[] {
                        "Manuell"});
#line 93
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Das System stellt bei grober und detaillierter Erfassung das Formular entsprechen" +
            "d der Belagsart des Strassenabschnitts dar")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void DasSystemStelltBeiGroberUndDetaillierterErfassungDasFormularEntsprechendDerBelagsartDesStrassenabschnittsDar()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Das System stellt bei grober und detaillierter Erfassung das Formular entsprechen" +
                    "d der Belagsart des Strassenabschnitts dar", new string[] {
                        "Manuell"});
#line 98
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Erfassungsformular Oberflächenschäden Betonbelag (Beton) - detailliert")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void ErfassungsformularOberflachenschadenBetonbelagBeton_Detailliert()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Erfassungsformular Oberflächenschäden Betonbelag (Beton) - detailliert", new string[] {
                        "Manuell"});
#line 103
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 104
testRunner.When("ich das Erfassungsformular für Oberflächenschäden für den Zustandsabschnitt mit d" +
                    "er Id \'2\' öffne", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Kategorie",
                        "Schaden"});
            table5.AddRow(new string[] {
                        "Oberflächenglätte",
                        "Polieren"});
            table5.AddRow(new string[] {
                        "Materialverluste",
                        "Abrieb"});
            table5.AddRow(new string[] {
                        "Materialverluste",
                        "Abblätterung"});
            table5.AddRow(new string[] {
                        "Materialverluste",
                        "Abplatzungen"});
            table5.AddRow(new string[] {
                        "Fugen- und Kantenschäden",
                        "Kantenschäden, Absplitterung"});
            table5.AddRow(new string[] {
                        "Fugen- und Kantenschäden",
                        "Fehlender oder spröder Fugenverguss"});
            table5.AddRow(new string[] {
                        "Vertikalverschiebung",
                        "Setzungen, Frosthebungen"});
            table5.AddRow(new string[] {
                        "Vertikalverschiebung",
                        "Stufenbildung"});
            table5.AddRow(new string[] {
                        "Vertikalverschiebung",
                        "Pumpen"});
            table5.AddRow(new string[] {
                        "Vertikalverschiebung",
                        "Blow-up"});
            table5.AddRow(new string[] {
                        "Risse, Brüche",
                        "Risse"});
            table5.AddRow(new string[] {
                        "Risse, Brüche",
                        "Zerstörte Platten"});
            table5.AddRow(new string[] {
                        "Flicke",
                        "Flicke"});
#line 105
testRunner.Then("sehe ich das Schadenerfassungsformular mit folgenden Möglichkeiten:", ((string)(null)), table5, "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Erfassungsformular Oberflächenschäden bitumenhaltiger Belag (Asphalt) - detaillie" +
            "rt")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void ErfassungsformularOberflachenschadenBitumenhaltigerBelagAsphalt_Detailliert()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Erfassungsformular Oberflächenschäden bitumenhaltiger Belag (Asphalt) - detaillie" +
                    "rt", new string[] {
                        "Manuell"});
#line 124
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 125
testRunner.When("ich das Erfassungsformular für Oberflächenschäden für den Zustandsabschnitt mit d" +
                    "er Id \'1\' öffne", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Kategorie",
                        "Schaden"});
            table6.AddRow(new string[] {
                        "Oberflächenglätte",
                        "Polieren"});
            table6.AddRow(new string[] {
                        "Oberflächenglätte",
                        "Schwitzen"});
            table6.AddRow(new string[] {
                        "Belagschäden",
                        "Abrieb"});
            table6.AddRow(new string[] {
                        "Belagschäden",
                        "Ausmagerung, Absanden"});
            table6.AddRow(new string[] {
                        "Belagschäden",
                        "Kornausbrüche"});
            table6.AddRow(new string[] {
                        "Belagschäden",
                        "Ablösungen"});
            table6.AddRow(new string[] {
                        "Belagschäden",
                        "Schlaglöcher"});
            table6.AddRow(new string[] {
                        "Belagschäden",
                        "Offene Nähte"});
            table6.AddRow(new string[] {
                        "Belagschäden",
                        "Querrisse"});
            table6.AddRow(new string[] {
                        "Belagschäden",
                        "Wilde Risse"});
            table6.AddRow(new string[] {
                        "Belagsverformungen",
                        "Spurrinnen"});
            table6.AddRow(new string[] {
                        "Belagsverformungen",
                        "Aufwölbungen"});
            table6.AddRow(new string[] {
                        "Belagsverformungen",
                        "Wellblechverformungen"});
            table6.AddRow(new string[] {
                        "Belagsverformungen",
                        "Schubverformungen"});
            table6.AddRow(new string[] {
                        "Strukturelle Schäden",
                        "Anrisse von Setzungen"});
            table6.AddRow(new string[] {
                        "Strukturelle Schäden",
                        "Setzungen, Einsenkungen"});
            table6.AddRow(new string[] {
                        "Strukturelle Schäden",
                        "Abgedrückte Ränder"});
            table6.AddRow(new string[] {
                        "Strukturelle Schäden",
                        "Frosthebungen"});
            table6.AddRow(new string[] {
                        "Strukturelle Schäden",
                        "Längsrisse"});
            table6.AddRow(new string[] {
                        "Strukturelle Schäden",
                        "Netzrisse"});
            table6.AddRow(new string[] {
                        "Strukturelle Schäden",
                        "Belagsrandrisse"});
            table6.AddRow(new string[] {
                        "Flicke",
                        "Flicke"});
#line 126
testRunner.Then("sehe ich das Schadenerfassungsformular mit folgenden Möglichkeiten:", ((string)(null)), table6, "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Der Data-Manager kann die Schadenschwere erfassen")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void DerData_ManagerKannDieSchadenschwereErfassen()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Data-Manager kann die Schadenschwere erfassen", new string[] {
                        "Manuell"});
#line 154
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Der Data-Manager kann das Schadenausmass erfassen")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void DerData_ManagerKannDasSchadenausmassErfassen()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Data-Manager kann das Schadenausmass erfassen", new string[] {
                        "Manuell"});
#line 159
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Das System errechnet die Matrixwerte")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void DasSystemErrechnetDieMatrixwerte()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Das System errechnet die Matrixwerte", new string[] {
                        "Manuell"});
#line 164
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Das System berechnet die Schadenbewertung")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void DasSystemBerechnetDieSchadenbewertung()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Das System berechnet die Schadenbewertung", new string[] {
                        "Manuell"});
#line 169
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Das System berechnet die Schadensumme bei grober und detaillierter Erfassung")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void DasSystemBerechnetDieSchadensummeBeiGroberUndDetaillierterErfassung()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Das System berechnet die Schadensumme bei grober und detaillierter Erfassung", new string[] {
                        "Manuell"});
#line 174
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 175
testRunner.When("ich das Erfassungsformular für Oberflächenschäden für den Zustandsabschnitt mit d" +
                    "er Id \'2\' öffne", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Kategorie",
                        "Schaden",
                        "Schwere",
                        "Schadenausmass"});
            table7.AddRow(new string[] {
                        "Oberflächenglätte",
                        "Polieren",
                        "S0",
                        "A1"});
            table7.AddRow(new string[] {
                        "Materialverluste",
                        "Abrieb",
                        "S1",
                        "A1"});
            table7.AddRow(new string[] {
                        "Materialverluste",
                        "Abblätterung",
                        "S2",
                        "A1"});
            table7.AddRow(new string[] {
                        "Materialverluste",
                        "Abplatzungen",
                        "S3",
                        "A1"});
            table7.AddRow(new string[] {
                        "Fugen- und Kantenschäden",
                        "Kantenschäden, Absplitterung",
                        "S0",
                        "A2"});
            table7.AddRow(new string[] {
                        "Fugen- und Kantenschäden",
                        "Fehlender oder spröder Fugenverguss",
                        "S1",
                        "A2"});
            table7.AddRow(new string[] {
                        "Vertikalverschiebung",
                        "Setzungen, Frosthebungen",
                        "S2",
                        "A2"});
            table7.AddRow(new string[] {
                        "Vertikalverschiebung",
                        "Stufenbildung",
                        "S3",
                        "A2"});
            table7.AddRow(new string[] {
                        "Vertikalverschiebung",
                        "Pumpen",
                        "S0",
                        "A3"});
            table7.AddRow(new string[] {
                        "Vertikalverschiebung",
                        "Blow-up",
                        "S1",
                        "A3"});
            table7.AddRow(new string[] {
                        "Risse, Brüche",
                        "Risse",
                        "S2",
                        "A3"});
            table7.AddRow(new string[] {
                        "Risse, Brüche",
                        "Zerstörte Platten",
                        "S3",
                        "A3"});
            table7.AddRow(new string[] {
                        "Flicke",
                        "Flicke",
                        "S0",
                        "A1"});
#line 176
testRunner.And("ich folgende Schäden erfasse:", ((string)(null)), table7, "Und ");
#line 191
testRunner.And("ich die Schäden speichere", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line 192
testRunner.Then("sehe ich die Schadenssumme \'44\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Das System berechnet den Zustandsindex (I1) bei grober und detaillierter Erfassun" +
            "g")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void DasSystemBerechnetDenZustandsindexI1BeiGroberUndDetaillierterErfassung()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Das System berechnet den Zustandsindex (I1) bei grober und detaillierter Erfassun" +
                    "g", new string[] {
                        "Manuell"});
#line 197
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 198
testRunner.When("ich das Erfassungsformular für Oberflächenschäden für den Zustandsabschnitt mit d" +
                    "er Id \'2\' öffne", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Kategorie",
                        "Schaden",
                        "Schwere",
                        "Schadenausmass"});
            table8.AddRow(new string[] {
                        "Oberflächenglätte",
                        "Polieren",
                        "S0",
                        "A1"});
            table8.AddRow(new string[] {
                        "Materialverluste",
                        "Abrieb",
                        "S1",
                        "A1"});
            table8.AddRow(new string[] {
                        "Materialverluste",
                        "Abblätterung",
                        "S2",
                        "A1"});
            table8.AddRow(new string[] {
                        "Materialverluste",
                        "Abplatzungen",
                        "S3",
                        "A1"});
            table8.AddRow(new string[] {
                        "Fugen- und Kantenschäden",
                        "Kantenschäden, Absplitterung",
                        "S0",
                        "A2"});
            table8.AddRow(new string[] {
                        "Fugen- und Kantenschäden",
                        "Fehlender oder spröder Fugenverguss",
                        "S1",
                        "A2"});
            table8.AddRow(new string[] {
                        "Vertikalverschiebung",
                        "Setzungen, Frosthebungen",
                        "S2",
                        "A2"});
            table8.AddRow(new string[] {
                        "Vertikalverschiebung",
                        "Stufenbildung",
                        "S3",
                        "A2"});
            table8.AddRow(new string[] {
                        "Vertikalverschiebung",
                        "Pumpen",
                        "S0",
                        "A3"});
            table8.AddRow(new string[] {
                        "Vertikalverschiebung",
                        "Blow-up",
                        "S1",
                        "A3"});
            table8.AddRow(new string[] {
                        "Risse, Brüche",
                        "Risse",
                        "S2",
                        "A3"});
            table8.AddRow(new string[] {
                        "Risse, Brüche",
                        "Zerstörte Platten",
                        "S3",
                        "A3"});
            table8.AddRow(new string[] {
                        "Flicke",
                        "Flicke",
                        "S0",
                        "A1"});
#line 199
testRunner.And("ich folgende Schäden erfasse:", ((string)(null)), table8, "Und ");
#line 214
testRunner.And("ich die Schäden speichere", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line 215
testRunner.And("ich das Formular schliesse", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line 216
testRunner.Then("sehe ich für den Zustandsabschnitt mit der Id \'2\' den Zustandsindex \'4.4\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Der Data-Manager kann Zustandsabschnitte über die Übersichtstabelle löschen")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void DerData_ManagerKannZustandsabschnitteUberDieUbersichtstabelleLoschen()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Data-Manager kann Zustandsabschnitte über die Übersichtstabelle löschen", new string[] {
                        "Manuell"});
#line 221
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 222
 testRunner.When("ich den Zustandsabschnitt Id 7 lösche", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id"});
            table9.AddRow(new string[] {
                        "5"});
            table9.AddRow(new string[] {
                        "6"});
            table9.AddRow(new string[] {
                        "8"});
            table9.AddRow(new string[] {
                        "9"});
            table9.AddRow(new string[] {
                        "10"});
            table9.AddRow(new string[] {
                        "11"});
            table9.AddRow(new string[] {
                        "12"});
#line 223
 testRunner.Then("sind folgende Zustandsabschnitte im System:", ((string)(null)), table9, "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Der Data-Manager kann Zustandsabschnitte über die Karte löschen")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void DerData_ManagerKannZustandsabschnitteUberDieKarteLoschen()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Data-Manager kann Zustandsabschnitte über die Karte löschen", new string[] {
                        "Manuell"});
#line 237
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "ID",
                        "Strassenname",
                        "BezeichnungVonStrasse",
                        "BezeichnungBisStrasse",
                        "BezeichnungVon",
                        "BezeichnungBis",
                        "Länge",
                        "Aufnahmedatum",
                        "Aufnahmeteam",
                        "Wetter",
                        "ZustandsIndexFahrbahn",
                        "ZustandsindexTrottoirLinks",
                        "ZustandsindexTrottoirRechts",
                        "MassnahmenvorschlagFahrbahn",
                        "DringlichkeitMassnahmenvorschlagFahrbahn",
                        "TrottoirLinksErneuerung",
                        "DringlichkeitTrottoirLinksErneuerung",
                        "TrottoirRechtsErneuerung",
                        "DringlichkeitTrottoirRechtsErneuerung"});
            table10.AddRow(new string[] {
                        "1",
                        "Kantonsstrasse",
                        "Abschnitt A Anfang",
                        "Abschnitt A Ende",
                        "0.2",
                        "1.2",
                        "1000",
                        "12.14.2009",
                        "Drei",
                        "Nass",
                        "2,3",
                        "",
                        "",
                        "Instandsetzung",
                        "dringlich",
                        "",
                        "",
                        "",
                        ""});
            table10.AddRow(new string[] {
                        "2",
                        "Kantonsstrasse",
                        "Abschnitt A Anfang",
                        "Abschnitt A Ende",
                        "1.2",
                        "2.0",
                        "800",
                        "12.14.2009",
                        "Drei",
                        "Nass",
                        "2,3",
                        "",
                        "",
                        "Instandsetzung",
                        "dringlich",
                        "",
                        "",
                        "",
                        ""});
            table10.AddRow(new string[] {
                        "3",
                        "Kantonsstrasse",
                        "Abschnitt B Anfang",
                        "Abschnitt B Ende",
                        "2.0",
                        "7.0",
                        "5000",
                        "23.03.2009",
                        "A",
                        "Trocken",
                        "1,2",
                        "Gut",
                        "",
                        "Instandsetzung",
                        "mittelfristig",
                        "",
                        "",
                        "",
                        ""});
            table10.AddRow(new string[] {
                        "4",
                        "Landstrasse",
                        "Abschnitt A Anfang",
                        "Abschnitt A Ende",
                        "0.0",
                        "2.1",
                        "2100",
                        "21.05.2009",
                        "B",
                        "Trocken",
                        "1,1",
                        "",
                        "Kritisch",
                        "Ersatz",
                        "langfristig",
                        "",
                        "",
                        "ja",
                        "dringend"});
            table10.AddRow(new string[] {
                        "5",
                        "Landstrasse",
                        "Abschnitt A Anfang",
                        "Abschnitt A Ende",
                        "2.1",
                        "2.4",
                        "300",
                        "21.05.2009",
                        "B",
                        "Trocken",
                        "1,1",
                        "",
                        "Kritisch",
                        "Ersatz",
                        "langfristig",
                        "",
                        "",
                        "ja",
                        "dringend"});
#line 238
testRunner.Given("für Mandant \'Mandant_1\' existieren folgende Netzinformationen:", ((string)(null)), table10, "Gegeben sei ");
#line 245
testRunner.When("ich den Graphen mit der ID \'3\' auf der Karte auswähle", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line 246
testRunner.And("ich Zustandsinformation für ID \'3\' lösche", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "ID",
                        "Strassenname",
                        "BezeichnungVonStrasse",
                        "BezeichnungBisStrasse",
                        "BezeichnungVon",
                        "BezeichnungBis",
                        "Länge",
                        "Aufnahmedatum",
                        "Aufnahmeteam",
                        "Wetter",
                        "ZustandsIndexFahrbahn",
                        "ZustandsindexTrottoirLinks",
                        "ZustandsindexTrottoirRechts",
                        "MassnahmenvorschlagFahrbahn",
                        "DringlichkeitMassnahmenvorschlagFahrbahn",
                        "TrottoirLinksErneuerung",
                        "DringlichkeitTrottoirLinksErneuerung",
                        "TrottoirRechtsErneuerung",
                        "DringlichkeitTrottoirRechtsErneuerung"});
            table11.AddRow(new string[] {
                        "1",
                        "Kantonsstrasse",
                        "Abschnitt A Anfang",
                        "Abschnitt A Ende",
                        "0.2",
                        "1.2",
                        "1000",
                        "12.14.2009",
                        "Drei",
                        "Nass",
                        "2,3",
                        "",
                        "",
                        "Instandsetzung",
                        "dringlich",
                        "",
                        "",
                        "",
                        ""});
            table11.AddRow(new string[] {
                        "2",
                        "Kantonsstrasse",
                        "Abschnitt A Anfang",
                        "Abschnitt A Ende",
                        "1.2",
                        "2.0",
                        "800",
                        "12.14.2009",
                        "Drei",
                        "Nass",
                        "2,3",
                        "",
                        "",
                        "Instandsetzung",
                        "dringlich",
                        "",
                        "",
                        "",
                        ""});
            table11.AddRow(new string[] {
                        "4",
                        "Landstrasse",
                        "Abschnitt A Anfang",
                        "Abschnitt A Ende",
                        "0.0",
                        "2.1",
                        "2100",
                        "21.05.2009",
                        "B",
                        "Trocken",
                        "1,1",
                        "",
                        "Kritisch",
                        "Ersatz",
                        "langfristig",
                        "",
                        "",
                        "ja",
                        "dringend"});
            table11.AddRow(new string[] {
                        "5",
                        "Landstrasse",
                        "Abschnitt A Anfang",
                        "Abschnitt A Ende",
                        "2.1",
                        "2.4",
                        "300",
                        "21.05.2009",
                        "B",
                        "Trocken",
                        "1,1",
                        "",
                        "Kritisch",
                        "Ersatz",
                        "langfristig",
                        "",
                        "",
                        "ja",
                        "dringend"});
#line 247
testRunner.Then("sind folgende Zustandsinformationen im System:", ((string)(null)), table11, "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Das System berechnet die Fläche Fahrbahn (m²) nachdem der Data-Manager den Zustan" +
            "dsabschnitt gespeichert hat")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void DasSystemBerechnetDieFlacheFahrbahnMNachdemDerData_ManagerDenZustandsabschnittGespeichertHat()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Das System berechnet die Fläche Fahrbahn (m²) nachdem der Data-Manager den Zustan" +
                    "dsabschnitt gespeichert hat", new string[] {
                        "Manuell"});
#line 257
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Das System berechnet die Fläche Trottoir links (m²) nachdem der Data-Manager den " +
            "Zustandsabschnitt gespeichert hat")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void DasSystemBerechnetDieFlacheTrottoirLinksMNachdemDerData_ManagerDenZustandsabschnittGespeichertHat()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Das System berechnet die Fläche Trottoir links (m²) nachdem der Data-Manager den " +
                    "Zustandsabschnitt gespeichert hat", new string[] {
                        "Manuell"});
#line 262
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Das System berechnet die Fläche Trottoir rechts (m²) nachdem der Data-Manager den" +
            " Zustandsabschnitt gespeichert hat")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void DasSystemBerechnetDieFlacheTrottoirRechtsMNachdemDerData_ManagerDenZustandsabschnittGespeichertHat()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Das System berechnet die Fläche Trottoir rechts (m²) nachdem der Data-Manager den" +
                    " Zustandsabschnitt gespeichert hat", new string[] {
                        "Manuell"});
#line 267
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Der Data-Manager kann zu jedem Zustandsabschnitt einen Massnahmenvorschlag erfass" +
            "en")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void DerData_ManagerKannZuJedemZustandsabschnittEinenMassnahmenvorschlagErfassen()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Data-Manager kann zu jedem Zustandsabschnitt einen Massnahmenvorschlag erfass" +
                    "en", new string[] {
                        "Manuell"});
#line 272
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Das System berechnet die Kosten für den gewählten Massnahmenvorschlag")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        [NUnit.Framework.TestCaseAttribute("1", "Oberflächenverbesserung", "CHF 225000", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2", "Deckbelagserneuerung", "CHF 360000", new string[0])]
        [NUnit.Framework.TestCaseAttribute("3", "Belagserneuerung mit teilweiser Verstärkung", "CHF 5500000", new string[0])]
        [NUnit.Framework.TestCaseAttribute("4", "Erneuerung Oberbau", "CHF 3622500", new string[0])]
        [NUnit.Framework.TestCaseAttribute("7", "Erneuerung Trottoir links", "CHF 162500", new string[0])]
        [NUnit.Framework.TestCaseAttribute("6", "Erneuerung Trottoir rechts", "CHF 15000", new string[0])]
        public virtual void DasSystemBerechnetDieKostenFurDenGewahltenMassnahmenvorschlag(string id, string massnahme, string kosten, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Manuell"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Das System berechnet die Kosten für den gewählten Massnahmenvorschlag", @__tags);
#line 277
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Massnahme",
                        "Kosten"});
            table12.AddRow(new string[] {
                        "Oberflächenverbesserung",
                        "50"});
            table12.AddRow(new string[] {
                        "Deckbelagserneuerung",
                        "100"});
            table12.AddRow(new string[] {
                        "Belagserneuerung mit teilweiser Verstärkung",
                        "200"});
            table12.AddRow(new string[] {
                        "Erneuerung Oberbau",
                        "300"});
            table12.AddRow(new string[] {
                        "Trottoir",
                        "50"});
#line 278
 testRunner.When("folgende Kosten pro m² für \'Mandant_1\' gelten:", ((string)(null)), table12, "Wenn ");
#line 285
 testRunner.And(string.Format("ich für den Zustandsabschnitt mit der Id \'{0}\' die Massnahme \'{1}\' vorschlage", id, massnahme), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line 286
 testRunner.And("ich die Schäden speichere", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line 287
 testRunner.Then(string.Format("werden folgende \'{0}\' für den Massnahmenvorschlag angezeigt", kosten), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Archivierte Daten können nicht verändert werden")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void ArchivierteDatenKonnenNichtVerandertWerden()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Archivierte Daten können nicht verändert werden", new string[] {
                        "Manuell"});
#line 301
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Werden Zustandsabschnitte gelöscht, hat das keine Auswirkungen auf historische Da" +
            "ten")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void WerdenZustandsabschnitteGeloschtHatDasKeineAuswirkungenAufHistorischeDaten()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Werden Zustandsabschnitte gelöscht, hat das keine Auswirkungen auf historische Da" +
                    "ten", new string[] {
                        "Manuell"});
#line 306
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Das System führt alle Berechnungen on the fly durch")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void DasSystemFuhrtAlleBerechnungenOnTheFlyDurch()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Das System führt alle Berechnungen on the fly durch", new string[] {
                        "Manuell"});
#line 311
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
