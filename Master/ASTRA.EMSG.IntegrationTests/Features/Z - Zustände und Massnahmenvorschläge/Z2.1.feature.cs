// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ASTRA.EMSG.IntegrationTests.Features.Z_ZustandeUndMassnahmenvorschlage
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("Z2.1 - Zustände und Massnahmenvorschläge über das UI erfassen", Description="\tAls Data-Manager\r\n\twill ich Zustände und Massnahmenvorschläge über das UI erfass" +
        "en\r\n\tdamit ich einen Überblick zum Zustand und eine Basis für die Planung meiner" +
        " Massnahmen habe", SourceFile="Features\\Z - Zustände und Massnahmenvorschläge\\Z2.1.feature", SourceLine=0)]
    public partial class Z2_1_ZustandeUndMassnahmenvorschlageUberDasUIErfassenFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Z2.1.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("de-AT"), "Z2.1 - Zustände und Massnahmenvorschläge über das UI erfassen", "\tAls Data-Manager\r\n\twill ich Zustände und Massnahmenvorschläge über das UI erfass" +
                    "en\r\n\tdamit ich einen Überblick zum Zustand und eine Basis für die Planung meiner" +
                    " Massnahmen habe", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mandant",
                        "Modus"});
            table1.AddRow(new string[] {
                        "Mandant_1",
                        "strassennamen"});
#line 7
testRunner.Given("folgende Einstellungen existieren:", ((string)(null)), table1, "Gegeben sei ");
#line 10
testRunner.And("ich bin Data-Manager von \'Mandant_1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Strassenname",
                        "BezeichnungVon",
                        "BezeichnungBis",
                        "Belag",
                        "BreiteFahrbahn",
                        "Laenge",
                        "Trottoir",
                        "BreiteTrottoirLinks",
                        "BreiteTrottoirRechts"});
            table2.AddRow(new string[] {
                        "1",
                        "Jesuitenbachweg",
                        "Hackl",
                        "Schweighofer",
                        "Asphalt",
                        "4,5",
                        "100",
                        "Links",
                        "2,5",
                        "-"});
            table2.AddRow(new string[] {
                        "2",
                        "Lagerstrasse",
                        "Nr. 13",
                        "Nr. 22",
                        "Beton",
                        "5,75",
                        "200",
                        "NochNichtErfasst",
                        "-",
                        "-"});
            table2.AddRow(new string[] {
                        "3",
                        "Föhrenweg",
                        "Unterer Ortsteil",
                        "Lager",
                        "Beton",
                        "7",
                        "300",
                        "KeinTrottoir",
                        "-",
                        "-"});
            table2.AddRow(new string[] {
                        "4",
                        "Gartenstrasse",
                        "1",
                        "66",
                        "Asphalt",
                        "5",
                        "900",
                        "BeideSeiten",
                        "2",
                        "1,5"});
#line 11
testRunner.And("für Mandant \'Mandant_1\' existieren folgende Netzinformationen:", ((string)(null)), table2, "Und ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Strassenabschnitt",
                        "BezeichnungVon",
                        "BezeichnungBis",
                        "Länge",
                        "Aufnahmedatum",
                        "Aufnahmeteam",
                        "Wetter",
                        "Zustandsindex",
                        "ZustandsindexTrottoirLinks",
                        "ZustandsindexTrottoirRechts",
                        "MassnahmenvorschlagFahrbahnTyp",
                        "MassnahmenvorschlagFahrbahnDringlichkeit",
                        "MassnahmenvorschlagTrottoirLinksTyp",
                        "MassnahmenvorschlagTrottoirLinksDringlichkeit",
                        "MassnahmenvorschlagTrottoirRechtsTyp",
                        "MassnahmenvorschlagTrottoirRechtsDringlichkeit"});
            table3.AddRow(new string[] {
                        "5",
                        "1",
                        "Nr. 1",
                        "Nr. 7",
                        "1000",
                        "14.12.2009",
                        "Drei",
                        "Regen",
                        "2,3",
                        "-",
                        "-",
                        "Oberflaechenverbesserung",
                        "Dringlich",
                        "-",
                        "-",
                        "-",
                        "-"});
            table3.AddRow(new string[] {
                        "6",
                        "1",
                        "Nr. 8",
                        "Nr. 12",
                        "800",
                        "14.12.2009",
                        "Drei",
                        "Regen",
                        "2,3",
                        "-",
                        "-",
                        "Deckbelagserneuerung",
                        "Dringlich",
                        "-",
                        "-",
                        "-",
                        "-"});
            table3.AddRow(new string[] {
                        "7",
                        "1",
                        "Nr. 13",
                        "Nr. 55",
                        "5000",
                        "23.03.2009",
                        "A",
                        "KeinRegen",
                        "1,2",
                        "Gut",
                        "-",
                        "Belagserneuerung",
                        "Mittelfristig",
                        "-",
                        "-",
                        "-",
                        "-"});
            table3.AddRow(new string[] {
                        "8",
                        "2",
                        "0.0",
                        "2.1",
                        "2100",
                        "21.05.2009",
                        "B",
                        "KeinRegen",
                        "1,1",
                        "-",
                        "-",
                        "ErneuerungOberbau",
                        "Langfristig",
                        "-",
                        "-",
                        "-",
                        "-"});
            table3.AddRow(new string[] {
                        "9",
                        "2",
                        "2.1",
                        "5.3",
                        "300",
                        "21.05.2009",
                        "B",
                        "KeinRegen",
                        "1,1",
                        "-",
                        "-",
                        "ErneuerungOberbau",
                        "Langfristig",
                        "-",
                        "-",
                        "-",
                        "-"});
            table3.AddRow(new string[] {
                        "10",
                        "2",
                        "5.4",
                        "7.1",
                        "100",
                        "21.05.2009",
                        "B",
                        "KeinRegen",
                        "2,1",
                        "-",
                        "-",
                        "ErneuerungOberbau",
                        "Langfristig",
                        "-",
                        "-",
                        "-",
                        "-"});
            table3.AddRow(new string[] {
                        "11",
                        "3",
                        "Brunner",
                        "Maier",
                        "1300",
                        "21.10.2009",
                        "Meyer",
                        "KeinRegen",
                        "3,4",
                        "-",
                        "-",
                        "-",
                        "-",
                        "-",
                        "-",
                        "-",
                        "-"});
            table3.AddRow(new string[] {
                        "12",
                        "4",
                        "1",
                        "66",
                        "700",
                        "12.01.2012",
                        "-",
                        "KeinRegen",
                        "3",
                        "Ausreichend",
                        "Mittel",
                        "-",
                        "-",
                        "Erneuerung",
                        "Dringlich",
                        "Erneuerung",
                        "Langfristig"});
#line 18
testRunner.And("für Mandant \'Mandant_1\' existieren folgende Zustandsinformationen:", ((string)(null)), table3, "Und ");
#line hidden
        }
        
        public virtual void DerData_ManagerKannZustandsabschnitteErfassen(
                    string tF, 
                    string strassenabschnitt, 
                    string bezeichnungVon, 
                    string bezeichnungBis, 
                    string lange, 
                    string flacheFahrbahn, 
                    string flacheTrottoirLinks, 
                    string flacheTrottoirRechts, 
                    string aufnahmedatum, 
                    string aufnahmeteam, 
                    string wetter, 
                    string bemerkung, 
                    string validationsfehler, 
                    string feldbezeichnung, 
                    string kommentar, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ToBind",
                    "Automatisch"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Data-Manager kann Zustandsabschnitte erfassen", @__tags);
#line 33
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "BezeichnungVon",
                        "BezeichnungBis",
                        "Länge",
                        "Aufnahmedatum",
                        "Aufnahmeteam",
                        "Wetter",
                        "Bemerkung",
                        "Zustandsindex"});
            table4.AddRow(new string[] {
                        string.Format("{0}", bezeichnungVon),
                        string.Format("{0}", bezeichnungBis),
                        string.Format("{0}", lange),
                        string.Format("{0}", aufnahmedatum),
                        string.Format("{0}", aufnahmeteam),
                        string.Format("{0}", wetter),
                        string.Format("{0}", bemerkung),
                        "1"});
#line 36
 testRunner.When("ich für Id \'4\' folgende Zustandsabschnitte erfasse", ((string)(null)), table4, "Wenn ");
#line 40
 testRunner.Then(string.Format("liefert Feldbezeichnung \'{0}\' einen Validationsfehler \'{1}\'", feldbezeichnung, validationsfehler), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Strassenabschnitt",
                        "BezeichnungVon",
                        "BezeichnungBis",
                        "Länge",
                        "FlächeFahrbahn",
                        "FlächeTrottoirLinks",
                        "FlächeTrottoirRechts",
                        "Aufnahmedatum",
                        "Aufnahmeteam",
                        "Wetter",
                        "Bemerkung"});
            table5.AddRow(new string[] {
                        string.Format("{0}", strassenabschnitt),
                        string.Format("{0}", bezeichnungVon),
                        string.Format("{0}", bezeichnungBis),
                        string.Format("{0}", lange),
                        string.Format("{0}", flacheFahrbahn),
                        string.Format("{0}", flacheTrottoirLinks),
                        string.Format("{0}", flacheTrottoirRechts),
                        string.Format("{0}", aufnahmedatum),
                        string.Format("{0}", aufnahmeteam),
                        string.Format("{0}", wetter),
                        string.Format("{0}", bemerkung)});
#line 42
 testRunner.Then("sind folgende Zustandsabschnitte im System", ((string)(null)), table5, "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Manager kann Zustandsabschnitte erfassen, 1", new string[] {
                "ToBind",
                "Automatisch"}, SourceLine=47)]
        public virtual void DerData_ManagerKannZustandsabschnitteErfassen_1()
        {
            this.DerData_ManagerKannZustandsabschnitteErfassen("1", "4", "Post", "Bank", "200", "1000", "400", "300", "12.01.2012", "Müller", "Regen", "keine", "Nein", "-", "Gutfall", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Manager kann Zustandsabschnitte erfassen, 2", new string[] {
                "ToBind",
                "Automatisch"}, SourceLine=47)]
        public virtual void DerData_ManagerKannZustandsabschnitteErfassen_2()
        {
            this.DerData_ManagerKannZustandsabschnitteErfassen("2", "4", "Post", "Bank", "40,5", "202,5", "81", "60,75", "12.01.2012", "Müller", "KeinRegen", "-", "Nein", "-", "Gutfall", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Manager kann Zustandsabschnitte erfassen, 3", new string[] {
                "ToBind",
                "Automatisch"}, SourceLine=47)]
        public virtual void DerData_ManagerKannZustandsabschnitteErfassen_3()
        {
            this.DerData_ManagerKannZustandsabschnitteErfassen("3", "4", "Post", "Bank", "100,253", "-", "-", "-", "12.01.2012", "Müller", "Regen", "keine", "Ja", "Stammdaten.Laenge", "Ungültige Länge max. 2 Nachkommastellen", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Manager kann Zustandsabschnitte erfassen, 4", new string[] {
                "ToBind",
                "Automatisch"}, SourceLine=47)]
        public virtual void DerData_ManagerKannZustandsabschnitteErfassen_4()
        {
            this.DerData_ManagerKannZustandsabschnitteErfassen("4", "4", "Post", "Bank", "-20", "-", "-", "-", "12.01.2012", "Müller", "Regen", "keine", "Ja", "Stammdaten.Laenge", "Ungültige Länge < 0", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Zustandsabschnitt muss immer einem Strassenabschnitt zugeordnet sein", new string[] {
                "Manuell"}, SourceLine=55)]
        public virtual void DerZustandsabschnittMussImmerEinemStrassenabschnittZugeordnetSein()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Zustandsabschnitt muss immer einem Strassenabschnitt zugeordnet sein", new string[] {
                        "Manuell"});
#line 56
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Zustandsabschnitt erbt ‚Strassenname‘, ‚Belagsart‘, ‚Breite Fahrbahn‘, ‚Trott" +
            "oir‘, ‚Breite Trottoir links‘ und ‚Breite Trottoir rechts‘ vom Strassenabschnitt" +
            "", new string[] {
                "Manuell"}, SourceLine=60)]
        public virtual void DerZustandsabschnittErbtStrassennameBelagsartBreiteFahrbahnTrottoirBreiteTrottoirLinksUndBreiteTrottoirRechtsVomStrassenabschnitt()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Zustandsabschnitt erbt ‚Strassenname‘, ‚Belagsart‘, ‚Breite Fahrbahn‘, ‚Trott" +
                    "oir‘, ‚Breite Trottoir links‘ und ‚Breite Trottoir rechts‘ vom Strassenabschnitt" +
                    "", new string[] {
                        "Manuell"});
#line 61
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id"});
            table6.AddRow(new string[] {
                        "3"});
            table6.AddRow(new string[] {
                        "4"});
#line 62
testRunner.When("ich einen für folgende Strassenabschnitte einen neuen Zustandsabschnitt anlege:", ((string)(null)), table6, "Wenn ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Strassenname",
                        "Belagsart",
                        "BreiteFahrbahn",
                        "Trottoir",
                        "BreiteTrottoirLinks",
                        "BreiteTrottoirRechts"});
            table7.AddRow(new string[] {
                        "Föhrenweg",
                        "Beton",
                        "7",
                        "Keines",
                        "-",
                        "-"});
            table7.AddRow(new string[] {
                        "Gartenstrasse",
                        "Asphalt",
                        "5",
                        "BeideSeiten",
                        "2",
                        "1,5"});
#line 66
testRunner.Then("existieren folgende Zustandsinformationen für die Strasse mit der Id 4:", ((string)(null)), table7, "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Angaben zum Trottoir wie Zustandsindex, Erneuerung usw. können nur erfasst werden" +
            ", sofern der Strassenabschnitt auch einen entsprechenden Trottoir(typ) aufweist", new string[] {
                "Manuell"}, SourceLine=73)]
        public virtual void AngabenZumTrottoirWieZustandsindexErneuerungUsw_KonnenNurErfasstWerdenSofernDerStrassenabschnittAuchEinenEntsprechendenTrottoirTypAufweist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Angaben zum Trottoir wie Zustandsindex, Erneuerung usw. können nur erfasst werden" +
                    ", sofern der Strassenabschnitt auch einen entsprechenden Trottoir(typ) aufweist", new string[] {
                        "Manuell"});
#line 74
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Manager kann alle Attribute des Zustandsabschnitts bearbeiten (gilt nich" +
            "t für Attribute, die als read only ausgewiesen sind)", new string[] {
                "Manuell"}, SourceLine=80)]
        public virtual void DerData_ManagerKannAlleAttributeDesZustandsabschnittsBearbeitenGiltNichtFurAttributeDieAlsReadOnlyAusgewiesenSind()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Data-Manager kann alle Attribute des Zustandsabschnitts bearbeiten (gilt nich" +
                    "t für Attribute, die als read only ausgewiesen sind)", new string[] {
                        "Manuell"});
#line 81
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "BezeichnungVon",
                        "BezeichnungBis",
                        "Länge",
                        "Aufnahmedatum",
                        "Aufnahmeteam",
                        "Wetter",
                        "ZustandsIndexFahrbahn",
                        "ZustandsindexTrottoirLinks",
                        "ZustandsindexTrottoirRechts",
                        "MassnahmenvorschlagFahrbahn",
                        "DringlichkeitMassnahmenvorschlagFahrbahn",
                        "TrottoirLinksErneuerung",
                        "DringlichkeitTrottoirLinksErneuerung",
                        "TrottoirRechtsErneuerung",
                        "DringlichkeitTrottoirRechtsErneuerung"});
            table8.AddRow(new string[] {
                        "5",
                        "Anfang",
                        "Mitte",
                        "100",
                        "12.01.2012",
                        "Müller",
                        "Nass",
                        "0",
                        "Gut",
                        "-",
                        "-",
                        "-",
                        "-",
                        "-",
                        "-",
                        "-"});
            table8.AddRow(new string[] {
                        "6",
                        "Mitte",
                        "Ende",
                        "20",
                        "13.04.2011",
                        "Huber",
                        "Trocken",
                        "4,5",
                        "Ausreichend",
                        "-",
                        "Oberflächenverbesserung",
                        "dringlich",
                        "ja",
                        "mittelfristig",
                        "-",
                        "-"});
#line 82
testRunner.When("ich die Zustandsabschnitte für die Strasse mit der Id \'1\' folgendermassen editier" +
                    "e:", ((string)(null)), table8, "Wenn ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Strassenname",
                        "BezeichnungVonStrasse",
                        "BezeichnungBisStrasse",
                        "BezeichnungVon",
                        "BezeichnungBis",
                        "Länge",
                        "Aufnahmedatum",
                        "Aufnahmeteam",
                        "Wetter",
                        "ZustandsIndexFahrbahn",
                        "ZustandsindexTrottoirLinks",
                        "ZustandsindexTrottoirRechts",
                        "MassnahmenvorschlagFahrbahn",
                        "DringlichkeitMassnahmenvorschlagFahrbahn",
                        "TrottoirLinksErneuerung",
                        "DringlichkeitTrottoirLinksErneuerung",
                        "TrottoirRechtsErneuerung",
                        "DringlichkeitTrottoirRechtsErneuerung"});
            table9.AddRow(new string[] {
                        "5",
                        "Jesuitenbachweg",
                        "Hackl",
                        "Schweighofer",
                        "Anfang",
                        "Mitte",
                        "100",
                        "12.01.2012",
                        "Müller",
                        "Nass",
                        "0",
                        "Gut",
                        "-",
                        "-",
                        "-",
                        "-",
                        "-",
                        "-",
                        "-"});
            table9.AddRow(new string[] {
                        "6",
                        "Jesuitenbachweg",
                        "Hackl",
                        "Schweighofer",
                        "Mitte",
                        "Ende",
                        "20",
                        "13.04.2011",
                        "Huber",
                        "Trocken",
                        "4,5",
                        "Ausreichend",
                        "-",
                        "Oberflächenverbesserung",
                        "dringlich",
                        "ja",
                        "mittelfristig",
                        "",
                        ""});
            table9.AddRow(new string[] {
                        "7",
                        "Jesuitenbachweg",
                        "Hackl",
                        "Schweighofer",
                        "Nr. 13",
                        "Nr. 55",
                        "5000",
                        "23.03.2009",
                        "A",
                        "Trocken",
                        "1,2",
                        "Gut",
                        "-",
                        "Belagserneuerung mit teilweiser Verstärkung",
                        "mittelfristig",
                        "-",
                        "-",
                        "-",
                        "-"});
#line 87
testRunner.Then("existieren folgende Zustandsinformationen für die Strasse mit der Id \'3\':", ((string)(null)), table9, "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Das System stellt sicher, dass die Summe der Längen der Zustandsabschnitte nicht " +
            "grösser ist, als die Länge des Strassenabschnitts", new string[] {
                "Manuell"}, SourceLine=95)]
        public virtual void DasSystemStelltSicherDassDieSummeDerLangenDerZustandsabschnitteNichtGrosserIstAlsDieLangeDesStrassenabschnitts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Das System stellt sicher, dass die Summe der Längen der Zustandsabschnitte nicht " +
                    "grösser ist, als die Länge des Strassenabschnitts", new string[] {
                        "Manuell"});
#line 96
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Manager kann das Zustandserfassungsformular (Erfassungsformular für Ober" +
            "flächenschäden) ausfüllen", new string[] {
                "Manuell"}, SourceLine=100)]
        public virtual void DerData_ManagerKannDasZustandserfassungsformularErfassungsformularFurOberflachenschadenAusfullen()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Data-Manager kann das Zustandserfassungsformular (Erfassungsformular für Ober" +
                    "flächenschäden) ausfüllen", new string[] {
                        "Manuell"});
#line 101
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 102
testRunner.When("ich das Erfassungsformular für Oberflächenschäden für den Zustandsabschnitt mit d" +
                    "er Id \'1\' öffne", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Möglichkeit"});
            table10.AddRow(new string[] {
                        "Erfassung des Zustandsindex"});
            table10.AddRow(new string[] {
                        "Grobe Zustandserfassung"});
            table10.AddRow(new string[] {
                        "Detaillierte Zustandserfassung"});
#line 103
testRunner.Then("habe ich folgende Möglichkeiten zur Auswahl:", ((string)(null)), table10, "Dann ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Strassenname",
                        "BezeichnungVon",
                        "BezeichnungBis"});
            table11.AddRow(new string[] {
                        "Jesuitenbachweg",
                        "Hackl",
                        "Schweighofer"});
#line 108
testRunner.And("sehe folgende Informationen:", ((string)(null)), table11, "Und ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Unabhängig von der Art der Zustandserfassung werden der „Strassenname“ die „Bezei" +
            "chnung von“ sowie die „Bezeichnung bis“ des Zustandsabschnitts read only angezei" +
            "gt", new string[] {
                "Manuell"}, SourceLine=114)]
        public virtual void UnabhangigVonDerArtDerZustandserfassungWerdenDerStrassennameDieBezeichnungVonSowieDieBezeichnungBisDesZustandsabschnittsReadOnlyAngezeigt()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Unabhängig von der Art der Zustandserfassung werden der „Strassenname“ die „Bezei" +
                    "chnung von“ sowie die „Bezeichnung bis“ des Zustandsabschnitts read only angezei" +
                    "gt", new string[] {
                        "Manuell"});
#line 115
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Das System stellt bei grober und detaillierter Erfassung das Formular entsprechen" +
            "d der Belagsart des Strassenabschnitts dar", new string[] {
                "Manuell"}, SourceLine=119)]
        public virtual void DasSystemStelltBeiGroberUndDetaillierterErfassungDasFormularEntsprechendDerBelagsartDesStrassenabschnittsDar()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Das System stellt bei grober und detaillierter Erfassung das Formular entsprechen" +
                    "d der Belagsart des Strassenabschnitts dar", new string[] {
                        "Manuell"});
#line 120
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Erfassungsformular Oberflächenschäden Betonbelag (Beton) - detailliert", new string[] {
                "Manuell"}, SourceLine=124)]
        public virtual void ErfassungsformularOberflachenschadenBetonbelagBeton_Detailliert()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Erfassungsformular Oberflächenschäden Betonbelag (Beton) - detailliert", new string[] {
                        "Manuell"});
#line 125
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 126
testRunner.When("ich das Erfassungsformular für Oberflächenschäden für den Zustandsabschnitt mit d" +
                    "er Id \'2\' öffne", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Kategorie",
                        "Schaden"});
            table12.AddRow(new string[] {
                        "Oberflächenglätte",
                        "Polieren"});
            table12.AddRow(new string[] {
                        "Materialverluste",
                        "Abrieb"});
            table12.AddRow(new string[] {
                        "Materialverluste",
                        "Abblätterung"});
            table12.AddRow(new string[] {
                        "Materialverluste",
                        "Abplatzungen"});
            table12.AddRow(new string[] {
                        "Fugen- und Kantenschäden",
                        "Kantenschäden, Absplitterung"});
            table12.AddRow(new string[] {
                        "Fugen- und Kantenschäden",
                        "Fehlender oder spröder Fugenverguss"});
            table12.AddRow(new string[] {
                        "Vertikalverschiebung",
                        "Setzungen, Frosthebungen"});
            table12.AddRow(new string[] {
                        "Vertikalverschiebung",
                        "Stufenbildung"});
            table12.AddRow(new string[] {
                        "Vertikalverschiebung",
                        "Pumpen"});
            table12.AddRow(new string[] {
                        "Vertikalverschiebung",
                        "Blow-up"});
            table12.AddRow(new string[] {
                        "Risse, Brüche",
                        "Risse"});
            table12.AddRow(new string[] {
                        "Risse, Brüche",
                        "Zerstörte Platten"});
            table12.AddRow(new string[] {
                        "Flicke",
                        "Flicke"});
#line 127
testRunner.Then("sehe ich das Schadenerfassungsformular mit folgenden Möglichkeiten:", ((string)(null)), table12, "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Erfassungsformular Oberflächenschäden bitumenhaltiger Belag (Asphalt) - detaillie" +
            "rt", new string[] {
                "Manuell"}, SourceLine=145)]
        public virtual void ErfassungsformularOberflachenschadenBitumenhaltigerBelagAsphalt_Detailliert()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Erfassungsformular Oberflächenschäden bitumenhaltiger Belag (Asphalt) - detaillie" +
                    "rt", new string[] {
                        "Manuell"});
#line 146
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 147
testRunner.When("ich das Erfassungsformular für Oberflächenschäden für den Zustandsabschnitt mit d" +
                    "er Id \'1\' öffne", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Kategorie",
                        "Schaden"});
            table13.AddRow(new string[] {
                        "Oberflächenglätte",
                        "Polieren"});
            table13.AddRow(new string[] {
                        "Oberflächenglätte",
                        "Schwitzen"});
            table13.AddRow(new string[] {
                        "Belagschäden",
                        "Abrieb"});
            table13.AddRow(new string[] {
                        "Belagschäden",
                        "Ausmagerung, Absanden"});
            table13.AddRow(new string[] {
                        "Belagschäden",
                        "Kornausbrüche"});
            table13.AddRow(new string[] {
                        "Belagschäden",
                        "Ablösungen"});
            table13.AddRow(new string[] {
                        "Belagschäden",
                        "Schlaglöcher"});
            table13.AddRow(new string[] {
                        "Belagschäden",
                        "Offene Nähte"});
            table13.AddRow(new string[] {
                        "Belagschäden",
                        "Querrisse"});
            table13.AddRow(new string[] {
                        "Belagschäden",
                        "Wilde Risse"});
            table13.AddRow(new string[] {
                        "Belagsverformungen",
                        "Spurrinnen"});
            table13.AddRow(new string[] {
                        "Belagsverformungen",
                        "Aufwölbungen"});
            table13.AddRow(new string[] {
                        "Belagsverformungen",
                        "Wellblechverformungen"});
            table13.AddRow(new string[] {
                        "Belagsverformungen",
                        "Schubverformungen"});
            table13.AddRow(new string[] {
                        "Strukturelle Schäden",
                        "Anrisse von Setzungen"});
            table13.AddRow(new string[] {
                        "Strukturelle Schäden",
                        "Setzungen, Einsenkungen"});
            table13.AddRow(new string[] {
                        "Strukturelle Schäden",
                        "Abgedrückte Ränder"});
            table13.AddRow(new string[] {
                        "Strukturelle Schäden",
                        "Frosthebungen"});
            table13.AddRow(new string[] {
                        "Strukturelle Schäden",
                        "Längsrisse"});
            table13.AddRow(new string[] {
                        "Strukturelle Schäden",
                        "Netzrisse"});
            table13.AddRow(new string[] {
                        "Strukturelle Schäden",
                        "Belagsrandrisse"});
            table13.AddRow(new string[] {
                        "Flicke",
                        "Flicke"});
#line 148
testRunner.Then("sehe ich das Schadenerfassungsformular mit folgenden Möglichkeiten:", ((string)(null)), table13, "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Manager kann die Schadenschwere erfassen", new string[] {
                "Manuell"}, SourceLine=175)]
        public virtual void DerData_ManagerKannDieSchadenschwereErfassen()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Data-Manager kann die Schadenschwere erfassen", new string[] {
                        "Manuell"});
#line 176
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 177
testRunner.When("ich das Erfassungsformular für Oberflächenschäden für den Zustandsabschnitt mit d" +
                    "er Id \'1\' öffne", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Schwere"});
            table14.AddRow(new string[] {
                        "S0"});
            table14.AddRow(new string[] {
                        "S1"});
            table14.AddRow(new string[] {
                        "S2"});
            table14.AddRow(new string[] {
                        "S3"});
#line 178
testRunner.Then("sehe ich das Schadenerfassungsformular mit folgenden Möglichkeiten:", ((string)(null)), table14, "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Manager kann das Schadenausmass erfassen", new string[] {
                "Manuell"}, SourceLine=187)]
        public virtual void DerData_ManagerKannDasSchadenausmassErfassen()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Data-Manager kann das Schadenausmass erfassen", new string[] {
                        "Manuell"});
#line 188
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 189
testRunner.When("ich das Erfassungsformular für Oberflächenschäden für den Zustandsabschnitt mit d" +
                    "er Id \'1\' öffne", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Schadenausmass"});
            table15.AddRow(new string[] {
                        "A1"});
            table15.AddRow(new string[] {
                        "A2"});
            table15.AddRow(new string[] {
                        "A3"});
#line 190
testRunner.Then("sehe ich das Schadenerfassungsformular mit folgenden Möglichkeiten:", ((string)(null)), table15, "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Das System errechnet die Matrixwerte", new string[] {
                "Manuell"}, SourceLine=198)]
        public virtual void DasSystemErrechnetDieMatrixwerte()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Das System errechnet die Matrixwerte", new string[] {
                        "Manuell"});
#line 199
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 200
testRunner.When("ich das Erfassungsformular für Oberflächenschäden für den Zustandsabschnitt mit d" +
                    "er Id \'2\' öffne", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Kategorie",
                        "Schaden",
                        "Schwere",
                        "Schadenausmass"});
            table16.AddRow(new string[] {
                        "Oberflächenglätte",
                        "Polieren",
                        "S0",
                        "A1"});
            table16.AddRow(new string[] {
                        "Materialverluste",
                        "Abrieb",
                        "S1",
                        "A1"});
            table16.AddRow(new string[] {
                        "Materialverluste",
                        "Abblätterung",
                        "S2",
                        "A1"});
            table16.AddRow(new string[] {
                        "Materialverluste",
                        "Abplatzungen",
                        "S3",
                        "A1"});
            table16.AddRow(new string[] {
                        "Fugen- und Kantenschäden",
                        "Kantenschäden, Absplitterung",
                        "S0",
                        "A2"});
            table16.AddRow(new string[] {
                        "Fugen- und Kantenschäden",
                        "Fehlender oder spröder Fugenverguss",
                        "S1",
                        "A2"});
            table16.AddRow(new string[] {
                        "Vertikalverschiebung",
                        "Setzungen, Frosthebungen",
                        "S2",
                        "A2"});
            table16.AddRow(new string[] {
                        "Vertikalverschiebung",
                        "Stufenbildung",
                        "S3",
                        "A2"});
            table16.AddRow(new string[] {
                        "Vertikalverschiebung",
                        "Pumpen",
                        "S0",
                        "A3"});
            table16.AddRow(new string[] {
                        "Vertikalverschiebung",
                        "Blow-up",
                        "S1",
                        "A3"});
            table16.AddRow(new string[] {
                        "Risse, Brüche",
                        "Risse",
                        "S2",
                        "A3"});
            table16.AddRow(new string[] {
                        "Risse, Brüche",
                        "Zerstörte Platten",
                        "S3",
                        "A3"});
            table16.AddRow(new string[] {
                        "Flicke",
                        "Flicke",
                        "S0",
                        "A1"});
#line 201
testRunner.And("ich folgende Schäden erfasse:", ((string)(null)), table16, "Und ");
#line 216
testRunner.And("ich die Schäden speichere", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Kategorie",
                        "Schaden",
                        "Matrix"});
            table17.AddRow(new string[] {
                        "Oberflächenglätte",
                        "Polieren",
                        "0"});
            table17.AddRow(new string[] {
                        "Materialverluste",
                        "Abrieb",
                        "1"});
            table17.AddRow(new string[] {
                        "Materialverluste",
                        "Abblätterung",
                        "2"});
            table17.AddRow(new string[] {
                        "Materialverluste",
                        "Abplatzungen",
                        "3"});
            table17.AddRow(new string[] {
                        "Fugen- und Kantenschäden",
                        "Kantenschäden, Absplitterung",
                        "0"});
            table17.AddRow(new string[] {
                        "Fugen- und Kantenschäden",
                        "Fehlender oder spröder Fugenverguss",
                        "2"});
            table17.AddRow(new string[] {
                        "Vertikalverschiebung",
                        "Setzungen, Frosthebungen",
                        "4"});
            table17.AddRow(new string[] {
                        "Vertikalverschiebung",
                        "Stufenbildung",
                        "6"});
            table17.AddRow(new string[] {
                        "Vertikalverschiebung",
                        "Pumpen",
                        "0"});
            table17.AddRow(new string[] {
                        "Vertikalverschiebung",
                        "Blow-up",
                        "3"});
            table17.AddRow(new string[] {
                        "Risse, Brüche",
                        "Risse",
                        "6"});
            table17.AddRow(new string[] {
                        "Risse, Brüche",
                        "Zerstörte Platten",
                        "9"});
            table17.AddRow(new string[] {
                        "Flicke",
                        "Flicke",
                        "0"});
#line 217
testRunner.Then("sehe ich folgende Matrixwerte:", ((string)(null)), table17, "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Das System berechnet die Schadenbewertung", new string[] {
                "Manuell"}, SourceLine=235)]
        public virtual void DasSystemBerechnetDieSchadenbewertung()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Das System berechnet die Schadenbewertung", new string[] {
                        "Manuell"});
#line 236
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 237
testRunner.When("ich das Erfassungsformular für Oberflächenschäden für den Zustandsabschnitt mit d" +
                    "er Id \'2\' öffne", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Kategorie",
                        "Schaden",
                        "Schwere",
                        "Schadenausmass"});
            table18.AddRow(new string[] {
                        "Oberflächenglätte",
                        "Polieren",
                        "S0",
                        "A1"});
            table18.AddRow(new string[] {
                        "Materialverluste",
                        "Abrieb",
                        "S1",
                        "A1"});
            table18.AddRow(new string[] {
                        "Materialverluste",
                        "Abblätterung",
                        "S2",
                        "A1"});
            table18.AddRow(new string[] {
                        "Materialverluste",
                        "Abplatzungen",
                        "S3",
                        "A1"});
            table18.AddRow(new string[] {
                        "Fugen- und Kantenschäden",
                        "Kantenschäden, Absplitterung",
                        "S0",
                        "A2"});
            table18.AddRow(new string[] {
                        "Fugen- und Kantenschäden",
                        "Fehlender oder spröder Fugenverguss",
                        "S1",
                        "A2"});
            table18.AddRow(new string[] {
                        "Vertikalverschiebung",
                        "Setzungen, Frosthebungen",
                        "S2",
                        "A2"});
            table18.AddRow(new string[] {
                        "Vertikalverschiebung",
                        "Stufenbildung",
                        "S3",
                        "A2"});
            table18.AddRow(new string[] {
                        "Vertikalverschiebung",
                        "Pumpen",
                        "S0",
                        "A3"});
            table18.AddRow(new string[] {
                        "Vertikalverschiebung",
                        "Blow-up",
                        "S1",
                        "A3"});
            table18.AddRow(new string[] {
                        "Risse, Brüche",
                        "Risse",
                        "S2",
                        "A3"});
            table18.AddRow(new string[] {
                        "Risse, Brüche",
                        "Zerstörte Platten",
                        "S3",
                        "A3"});
            table18.AddRow(new string[] {
                        "Flicke",
                        "Flicke",
                        "S0",
                        "A1"});
#line 238
testRunner.And("ich folgende Schäden erfasse:", ((string)(null)), table18, "Und ");
#line 253
testRunner.And("ich die Schäden speichere", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Kategorie",
                        "Bewertung"});
            table19.AddRow(new string[] {
                        "Oberflächenglätte",
                        "0"});
            table19.AddRow(new string[] {
                        "Materialverluste",
                        "6"});
            table19.AddRow(new string[] {
                        "Fugen- und Kantenschäden",
                        "2"});
            table19.AddRow(new string[] {
                        "Vertikalverschiebung",
                        "18"});
            table19.AddRow(new string[] {
                        "Risse, Brüche",
                        "18"});
            table19.AddRow(new string[] {
                        "Flicke",
                        "0"});
#line 254
testRunner.Then("sehe ich folgende Schadenbewertung:", ((string)(null)), table19, "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Das System berechnet die Schadensumme bei grober und detaillierter Erfassung", new string[] {
                "Manuell"}, SourceLine=265)]
        public virtual void DasSystemBerechnetDieSchadensummeBeiGroberUndDetaillierterErfassung()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Das System berechnet die Schadensumme bei grober und detaillierter Erfassung", new string[] {
                        "Manuell"});
#line 266
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 267
testRunner.When("ich das Erfassungsformular für Oberflächenschäden für den Zustandsabschnitt mit d" +
                    "er Id \'2\' öffne", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Kategorie",
                        "Schaden",
                        "Schwere",
                        "Schadenausmass"});
            table20.AddRow(new string[] {
                        "Oberflächenglätte",
                        "Polieren",
                        "S0",
                        "A1"});
            table20.AddRow(new string[] {
                        "Materialverluste",
                        "Abrieb",
                        "S1",
                        "A1"});
            table20.AddRow(new string[] {
                        "Materialverluste",
                        "Abblätterung",
                        "S2",
                        "A1"});
            table20.AddRow(new string[] {
                        "Materialverluste",
                        "Abplatzungen",
                        "S3",
                        "A1"});
            table20.AddRow(new string[] {
                        "Fugen- und Kantenschäden",
                        "Kantenschäden, Absplitterung",
                        "S0",
                        "A2"});
            table20.AddRow(new string[] {
                        "Fugen- und Kantenschäden",
                        "Fehlender oder spröder Fugenverguss",
                        "S1",
                        "A2"});
            table20.AddRow(new string[] {
                        "Vertikalverschiebung",
                        "Setzungen, Frosthebungen",
                        "S2",
                        "A2"});
            table20.AddRow(new string[] {
                        "Vertikalverschiebung",
                        "Stufenbildung",
                        "S3",
                        "A2"});
            table20.AddRow(new string[] {
                        "Vertikalverschiebung",
                        "Pumpen",
                        "S0",
                        "A3"});
            table20.AddRow(new string[] {
                        "Vertikalverschiebung",
                        "Blow-up",
                        "S1",
                        "A3"});
            table20.AddRow(new string[] {
                        "Risse, Brüche",
                        "Risse",
                        "S2",
                        "A3"});
            table20.AddRow(new string[] {
                        "Risse, Brüche",
                        "Zerstörte Platten",
                        "S3",
                        "A3"});
            table20.AddRow(new string[] {
                        "Flicke",
                        "Flicke",
                        "S0",
                        "A1"});
#line 268
testRunner.And("ich folgende Schäden erfasse:", ((string)(null)), table20, "Und ");
#line 283
testRunner.And("ich die Schäden speichere", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line 284
testRunner.Then("sehe ich die Schadenssumme \'44\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Das System berechnet den Zustandsindex (I1) bei grober und detaillierter Erfassun" +
            "g", new string[] {
                "Manuell"}, SourceLine=289)]
        public virtual void DasSystemBerechnetDenZustandsindexI1BeiGroberUndDetaillierterErfassung()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Das System berechnet den Zustandsindex (I1) bei grober und detaillierter Erfassun" +
                    "g", new string[] {
                        "Manuell"});
#line 290
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 291
testRunner.When("ich das Erfassungsformular für Oberflächenschäden für den Zustandsabschnitt mit d" +
                    "er Id \'2\' öffne", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Kategorie",
                        "Schaden",
                        "Schwere",
                        "Schadenausmass"});
            table21.AddRow(new string[] {
                        "Oberflächenglätte",
                        "Polieren",
                        "S0",
                        "A1"});
            table21.AddRow(new string[] {
                        "Materialverluste",
                        "Abrieb",
                        "S1",
                        "A1"});
            table21.AddRow(new string[] {
                        "Materialverluste",
                        "Abblätterung",
                        "S2",
                        "A1"});
            table21.AddRow(new string[] {
                        "Materialverluste",
                        "Abplatzungen",
                        "S3",
                        "A1"});
            table21.AddRow(new string[] {
                        "Fugen- und Kantenschäden",
                        "Kantenschäden, Absplitterung",
                        "S0",
                        "A2"});
            table21.AddRow(new string[] {
                        "Fugen- und Kantenschäden",
                        "Fehlender oder spröder Fugenverguss",
                        "S1",
                        "A2"});
            table21.AddRow(new string[] {
                        "Vertikalverschiebung",
                        "Setzungen, Frosthebungen",
                        "S2",
                        "A2"});
            table21.AddRow(new string[] {
                        "Vertikalverschiebung",
                        "Stufenbildung",
                        "S3",
                        "A2"});
            table21.AddRow(new string[] {
                        "Vertikalverschiebung",
                        "Pumpen",
                        "S0",
                        "A3"});
            table21.AddRow(new string[] {
                        "Vertikalverschiebung",
                        "Blow-up",
                        "S1",
                        "A3"});
            table21.AddRow(new string[] {
                        "Risse, Brüche",
                        "Risse",
                        "S2",
                        "A3"});
            table21.AddRow(new string[] {
                        "Risse, Brüche",
                        "Zerstörte Platten",
                        "S3",
                        "A3"});
            table21.AddRow(new string[] {
                        "Flicke",
                        "Flicke",
                        "S0",
                        "A1"});
#line 292
testRunner.And("ich folgende Schäden erfasse:", ((string)(null)), table21, "Und ");
#line 307
testRunner.And("ich die Schäden speichere", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line 308
testRunner.And("ich das Formular schliesse", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line 309
testRunner.Then("sehe ich für den Zustandsabschnitt mit der Id \'2\' den Zustandsindex \'4.4\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Manager kann Zustandsabschnitte über die Übersichtstabelle löschen", new string[] {
                "Manuell"}, SourceLine=313)]
        public virtual void DerData_ManagerKannZustandsabschnitteUberDieUbersichtstabelleLoschen()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Data-Manager kann Zustandsabschnitte über die Übersichtstabelle löschen", new string[] {
                        "Manuell"});
#line 314
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 315
 testRunner.When("ich den Zustandsabschnitt Id 7 lösche", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id"});
            table22.AddRow(new string[] {
                        "5"});
            table22.AddRow(new string[] {
                        "6"});
            table22.AddRow(new string[] {
                        "8"});
            table22.AddRow(new string[] {
                        "9"});
            table22.AddRow(new string[] {
                        "10"});
            table22.AddRow(new string[] {
                        "11"});
            table22.AddRow(new string[] {
                        "12"});
#line 316
 testRunner.Then("sind folgende Zustandsabschnitte im System:", ((string)(null)), table22, "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Das System berechnet die Fläche Fahrbahn (m²) nachdem der Data-Manager den Zustan" +
            "dsabschnitt gespeichert hat", new string[] {
                "Manuell"}, SourceLine=328)]
        public virtual void DasSystemBerechnetDieFlacheFahrbahnMNachdemDerData_ManagerDenZustandsabschnittGespeichertHat()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Das System berechnet die Fläche Fahrbahn (m²) nachdem der Data-Manager den Zustan" +
                    "dsabschnitt gespeichert hat", new string[] {
                        "Manuell"});
#line 329
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Länge"});
            table23.AddRow(new string[] {
                        "5",
                        "150"});
            table23.AddRow(new string[] {
                        "6",
                        "888,5"});
#line 330
 testRunner.When("ich die Zustandsabschnitte für die Strasse mit der Id \'1\' folgendermassen editier" +
                    "e:", ((string)(null)), table23, "Wenn ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "FlächeFahrbahn"});
            table24.AddRow(new string[] {
                        "5",
                        "675"});
            table24.AddRow(new string[] {
                        "6",
                        "3998"});
            table24.AddRow(new string[] {
                        "7",
                        "22500"});
#line 335
 testRunner.Then("werden folgende Zustandsinformationen für die Strasse mit der Id \'3\' angezeigt:", ((string)(null)), table24, "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Das System berechnet die Fläche Trottoir links (m²) nachdem der Data-Manager den " +
            "Zustandsabschnitt gespeichert hat", new string[] {
                "Manuell"}, SourceLine=343)]
        public virtual void DasSystemBerechnetDieFlacheTrottoirLinksMNachdemDerData_ManagerDenZustandsabschnittGespeichertHat()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Das System berechnet die Fläche Trottoir links (m²) nachdem der Data-Manager den " +
                    "Zustandsabschnitt gespeichert hat", new string[] {
                        "Manuell"});
#line 344
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Länge"});
            table25.AddRow(new string[] {
                        "5",
                        "150"});
            table25.AddRow(new string[] {
                        "6",
                        "888,5"});
#line 345
 testRunner.When("ich die Zustandsabschnitte für die Strasse mit der Id \'1\' folgendermassen editier" +
                    "e:", ((string)(null)), table25, "Wenn ");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "FlächeTrottoirLinks"});
            table26.AddRow(new string[] {
                        "5",
                        "375"});
            table26.AddRow(new string[] {
                        "6",
                        "2221"});
            table26.AddRow(new string[] {
                        "7",
                        "12500"});
#line 349
 testRunner.Then("werden folgende Zustandsinformationen für die Strasse mit der Id \'3\' angezeigt:", ((string)(null)), table26, "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Das System berechnet die Fläche Trottoir rechts (m²) nachdem der Data-Manager den" +
            " Zustandsabschnitt gespeichert hat", new string[] {
                "Manuell"}, SourceLine=357)]
        public virtual void DasSystemBerechnetDieFlacheTrottoirRechtsMNachdemDerData_ManagerDenZustandsabschnittGespeichertHat()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Das System berechnet die Fläche Trottoir rechts (m²) nachdem der Data-Manager den" +
                    " Zustandsabschnitt gespeichert hat", new string[] {
                        "Manuell"});
#line 358
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Länge"});
            table27.AddRow(new string[] {
                        "12",
                        "500"});
#line 359
 testRunner.When("ich die Zustandsabschnitte für die Strasse mit der Id \'4\' folgendermassen editier" +
                    "e:", ((string)(null)), table27, "Wenn ");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "FlächeTrottoirLinks"});
            table28.AddRow(new string[] {
                        "12",
                        "750"});
#line 362
 testRunner.Then("werden folgende Zustandsinformationen für die Strasse mit der Id \'4\' angezeigt:", ((string)(null)), table28, "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Der Data-Manager kann zu jedem Zustandsabschnitt einen Massnahmenvorschlag erfass" +
            "en", new string[] {
                "Manuell"}, SourceLine=368)]
        public virtual void DerData_ManagerKannZuJedemZustandsabschnittEinenMassnahmenvorschlagErfassen()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Data-Manager kann zu jedem Zustandsabschnitt einen Massnahmenvorschlag erfass" +
                    "en", new string[] {
                        "Manuell"});
#line 369
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void DasSystemBerechnetDieKostenFurDenGewahltenMassnahmenvorschlag(string id, string massnahme, string kosten, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Manuell"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Das System berechnet die Kosten für den gewählten Massnahmenvorschlag", @__tags);
#line 374
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "Massnahme",
                        "Kosten"});
            table29.AddRow(new string[] {
                        "Oberflächenverbesserung",
                        "50"});
            table29.AddRow(new string[] {
                        "Deckbelagserneuerung",
                        "100"});
            table29.AddRow(new string[] {
                        "Belagserneuerung mit teilweiser Verstärkung",
                        "200"});
            table29.AddRow(new string[] {
                        "Erneuerung Oberbau",
                        "300"});
            table29.AddRow(new string[] {
                        "Trottoir",
                        "50"});
#line 375
 testRunner.When("folgende Kosten pro m² für \'Mandant_1\' gelten:", ((string)(null)), table29, "Wenn ");
#line 382
 testRunner.And(string.Format("ich für den Zustandsabschnitt mit der Id \'{0}\' die Massnahme \'{1}\' vorschlage", id, massnahme), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line 383
 testRunner.And("ich die Schäden speichere", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line 384
 testRunner.Then(string.Format("werden folgende \'{0}\' für den Massnahmenvorschlag angezeigt", kosten), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Das System berechnet die Kosten für den gewählten Massnahmenvorschlag, 1", new string[] {
                "Manuell"}, SourceLine=387)]
        public virtual void DasSystemBerechnetDieKostenFurDenGewahltenMassnahmenvorschlag_1()
        {
            this.DasSystemBerechnetDieKostenFurDenGewahltenMassnahmenvorschlag("1", "Oberflächenverbesserung", "CHF 225000", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Das System berechnet die Kosten für den gewählten Massnahmenvorschlag, 2", new string[] {
                "Manuell"}, SourceLine=387)]
        public virtual void DasSystemBerechnetDieKostenFurDenGewahltenMassnahmenvorschlag_2()
        {
            this.DasSystemBerechnetDieKostenFurDenGewahltenMassnahmenvorschlag("2", "Deckbelagserneuerung", "CHF 360000", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Das System berechnet die Kosten für den gewählten Massnahmenvorschlag, 3", new string[] {
                "Manuell"}, SourceLine=387)]
        public virtual void DasSystemBerechnetDieKostenFurDenGewahltenMassnahmenvorschlag_3()
        {
            this.DasSystemBerechnetDieKostenFurDenGewahltenMassnahmenvorschlag("3", "Belagserneuerung mit teilweiser Verstärkung", "CHF 5500000", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Das System berechnet die Kosten für den gewählten Massnahmenvorschlag, 4", new string[] {
                "Manuell"}, SourceLine=387)]
        public virtual void DasSystemBerechnetDieKostenFurDenGewahltenMassnahmenvorschlag_4()
        {
            this.DasSystemBerechnetDieKostenFurDenGewahltenMassnahmenvorschlag("4", "Erneuerung Oberbau", "CHF 3622500", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Das System berechnet die Kosten für den gewählten Massnahmenvorschlag, 7", new string[] {
                "Manuell"}, SourceLine=387)]
        public virtual void DasSystemBerechnetDieKostenFurDenGewahltenMassnahmenvorschlag_7()
        {
            this.DasSystemBerechnetDieKostenFurDenGewahltenMassnahmenvorschlag("7", "Erneuerung Trottoir links", "CHF 162500", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Das System berechnet die Kosten für den gewählten Massnahmenvorschlag, 6", new string[] {
                "Manuell"}, SourceLine=387)]
        public virtual void DasSystemBerechnetDieKostenFurDenGewahltenMassnahmenvorschlag_6()
        {
            this.DasSystemBerechnetDieKostenFurDenGewahltenMassnahmenvorschlag("6", "Erneuerung Trottoir rechts", "CHF 15000", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Die vom System berechneten Kosten von Massnahmenvorschlägen können vom Benutzer n" +
            "achträglich angepasst werden", new string[] {
                "Manuell"}, SourceLine=397)]
        public virtual void DieVomSystemBerechnetenKostenVonMassnahmenvorschlagenKonnenVomBenutzerNachtraglichAngepasstWerden()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Die vom System berechneten Kosten von Massnahmenvorschlägen können vom Benutzer n" +
                    "achträglich angepasst werden", new string[] {
                        "Manuell"});
#line 398
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Das System listet alle Zustandsabschnitte in einer Übersichtstabelle", new string[] {
                "Manuell"}, SourceLine=404)]
        public virtual void DasSystemListetAlleZustandsabschnitteInEinerUbersichtstabelle()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Das System listet alle Zustandsabschnitte in einer Übersichtstabelle", new string[] {
                        "Manuell"});
#line 405
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Archivierte Daten können nicht verändert werden", new string[] {
                "Manuell"}, SourceLine=409)]
        public virtual void ArchivierteDatenKonnenNichtVerandertWerden()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Archivierte Daten können nicht verändert werden", new string[] {
                        "Manuell"});
#line 410
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Werden Zustandsabschnitte gelöscht, hat das keine Auswirkungen auf historische Da" +
            "ten", new string[] {
                "Manuell"}, SourceLine=414)]
        public virtual void WerdenZustandsabschnitteGeloschtHatDasKeineAuswirkungenAufHistorischeDaten()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Werden Zustandsabschnitte gelöscht, hat das keine Auswirkungen auf historische Da" +
                    "ten", new string[] {
                        "Manuell"});
#line 415
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Z2.1 - Zustände und Massnahmenvorschläge über das UI erfassen")]
    public partial class Z2_1_ZustandeUndMassnahmenvorschlageUberDasUIErfassenFeature_NUnit
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Z2.1.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("de-AT"), "Z2.1 - Zustände und Massnahmenvorschläge über das UI erfassen", "\tAls Data-Manager\r\n\twill ich Zustände und Massnahmenvorschläge über das UI erfass" +
                    "en\r\n\tdamit ich einen Überblick zum Zustand und eine Basis für die Planung meiner" +
                    " Massnahmen habe", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mandant",
                        "Modus"});
            table1.AddRow(new string[] {
                        "Mandant_1",
                        "strassennamen"});
#line 7
testRunner.Given("folgende Einstellungen existieren:", ((string)(null)), table1, "Gegeben sei ");
#line 10
testRunner.And("ich bin Data-Manager von \'Mandant_1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Strassenname",
                        "BezeichnungVon",
                        "BezeichnungBis",
                        "Belag",
                        "BreiteFahrbahn",
                        "Laenge",
                        "Trottoir",
                        "BreiteTrottoirLinks",
                        "BreiteTrottoirRechts"});
            table2.AddRow(new string[] {
                        "1",
                        "Jesuitenbachweg",
                        "Hackl",
                        "Schweighofer",
                        "Asphalt",
                        "4,5",
                        "100",
                        "Links",
                        "2,5",
                        "-"});
            table2.AddRow(new string[] {
                        "2",
                        "Lagerstrasse",
                        "Nr. 13",
                        "Nr. 22",
                        "Beton",
                        "5,75",
                        "200",
                        "NochNichtErfasst",
                        "-",
                        "-"});
            table2.AddRow(new string[] {
                        "3",
                        "Föhrenweg",
                        "Unterer Ortsteil",
                        "Lager",
                        "Beton",
                        "7",
                        "300",
                        "KeinTrottoir",
                        "-",
                        "-"});
            table2.AddRow(new string[] {
                        "4",
                        "Gartenstrasse",
                        "1",
                        "66",
                        "Asphalt",
                        "5",
                        "900",
                        "BeideSeiten",
                        "2",
                        "1,5"});
#line 11
testRunner.And("für Mandant \'Mandant_1\' existieren folgende Netzinformationen:", ((string)(null)), table2, "Und ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Strassenabschnitt",
                        "BezeichnungVon",
                        "BezeichnungBis",
                        "Länge",
                        "Aufnahmedatum",
                        "Aufnahmeteam",
                        "Wetter",
                        "Zustandsindex",
                        "ZustandsindexTrottoirLinks",
                        "ZustandsindexTrottoirRechts",
                        "MassnahmenvorschlagFahrbahnTyp",
                        "MassnahmenvorschlagFahrbahnDringlichkeit",
                        "MassnahmenvorschlagTrottoirLinksTyp",
                        "MassnahmenvorschlagTrottoirLinksDringlichkeit",
                        "MassnahmenvorschlagTrottoirRechtsTyp",
                        "MassnahmenvorschlagTrottoirRechtsDringlichkeit"});
            table3.AddRow(new string[] {
                        "5",
                        "1",
                        "Nr. 1",
                        "Nr. 7",
                        "1000",
                        "14.12.2009",
                        "Drei",
                        "Regen",
                        "2,3",
                        "-",
                        "-",
                        "Oberflaechenverbesserung",
                        "Dringlich",
                        "-",
                        "-",
                        "-",
                        "-"});
            table3.AddRow(new string[] {
                        "6",
                        "1",
                        "Nr. 8",
                        "Nr. 12",
                        "800",
                        "14.12.2009",
                        "Drei",
                        "Regen",
                        "2,3",
                        "-",
                        "-",
                        "Deckbelagserneuerung",
                        "Dringlich",
                        "-",
                        "-",
                        "-",
                        "-"});
            table3.AddRow(new string[] {
                        "7",
                        "1",
                        "Nr. 13",
                        "Nr. 55",
                        "5000",
                        "23.03.2009",
                        "A",
                        "KeinRegen",
                        "1,2",
                        "Gut",
                        "-",
                        "Belagserneuerung",
                        "Mittelfristig",
                        "-",
                        "-",
                        "-",
                        "-"});
            table3.AddRow(new string[] {
                        "8",
                        "2",
                        "0.0",
                        "2.1",
                        "2100",
                        "21.05.2009",
                        "B",
                        "KeinRegen",
                        "1,1",
                        "-",
                        "-",
                        "ErneuerungOberbau",
                        "Langfristig",
                        "-",
                        "-",
                        "-",
                        "-"});
            table3.AddRow(new string[] {
                        "9",
                        "2",
                        "2.1",
                        "5.3",
                        "300",
                        "21.05.2009",
                        "B",
                        "KeinRegen",
                        "1,1",
                        "-",
                        "-",
                        "ErneuerungOberbau",
                        "Langfristig",
                        "-",
                        "-",
                        "-",
                        "-"});
            table3.AddRow(new string[] {
                        "10",
                        "2",
                        "5.4",
                        "7.1",
                        "100",
                        "21.05.2009",
                        "B",
                        "KeinRegen",
                        "2,1",
                        "-",
                        "-",
                        "ErneuerungOberbau",
                        "Langfristig",
                        "-",
                        "-",
                        "-",
                        "-"});
            table3.AddRow(new string[] {
                        "11",
                        "3",
                        "Brunner",
                        "Maier",
                        "1300",
                        "21.10.2009",
                        "Meyer",
                        "KeinRegen",
                        "3,4",
                        "-",
                        "-",
                        "-",
                        "-",
                        "-",
                        "-",
                        "-",
                        "-"});
            table3.AddRow(new string[] {
                        "12",
                        "4",
                        "1",
                        "66",
                        "700",
                        "12.01.2012",
                        "-",
                        "KeinRegen",
                        "3",
                        "Ausreichend",
                        "Mittel",
                        "-",
                        "-",
                        "Erneuerung",
                        "Dringlich",
                        "Erneuerung",
                        "Langfristig"});
#line 18
testRunner.And("für Mandant \'Mandant_1\' existieren folgende Zustandsinformationen:", ((string)(null)), table3, "Und ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Der Data-Manager kann Zustandsabschnitte erfassen")]
        [NUnit.Framework.CategoryAttribute("ToBind")]
        [NUnit.Framework.CategoryAttribute("Automatisch")]
        [NUnit.Framework.TestCaseAttribute("1", "4", "Post", "Bank", "200", "1000", "400", "300", "12.01.2012", "Müller", "Regen", "keine", "Nein", "-", "Gutfall", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2", "4", "Post", "Bank", "40,5", "202,5", "81", "60,75", "12.01.2012", "Müller", "KeinRegen", "-", "Nein", "-", "Gutfall", new string[0])]
        [NUnit.Framework.TestCaseAttribute("3", "4", "Post", "Bank", "100,253", "-", "-", "-", "12.01.2012", "Müller", "Regen", "keine", "Ja", "Stammdaten.Laenge", "Ungültige Länge max. 2 Nachkommastellen", new string[0])]
        [NUnit.Framework.TestCaseAttribute("4", "4", "Post", "Bank", "-20", "-", "-", "-", "12.01.2012", "Müller", "Regen", "keine", "Ja", "Stammdaten.Laenge", "Ungültige Länge < 0", new string[0])]
        public virtual void DerData_ManagerKannZustandsabschnitteErfassen(
                    string tF, 
                    string strassenabschnitt, 
                    string bezeichnungVon, 
                    string bezeichnungBis, 
                    string lange, 
                    string flacheFahrbahn, 
                    string flacheTrottoirLinks, 
                    string flacheTrottoirRechts, 
                    string aufnahmedatum, 
                    string aufnahmeteam, 
                    string wetter, 
                    string bemerkung, 
                    string validationsfehler, 
                    string feldbezeichnung, 
                    string kommentar, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ToBind",
                    "Automatisch"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Data-Manager kann Zustandsabschnitte erfassen", @__tags);
#line 33
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "BezeichnungVon",
                        "BezeichnungBis",
                        "Länge",
                        "Aufnahmedatum",
                        "Aufnahmeteam",
                        "Wetter",
                        "Bemerkung",
                        "Zustandsindex"});
            table4.AddRow(new string[] {
                        string.Format("{0}", bezeichnungVon),
                        string.Format("{0}", bezeichnungBis),
                        string.Format("{0}", lange),
                        string.Format("{0}", aufnahmedatum),
                        string.Format("{0}", aufnahmeteam),
                        string.Format("{0}", wetter),
                        string.Format("{0}", bemerkung),
                        "1"});
#line 36
 testRunner.When("ich für Id \'4\' folgende Zustandsabschnitte erfasse", ((string)(null)), table4, "Wenn ");
#line 40
 testRunner.Then(string.Format("liefert Feldbezeichnung \'{0}\' einen Validationsfehler \'{1}\'", feldbezeichnung, validationsfehler), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Strassenabschnitt",
                        "BezeichnungVon",
                        "BezeichnungBis",
                        "Länge",
                        "FlächeFahrbahn",
                        "FlächeTrottoirLinks",
                        "FlächeTrottoirRechts",
                        "Aufnahmedatum",
                        "Aufnahmeteam",
                        "Wetter",
                        "Bemerkung"});
            table5.AddRow(new string[] {
                        string.Format("{0}", strassenabschnitt),
                        string.Format("{0}", bezeichnungVon),
                        string.Format("{0}", bezeichnungBis),
                        string.Format("{0}", lange),
                        string.Format("{0}", flacheFahrbahn),
                        string.Format("{0}", flacheTrottoirLinks),
                        string.Format("{0}", flacheTrottoirRechts),
                        string.Format("{0}", aufnahmedatum),
                        string.Format("{0}", aufnahmeteam),
                        string.Format("{0}", wetter),
                        string.Format("{0}", bemerkung)});
#line 42
 testRunner.Then("sind folgende Zustandsabschnitte im System", ((string)(null)), table5, "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Der Zustandsabschnitt muss immer einem Strassenabschnitt zugeordnet sein")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void DerZustandsabschnittMussImmerEinemStrassenabschnittZugeordnetSein()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Zustandsabschnitt muss immer einem Strassenabschnitt zugeordnet sein", new string[] {
                        "Manuell"});
#line 56
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Der Zustandsabschnitt erbt ‚Strassenname‘, ‚Belagsart‘, ‚Breite Fahrbahn‘, ‚Trott" +
            "oir‘, ‚Breite Trottoir links‘ und ‚Breite Trottoir rechts‘ vom Strassenabschnitt" +
            "")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void DerZustandsabschnittErbtStrassennameBelagsartBreiteFahrbahnTrottoirBreiteTrottoirLinksUndBreiteTrottoirRechtsVomStrassenabschnitt()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Zustandsabschnitt erbt ‚Strassenname‘, ‚Belagsart‘, ‚Breite Fahrbahn‘, ‚Trott" +
                    "oir‘, ‚Breite Trottoir links‘ und ‚Breite Trottoir rechts‘ vom Strassenabschnitt" +
                    "", new string[] {
                        "Manuell"});
#line 61
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id"});
            table6.AddRow(new string[] {
                        "3"});
            table6.AddRow(new string[] {
                        "4"});
#line 62
testRunner.When("ich einen für folgende Strassenabschnitte einen neuen Zustandsabschnitt anlege:", ((string)(null)), table6, "Wenn ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Strassenname",
                        "Belagsart",
                        "BreiteFahrbahn",
                        "Trottoir",
                        "BreiteTrottoirLinks",
                        "BreiteTrottoirRechts"});
            table7.AddRow(new string[] {
                        "Föhrenweg",
                        "Beton",
                        "7",
                        "Keines",
                        "-",
                        "-"});
            table7.AddRow(new string[] {
                        "Gartenstrasse",
                        "Asphalt",
                        "5",
                        "BeideSeiten",
                        "2",
                        "1,5"});
#line 66
testRunner.Then("existieren folgende Zustandsinformationen für die Strasse mit der Id 4:", ((string)(null)), table7, "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Angaben zum Trottoir wie Zustandsindex, Erneuerung usw. können nur erfasst werden" +
            ", sofern der Strassenabschnitt auch einen entsprechenden Trottoir(typ) aufweist")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void AngabenZumTrottoirWieZustandsindexErneuerungUsw_KonnenNurErfasstWerdenSofernDerStrassenabschnittAuchEinenEntsprechendenTrottoirTypAufweist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Angaben zum Trottoir wie Zustandsindex, Erneuerung usw. können nur erfasst werden" +
                    ", sofern der Strassenabschnitt auch einen entsprechenden Trottoir(typ) aufweist", new string[] {
                        "Manuell"});
#line 74
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Der Data-Manager kann alle Attribute des Zustandsabschnitts bearbeiten (gilt nich" +
            "t für Attribute, die als read only ausgewiesen sind)")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void DerData_ManagerKannAlleAttributeDesZustandsabschnittsBearbeitenGiltNichtFurAttributeDieAlsReadOnlyAusgewiesenSind()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Data-Manager kann alle Attribute des Zustandsabschnitts bearbeiten (gilt nich" +
                    "t für Attribute, die als read only ausgewiesen sind)", new string[] {
                        "Manuell"});
#line 81
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "BezeichnungVon",
                        "BezeichnungBis",
                        "Länge",
                        "Aufnahmedatum",
                        "Aufnahmeteam",
                        "Wetter",
                        "ZustandsIndexFahrbahn",
                        "ZustandsindexTrottoirLinks",
                        "ZustandsindexTrottoirRechts",
                        "MassnahmenvorschlagFahrbahn",
                        "DringlichkeitMassnahmenvorschlagFahrbahn",
                        "TrottoirLinksErneuerung",
                        "DringlichkeitTrottoirLinksErneuerung",
                        "TrottoirRechtsErneuerung",
                        "DringlichkeitTrottoirRechtsErneuerung"});
            table8.AddRow(new string[] {
                        "5",
                        "Anfang",
                        "Mitte",
                        "100",
                        "12.01.2012",
                        "Müller",
                        "Nass",
                        "0",
                        "Gut",
                        "-",
                        "-",
                        "-",
                        "-",
                        "-",
                        "-",
                        "-"});
            table8.AddRow(new string[] {
                        "6",
                        "Mitte",
                        "Ende",
                        "20",
                        "13.04.2011",
                        "Huber",
                        "Trocken",
                        "4,5",
                        "Ausreichend",
                        "-",
                        "Oberflächenverbesserung",
                        "dringlich",
                        "ja",
                        "mittelfristig",
                        "-",
                        "-"});
#line 82
testRunner.When("ich die Zustandsabschnitte für die Strasse mit der Id \'1\' folgendermassen editier" +
                    "e:", ((string)(null)), table8, "Wenn ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Strassenname",
                        "BezeichnungVonStrasse",
                        "BezeichnungBisStrasse",
                        "BezeichnungVon",
                        "BezeichnungBis",
                        "Länge",
                        "Aufnahmedatum",
                        "Aufnahmeteam",
                        "Wetter",
                        "ZustandsIndexFahrbahn",
                        "ZustandsindexTrottoirLinks",
                        "ZustandsindexTrottoirRechts",
                        "MassnahmenvorschlagFahrbahn",
                        "DringlichkeitMassnahmenvorschlagFahrbahn",
                        "TrottoirLinksErneuerung",
                        "DringlichkeitTrottoirLinksErneuerung",
                        "TrottoirRechtsErneuerung",
                        "DringlichkeitTrottoirRechtsErneuerung"});
            table9.AddRow(new string[] {
                        "5",
                        "Jesuitenbachweg",
                        "Hackl",
                        "Schweighofer",
                        "Anfang",
                        "Mitte",
                        "100",
                        "12.01.2012",
                        "Müller",
                        "Nass",
                        "0",
                        "Gut",
                        "-",
                        "-",
                        "-",
                        "-",
                        "-",
                        "-",
                        "-"});
            table9.AddRow(new string[] {
                        "6",
                        "Jesuitenbachweg",
                        "Hackl",
                        "Schweighofer",
                        "Mitte",
                        "Ende",
                        "20",
                        "13.04.2011",
                        "Huber",
                        "Trocken",
                        "4,5",
                        "Ausreichend",
                        "-",
                        "Oberflächenverbesserung",
                        "dringlich",
                        "ja",
                        "mittelfristig",
                        "",
                        ""});
            table9.AddRow(new string[] {
                        "7",
                        "Jesuitenbachweg",
                        "Hackl",
                        "Schweighofer",
                        "Nr. 13",
                        "Nr. 55",
                        "5000",
                        "23.03.2009",
                        "A",
                        "Trocken",
                        "1,2",
                        "Gut",
                        "-",
                        "Belagserneuerung mit teilweiser Verstärkung",
                        "mittelfristig",
                        "-",
                        "-",
                        "-",
                        "-"});
#line 87
testRunner.Then("existieren folgende Zustandsinformationen für die Strasse mit der Id \'3\':", ((string)(null)), table9, "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Das System stellt sicher, dass die Summe der Längen der Zustandsabschnitte nicht " +
            "grösser ist, als die Länge des Strassenabschnitts")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void DasSystemStelltSicherDassDieSummeDerLangenDerZustandsabschnitteNichtGrosserIstAlsDieLangeDesStrassenabschnitts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Das System stellt sicher, dass die Summe der Längen der Zustandsabschnitte nicht " +
                    "grösser ist, als die Länge des Strassenabschnitts", new string[] {
                        "Manuell"});
#line 96
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Der Data-Manager kann das Zustandserfassungsformular (Erfassungsformular für Ober" +
            "flächenschäden) ausfüllen")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void DerData_ManagerKannDasZustandserfassungsformularErfassungsformularFurOberflachenschadenAusfullen()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Data-Manager kann das Zustandserfassungsformular (Erfassungsformular für Ober" +
                    "flächenschäden) ausfüllen", new string[] {
                        "Manuell"});
#line 101
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 102
testRunner.When("ich das Erfassungsformular für Oberflächenschäden für den Zustandsabschnitt mit d" +
                    "er Id \'1\' öffne", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Möglichkeit"});
            table10.AddRow(new string[] {
                        "Erfassung des Zustandsindex"});
            table10.AddRow(new string[] {
                        "Grobe Zustandserfassung"});
            table10.AddRow(new string[] {
                        "Detaillierte Zustandserfassung"});
#line 103
testRunner.Then("habe ich folgende Möglichkeiten zur Auswahl:", ((string)(null)), table10, "Dann ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Strassenname",
                        "BezeichnungVon",
                        "BezeichnungBis"});
            table11.AddRow(new string[] {
                        "Jesuitenbachweg",
                        "Hackl",
                        "Schweighofer"});
#line 108
testRunner.And("sehe folgende Informationen:", ((string)(null)), table11, "Und ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Unabhängig von der Art der Zustandserfassung werden der „Strassenname“ die „Bezei" +
            "chnung von“ sowie die „Bezeichnung bis“ des Zustandsabschnitts read only angezei" +
            "gt")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void UnabhangigVonDerArtDerZustandserfassungWerdenDerStrassennameDieBezeichnungVonSowieDieBezeichnungBisDesZustandsabschnittsReadOnlyAngezeigt()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Unabhängig von der Art der Zustandserfassung werden der „Strassenname“ die „Bezei" +
                    "chnung von“ sowie die „Bezeichnung bis“ des Zustandsabschnitts read only angezei" +
                    "gt", new string[] {
                        "Manuell"});
#line 115
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Das System stellt bei grober und detaillierter Erfassung das Formular entsprechen" +
            "d der Belagsart des Strassenabschnitts dar")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void DasSystemStelltBeiGroberUndDetaillierterErfassungDasFormularEntsprechendDerBelagsartDesStrassenabschnittsDar()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Das System stellt bei grober und detaillierter Erfassung das Formular entsprechen" +
                    "d der Belagsart des Strassenabschnitts dar", new string[] {
                        "Manuell"});
#line 120
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Erfassungsformular Oberflächenschäden Betonbelag (Beton) - detailliert")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void ErfassungsformularOberflachenschadenBetonbelagBeton_Detailliert()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Erfassungsformular Oberflächenschäden Betonbelag (Beton) - detailliert", new string[] {
                        "Manuell"});
#line 125
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 126
testRunner.When("ich das Erfassungsformular für Oberflächenschäden für den Zustandsabschnitt mit d" +
                    "er Id \'2\' öffne", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Kategorie",
                        "Schaden"});
            table12.AddRow(new string[] {
                        "Oberflächenglätte",
                        "Polieren"});
            table12.AddRow(new string[] {
                        "Materialverluste",
                        "Abrieb"});
            table12.AddRow(new string[] {
                        "Materialverluste",
                        "Abblätterung"});
            table12.AddRow(new string[] {
                        "Materialverluste",
                        "Abplatzungen"});
            table12.AddRow(new string[] {
                        "Fugen- und Kantenschäden",
                        "Kantenschäden, Absplitterung"});
            table12.AddRow(new string[] {
                        "Fugen- und Kantenschäden",
                        "Fehlender oder spröder Fugenverguss"});
            table12.AddRow(new string[] {
                        "Vertikalverschiebung",
                        "Setzungen, Frosthebungen"});
            table12.AddRow(new string[] {
                        "Vertikalverschiebung",
                        "Stufenbildung"});
            table12.AddRow(new string[] {
                        "Vertikalverschiebung",
                        "Pumpen"});
            table12.AddRow(new string[] {
                        "Vertikalverschiebung",
                        "Blow-up"});
            table12.AddRow(new string[] {
                        "Risse, Brüche",
                        "Risse"});
            table12.AddRow(new string[] {
                        "Risse, Brüche",
                        "Zerstörte Platten"});
            table12.AddRow(new string[] {
                        "Flicke",
                        "Flicke"});
#line 127
testRunner.Then("sehe ich das Schadenerfassungsformular mit folgenden Möglichkeiten:", ((string)(null)), table12, "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Erfassungsformular Oberflächenschäden bitumenhaltiger Belag (Asphalt) - detaillie" +
            "rt")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void ErfassungsformularOberflachenschadenBitumenhaltigerBelagAsphalt_Detailliert()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Erfassungsformular Oberflächenschäden bitumenhaltiger Belag (Asphalt) - detaillie" +
                    "rt", new string[] {
                        "Manuell"});
#line 146
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 147
testRunner.When("ich das Erfassungsformular für Oberflächenschäden für den Zustandsabschnitt mit d" +
                    "er Id \'1\' öffne", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Kategorie",
                        "Schaden"});
            table13.AddRow(new string[] {
                        "Oberflächenglätte",
                        "Polieren"});
            table13.AddRow(new string[] {
                        "Oberflächenglätte",
                        "Schwitzen"});
            table13.AddRow(new string[] {
                        "Belagschäden",
                        "Abrieb"});
            table13.AddRow(new string[] {
                        "Belagschäden",
                        "Ausmagerung, Absanden"});
            table13.AddRow(new string[] {
                        "Belagschäden",
                        "Kornausbrüche"});
            table13.AddRow(new string[] {
                        "Belagschäden",
                        "Ablösungen"});
            table13.AddRow(new string[] {
                        "Belagschäden",
                        "Schlaglöcher"});
            table13.AddRow(new string[] {
                        "Belagschäden",
                        "Offene Nähte"});
            table13.AddRow(new string[] {
                        "Belagschäden",
                        "Querrisse"});
            table13.AddRow(new string[] {
                        "Belagschäden",
                        "Wilde Risse"});
            table13.AddRow(new string[] {
                        "Belagsverformungen",
                        "Spurrinnen"});
            table13.AddRow(new string[] {
                        "Belagsverformungen",
                        "Aufwölbungen"});
            table13.AddRow(new string[] {
                        "Belagsverformungen",
                        "Wellblechverformungen"});
            table13.AddRow(new string[] {
                        "Belagsverformungen",
                        "Schubverformungen"});
            table13.AddRow(new string[] {
                        "Strukturelle Schäden",
                        "Anrisse von Setzungen"});
            table13.AddRow(new string[] {
                        "Strukturelle Schäden",
                        "Setzungen, Einsenkungen"});
            table13.AddRow(new string[] {
                        "Strukturelle Schäden",
                        "Abgedrückte Ränder"});
            table13.AddRow(new string[] {
                        "Strukturelle Schäden",
                        "Frosthebungen"});
            table13.AddRow(new string[] {
                        "Strukturelle Schäden",
                        "Längsrisse"});
            table13.AddRow(new string[] {
                        "Strukturelle Schäden",
                        "Netzrisse"});
            table13.AddRow(new string[] {
                        "Strukturelle Schäden",
                        "Belagsrandrisse"});
            table13.AddRow(new string[] {
                        "Flicke",
                        "Flicke"});
#line 148
testRunner.Then("sehe ich das Schadenerfassungsformular mit folgenden Möglichkeiten:", ((string)(null)), table13, "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Der Data-Manager kann die Schadenschwere erfassen")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void DerData_ManagerKannDieSchadenschwereErfassen()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Data-Manager kann die Schadenschwere erfassen", new string[] {
                        "Manuell"});
#line 176
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 177
testRunner.When("ich das Erfassungsformular für Oberflächenschäden für den Zustandsabschnitt mit d" +
                    "er Id \'1\' öffne", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Schwere"});
            table14.AddRow(new string[] {
                        "S0"});
            table14.AddRow(new string[] {
                        "S1"});
            table14.AddRow(new string[] {
                        "S2"});
            table14.AddRow(new string[] {
                        "S3"});
#line 178
testRunner.Then("sehe ich das Schadenerfassungsformular mit folgenden Möglichkeiten:", ((string)(null)), table14, "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Der Data-Manager kann das Schadenausmass erfassen")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void DerData_ManagerKannDasSchadenausmassErfassen()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Data-Manager kann das Schadenausmass erfassen", new string[] {
                        "Manuell"});
#line 188
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 189
testRunner.When("ich das Erfassungsformular für Oberflächenschäden für den Zustandsabschnitt mit d" +
                    "er Id \'1\' öffne", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Schadenausmass"});
            table15.AddRow(new string[] {
                        "A1"});
            table15.AddRow(new string[] {
                        "A2"});
            table15.AddRow(new string[] {
                        "A3"});
#line 190
testRunner.Then("sehe ich das Schadenerfassungsformular mit folgenden Möglichkeiten:", ((string)(null)), table15, "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Das System errechnet die Matrixwerte")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void DasSystemErrechnetDieMatrixwerte()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Das System errechnet die Matrixwerte", new string[] {
                        "Manuell"});
#line 199
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 200
testRunner.When("ich das Erfassungsformular für Oberflächenschäden für den Zustandsabschnitt mit d" +
                    "er Id \'2\' öffne", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Kategorie",
                        "Schaden",
                        "Schwere",
                        "Schadenausmass"});
            table16.AddRow(new string[] {
                        "Oberflächenglätte",
                        "Polieren",
                        "S0",
                        "A1"});
            table16.AddRow(new string[] {
                        "Materialverluste",
                        "Abrieb",
                        "S1",
                        "A1"});
            table16.AddRow(new string[] {
                        "Materialverluste",
                        "Abblätterung",
                        "S2",
                        "A1"});
            table16.AddRow(new string[] {
                        "Materialverluste",
                        "Abplatzungen",
                        "S3",
                        "A1"});
            table16.AddRow(new string[] {
                        "Fugen- und Kantenschäden",
                        "Kantenschäden, Absplitterung",
                        "S0",
                        "A2"});
            table16.AddRow(new string[] {
                        "Fugen- und Kantenschäden",
                        "Fehlender oder spröder Fugenverguss",
                        "S1",
                        "A2"});
            table16.AddRow(new string[] {
                        "Vertikalverschiebung",
                        "Setzungen, Frosthebungen",
                        "S2",
                        "A2"});
            table16.AddRow(new string[] {
                        "Vertikalverschiebung",
                        "Stufenbildung",
                        "S3",
                        "A2"});
            table16.AddRow(new string[] {
                        "Vertikalverschiebung",
                        "Pumpen",
                        "S0",
                        "A3"});
            table16.AddRow(new string[] {
                        "Vertikalverschiebung",
                        "Blow-up",
                        "S1",
                        "A3"});
            table16.AddRow(new string[] {
                        "Risse, Brüche",
                        "Risse",
                        "S2",
                        "A3"});
            table16.AddRow(new string[] {
                        "Risse, Brüche",
                        "Zerstörte Platten",
                        "S3",
                        "A3"});
            table16.AddRow(new string[] {
                        "Flicke",
                        "Flicke",
                        "S0",
                        "A1"});
#line 201
testRunner.And("ich folgende Schäden erfasse:", ((string)(null)), table16, "Und ");
#line 216
testRunner.And("ich die Schäden speichere", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Kategorie",
                        "Schaden",
                        "Matrix"});
            table17.AddRow(new string[] {
                        "Oberflächenglätte",
                        "Polieren",
                        "0"});
            table17.AddRow(new string[] {
                        "Materialverluste",
                        "Abrieb",
                        "1"});
            table17.AddRow(new string[] {
                        "Materialverluste",
                        "Abblätterung",
                        "2"});
            table17.AddRow(new string[] {
                        "Materialverluste",
                        "Abplatzungen",
                        "3"});
            table17.AddRow(new string[] {
                        "Fugen- und Kantenschäden",
                        "Kantenschäden, Absplitterung",
                        "0"});
            table17.AddRow(new string[] {
                        "Fugen- und Kantenschäden",
                        "Fehlender oder spröder Fugenverguss",
                        "2"});
            table17.AddRow(new string[] {
                        "Vertikalverschiebung",
                        "Setzungen, Frosthebungen",
                        "4"});
            table17.AddRow(new string[] {
                        "Vertikalverschiebung",
                        "Stufenbildung",
                        "6"});
            table17.AddRow(new string[] {
                        "Vertikalverschiebung",
                        "Pumpen",
                        "0"});
            table17.AddRow(new string[] {
                        "Vertikalverschiebung",
                        "Blow-up",
                        "3"});
            table17.AddRow(new string[] {
                        "Risse, Brüche",
                        "Risse",
                        "6"});
            table17.AddRow(new string[] {
                        "Risse, Brüche",
                        "Zerstörte Platten",
                        "9"});
            table17.AddRow(new string[] {
                        "Flicke",
                        "Flicke",
                        "0"});
#line 217
testRunner.Then("sehe ich folgende Matrixwerte:", ((string)(null)), table17, "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Das System berechnet die Schadenbewertung")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void DasSystemBerechnetDieSchadenbewertung()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Das System berechnet die Schadenbewertung", new string[] {
                        "Manuell"});
#line 236
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 237
testRunner.When("ich das Erfassungsformular für Oberflächenschäden für den Zustandsabschnitt mit d" +
                    "er Id \'2\' öffne", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Kategorie",
                        "Schaden",
                        "Schwere",
                        "Schadenausmass"});
            table18.AddRow(new string[] {
                        "Oberflächenglätte",
                        "Polieren",
                        "S0",
                        "A1"});
            table18.AddRow(new string[] {
                        "Materialverluste",
                        "Abrieb",
                        "S1",
                        "A1"});
            table18.AddRow(new string[] {
                        "Materialverluste",
                        "Abblätterung",
                        "S2",
                        "A1"});
            table18.AddRow(new string[] {
                        "Materialverluste",
                        "Abplatzungen",
                        "S3",
                        "A1"});
            table18.AddRow(new string[] {
                        "Fugen- und Kantenschäden",
                        "Kantenschäden, Absplitterung",
                        "S0",
                        "A2"});
            table18.AddRow(new string[] {
                        "Fugen- und Kantenschäden",
                        "Fehlender oder spröder Fugenverguss",
                        "S1",
                        "A2"});
            table18.AddRow(new string[] {
                        "Vertikalverschiebung",
                        "Setzungen, Frosthebungen",
                        "S2",
                        "A2"});
            table18.AddRow(new string[] {
                        "Vertikalverschiebung",
                        "Stufenbildung",
                        "S3",
                        "A2"});
            table18.AddRow(new string[] {
                        "Vertikalverschiebung",
                        "Pumpen",
                        "S0",
                        "A3"});
            table18.AddRow(new string[] {
                        "Vertikalverschiebung",
                        "Blow-up",
                        "S1",
                        "A3"});
            table18.AddRow(new string[] {
                        "Risse, Brüche",
                        "Risse",
                        "S2",
                        "A3"});
            table18.AddRow(new string[] {
                        "Risse, Brüche",
                        "Zerstörte Platten",
                        "S3",
                        "A3"});
            table18.AddRow(new string[] {
                        "Flicke",
                        "Flicke",
                        "S0",
                        "A1"});
#line 238
testRunner.And("ich folgende Schäden erfasse:", ((string)(null)), table18, "Und ");
#line 253
testRunner.And("ich die Schäden speichere", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Kategorie",
                        "Bewertung"});
            table19.AddRow(new string[] {
                        "Oberflächenglätte",
                        "0"});
            table19.AddRow(new string[] {
                        "Materialverluste",
                        "6"});
            table19.AddRow(new string[] {
                        "Fugen- und Kantenschäden",
                        "2"});
            table19.AddRow(new string[] {
                        "Vertikalverschiebung",
                        "18"});
            table19.AddRow(new string[] {
                        "Risse, Brüche",
                        "18"});
            table19.AddRow(new string[] {
                        "Flicke",
                        "0"});
#line 254
testRunner.Then("sehe ich folgende Schadenbewertung:", ((string)(null)), table19, "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Das System berechnet die Schadensumme bei grober und detaillierter Erfassung")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void DasSystemBerechnetDieSchadensummeBeiGroberUndDetaillierterErfassung()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Das System berechnet die Schadensumme bei grober und detaillierter Erfassung", new string[] {
                        "Manuell"});
#line 266
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 267
testRunner.When("ich das Erfassungsformular für Oberflächenschäden für den Zustandsabschnitt mit d" +
                    "er Id \'2\' öffne", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Kategorie",
                        "Schaden",
                        "Schwere",
                        "Schadenausmass"});
            table20.AddRow(new string[] {
                        "Oberflächenglätte",
                        "Polieren",
                        "S0",
                        "A1"});
            table20.AddRow(new string[] {
                        "Materialverluste",
                        "Abrieb",
                        "S1",
                        "A1"});
            table20.AddRow(new string[] {
                        "Materialverluste",
                        "Abblätterung",
                        "S2",
                        "A1"});
            table20.AddRow(new string[] {
                        "Materialverluste",
                        "Abplatzungen",
                        "S3",
                        "A1"});
            table20.AddRow(new string[] {
                        "Fugen- und Kantenschäden",
                        "Kantenschäden, Absplitterung",
                        "S0",
                        "A2"});
            table20.AddRow(new string[] {
                        "Fugen- und Kantenschäden",
                        "Fehlender oder spröder Fugenverguss",
                        "S1",
                        "A2"});
            table20.AddRow(new string[] {
                        "Vertikalverschiebung",
                        "Setzungen, Frosthebungen",
                        "S2",
                        "A2"});
            table20.AddRow(new string[] {
                        "Vertikalverschiebung",
                        "Stufenbildung",
                        "S3",
                        "A2"});
            table20.AddRow(new string[] {
                        "Vertikalverschiebung",
                        "Pumpen",
                        "S0",
                        "A3"});
            table20.AddRow(new string[] {
                        "Vertikalverschiebung",
                        "Blow-up",
                        "S1",
                        "A3"});
            table20.AddRow(new string[] {
                        "Risse, Brüche",
                        "Risse",
                        "S2",
                        "A3"});
            table20.AddRow(new string[] {
                        "Risse, Brüche",
                        "Zerstörte Platten",
                        "S3",
                        "A3"});
            table20.AddRow(new string[] {
                        "Flicke",
                        "Flicke",
                        "S0",
                        "A1"});
#line 268
testRunner.And("ich folgende Schäden erfasse:", ((string)(null)), table20, "Und ");
#line 283
testRunner.And("ich die Schäden speichere", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line 284
testRunner.Then("sehe ich die Schadenssumme \'44\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Das System berechnet den Zustandsindex (I1) bei grober und detaillierter Erfassun" +
            "g")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void DasSystemBerechnetDenZustandsindexI1BeiGroberUndDetaillierterErfassung()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Das System berechnet den Zustandsindex (I1) bei grober und detaillierter Erfassun" +
                    "g", new string[] {
                        "Manuell"});
#line 290
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 291
testRunner.When("ich das Erfassungsformular für Oberflächenschäden für den Zustandsabschnitt mit d" +
                    "er Id \'2\' öffne", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Kategorie",
                        "Schaden",
                        "Schwere",
                        "Schadenausmass"});
            table21.AddRow(new string[] {
                        "Oberflächenglätte",
                        "Polieren",
                        "S0",
                        "A1"});
            table21.AddRow(new string[] {
                        "Materialverluste",
                        "Abrieb",
                        "S1",
                        "A1"});
            table21.AddRow(new string[] {
                        "Materialverluste",
                        "Abblätterung",
                        "S2",
                        "A1"});
            table21.AddRow(new string[] {
                        "Materialverluste",
                        "Abplatzungen",
                        "S3",
                        "A1"});
            table21.AddRow(new string[] {
                        "Fugen- und Kantenschäden",
                        "Kantenschäden, Absplitterung",
                        "S0",
                        "A2"});
            table21.AddRow(new string[] {
                        "Fugen- und Kantenschäden",
                        "Fehlender oder spröder Fugenverguss",
                        "S1",
                        "A2"});
            table21.AddRow(new string[] {
                        "Vertikalverschiebung",
                        "Setzungen, Frosthebungen",
                        "S2",
                        "A2"});
            table21.AddRow(new string[] {
                        "Vertikalverschiebung",
                        "Stufenbildung",
                        "S3",
                        "A2"});
            table21.AddRow(new string[] {
                        "Vertikalverschiebung",
                        "Pumpen",
                        "S0",
                        "A3"});
            table21.AddRow(new string[] {
                        "Vertikalverschiebung",
                        "Blow-up",
                        "S1",
                        "A3"});
            table21.AddRow(new string[] {
                        "Risse, Brüche",
                        "Risse",
                        "S2",
                        "A3"});
            table21.AddRow(new string[] {
                        "Risse, Brüche",
                        "Zerstörte Platten",
                        "S3",
                        "A3"});
            table21.AddRow(new string[] {
                        "Flicke",
                        "Flicke",
                        "S0",
                        "A1"});
#line 292
testRunner.And("ich folgende Schäden erfasse:", ((string)(null)), table21, "Und ");
#line 307
testRunner.And("ich die Schäden speichere", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line 308
testRunner.And("ich das Formular schliesse", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line 309
testRunner.Then("sehe ich für den Zustandsabschnitt mit der Id \'2\' den Zustandsindex \'4.4\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Der Data-Manager kann Zustandsabschnitte über die Übersichtstabelle löschen")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void DerData_ManagerKannZustandsabschnitteUberDieUbersichtstabelleLoschen()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Data-Manager kann Zustandsabschnitte über die Übersichtstabelle löschen", new string[] {
                        "Manuell"});
#line 314
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 315
 testRunner.When("ich den Zustandsabschnitt Id 7 lösche", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id"});
            table22.AddRow(new string[] {
                        "5"});
            table22.AddRow(new string[] {
                        "6"});
            table22.AddRow(new string[] {
                        "8"});
            table22.AddRow(new string[] {
                        "9"});
            table22.AddRow(new string[] {
                        "10"});
            table22.AddRow(new string[] {
                        "11"});
            table22.AddRow(new string[] {
                        "12"});
#line 316
 testRunner.Then("sind folgende Zustandsabschnitte im System:", ((string)(null)), table22, "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Das System berechnet die Fläche Fahrbahn (m²) nachdem der Data-Manager den Zustan" +
            "dsabschnitt gespeichert hat")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void DasSystemBerechnetDieFlacheFahrbahnMNachdemDerData_ManagerDenZustandsabschnittGespeichertHat()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Das System berechnet die Fläche Fahrbahn (m²) nachdem der Data-Manager den Zustan" +
                    "dsabschnitt gespeichert hat", new string[] {
                        "Manuell"});
#line 329
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Länge"});
            table23.AddRow(new string[] {
                        "5",
                        "150"});
            table23.AddRow(new string[] {
                        "6",
                        "888,5"});
#line 330
 testRunner.When("ich die Zustandsabschnitte für die Strasse mit der Id \'1\' folgendermassen editier" +
                    "e:", ((string)(null)), table23, "Wenn ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "FlächeFahrbahn"});
            table24.AddRow(new string[] {
                        "5",
                        "675"});
            table24.AddRow(new string[] {
                        "6",
                        "3998"});
            table24.AddRow(new string[] {
                        "7",
                        "22500"});
#line 335
 testRunner.Then("werden folgende Zustandsinformationen für die Strasse mit der Id \'3\' angezeigt:", ((string)(null)), table24, "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Das System berechnet die Fläche Trottoir links (m²) nachdem der Data-Manager den " +
            "Zustandsabschnitt gespeichert hat")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void DasSystemBerechnetDieFlacheTrottoirLinksMNachdemDerData_ManagerDenZustandsabschnittGespeichertHat()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Das System berechnet die Fläche Trottoir links (m²) nachdem der Data-Manager den " +
                    "Zustandsabschnitt gespeichert hat", new string[] {
                        "Manuell"});
#line 344
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Länge"});
            table25.AddRow(new string[] {
                        "5",
                        "150"});
            table25.AddRow(new string[] {
                        "6",
                        "888,5"});
#line 345
 testRunner.When("ich die Zustandsabschnitte für die Strasse mit der Id \'1\' folgendermassen editier" +
                    "e:", ((string)(null)), table25, "Wenn ");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "FlächeTrottoirLinks"});
            table26.AddRow(new string[] {
                        "5",
                        "375"});
            table26.AddRow(new string[] {
                        "6",
                        "2221"});
            table26.AddRow(new string[] {
                        "7",
                        "12500"});
#line 349
 testRunner.Then("werden folgende Zustandsinformationen für die Strasse mit der Id \'3\' angezeigt:", ((string)(null)), table26, "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Das System berechnet die Fläche Trottoir rechts (m²) nachdem der Data-Manager den" +
            " Zustandsabschnitt gespeichert hat")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void DasSystemBerechnetDieFlacheTrottoirRechtsMNachdemDerData_ManagerDenZustandsabschnittGespeichertHat()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Das System berechnet die Fläche Trottoir rechts (m²) nachdem der Data-Manager den" +
                    " Zustandsabschnitt gespeichert hat", new string[] {
                        "Manuell"});
#line 358
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Länge"});
            table27.AddRow(new string[] {
                        "12",
                        "500"});
#line 359
 testRunner.When("ich die Zustandsabschnitte für die Strasse mit der Id \'4\' folgendermassen editier" +
                    "e:", ((string)(null)), table27, "Wenn ");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "FlächeTrottoirLinks"});
            table28.AddRow(new string[] {
                        "12",
                        "750"});
#line 362
 testRunner.Then("werden folgende Zustandsinformationen für die Strasse mit der Id \'4\' angezeigt:", ((string)(null)), table28, "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Der Data-Manager kann zu jedem Zustandsabschnitt einen Massnahmenvorschlag erfass" +
            "en")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void DerData_ManagerKannZuJedemZustandsabschnittEinenMassnahmenvorschlagErfassen()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der Data-Manager kann zu jedem Zustandsabschnitt einen Massnahmenvorschlag erfass" +
                    "en", new string[] {
                        "Manuell"});
#line 369
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Das System berechnet die Kosten für den gewählten Massnahmenvorschlag")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        [NUnit.Framework.TestCaseAttribute("1", "Oberflächenverbesserung", "CHF 225000", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2", "Deckbelagserneuerung", "CHF 360000", new string[0])]
        [NUnit.Framework.TestCaseAttribute("3", "Belagserneuerung mit teilweiser Verstärkung", "CHF 5500000", new string[0])]
        [NUnit.Framework.TestCaseAttribute("4", "Erneuerung Oberbau", "CHF 3622500", new string[0])]
        [NUnit.Framework.TestCaseAttribute("7", "Erneuerung Trottoir links", "CHF 162500", new string[0])]
        [NUnit.Framework.TestCaseAttribute("6", "Erneuerung Trottoir rechts", "CHF 15000", new string[0])]
        public virtual void DasSystemBerechnetDieKostenFurDenGewahltenMassnahmenvorschlag(string id, string massnahme, string kosten, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Manuell"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Das System berechnet die Kosten für den gewählten Massnahmenvorschlag", @__tags);
#line 374
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "Massnahme",
                        "Kosten"});
            table29.AddRow(new string[] {
                        "Oberflächenverbesserung",
                        "50"});
            table29.AddRow(new string[] {
                        "Deckbelagserneuerung",
                        "100"});
            table29.AddRow(new string[] {
                        "Belagserneuerung mit teilweiser Verstärkung",
                        "200"});
            table29.AddRow(new string[] {
                        "Erneuerung Oberbau",
                        "300"});
            table29.AddRow(new string[] {
                        "Trottoir",
                        "50"});
#line 375
 testRunner.When("folgende Kosten pro m² für \'Mandant_1\' gelten:", ((string)(null)), table29, "Wenn ");
#line 382
 testRunner.And(string.Format("ich für den Zustandsabschnitt mit der Id \'{0}\' die Massnahme \'{1}\' vorschlage", id, massnahme), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line 383
 testRunner.And("ich die Schäden speichere", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line 384
 testRunner.Then(string.Format("werden folgende \'{0}\' für den Massnahmenvorschlag angezeigt", kosten), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Die vom System berechneten Kosten von Massnahmenvorschlägen können vom Benutzer n" +
            "achträglich angepasst werden")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void DieVomSystemBerechnetenKostenVonMassnahmenvorschlagenKonnenVomBenutzerNachtraglichAngepasstWerden()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Die vom System berechneten Kosten von Massnahmenvorschlägen können vom Benutzer n" +
                    "achträglich angepasst werden", new string[] {
                        "Manuell"});
#line 398
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Das System listet alle Zustandsabschnitte in einer Übersichtstabelle")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void DasSystemListetAlleZustandsabschnitteInEinerUbersichtstabelle()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Das System listet alle Zustandsabschnitte in einer Übersichtstabelle", new string[] {
                        "Manuell"});
#line 405
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Archivierte Daten können nicht verändert werden")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void ArchivierteDatenKonnenNichtVerandertWerden()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Archivierte Daten können nicht verändert werden", new string[] {
                        "Manuell"});
#line 410
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Werden Zustandsabschnitte gelöscht, hat das keine Auswirkungen auf historische Da" +
            "ten")]
        [NUnit.Framework.CategoryAttribute("Manuell")]
        public virtual void WerdenZustandsabschnitteGeloschtHatDasKeineAuswirkungenAufHistorischeDaten()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Werden Zustandsabschnitte gelöscht, hat das keine Auswirkungen auf historische Da" +
                    "ten", new string[] {
                        "Manuell"});
#line 415
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
